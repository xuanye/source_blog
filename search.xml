<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>自定义PlantUML和C4 Model样式</title>
    <url>/new-style-4-plantuml-and-c4model/</url>
    <content><![CDATA[<p><img src="https://www.plantuml.com/plantuml/png/RLAnRjim4Dtv5TSfzc1fwIGNQ8eW3RgqWJ9qB5ZgP14vaIhl65T_7rACR1WG1u6wU-_ntIFlMNIGE19e8_RDodnmU3wm7YT2zSawGx7360W6aOcRkWxwN9si3F5lP0p6Eq4dbV5Z_JzgDsCzaNPPyS0o4nxCvthKB1XgumDMK-geEuWkCSR411aGUa_apzQTWAn3qAw3cxODd7OU8YEGDvfeLdUhERZgggVsyV7ddszj--ktKcgPJJKFPCth2uOtGgc694xOuh-8BBlzKJLfNfZq2O_Azh1xJhlAknSqCQGq7WOqh_limi5EGiIzWhIQ3zWFPnUHNCjiozzzEElGVLqvpXT6OGLla1boQi4J5-9ApbNh8i9KO2cF3PcoMFnqAQ3hR7yZPVdPirpOC_8jVVMVKDd_bwiKCPRJjk1FcD7Rvrv0RIfZABWLKsHxJPm2BALii_CGiBC1pORNPcsjUHmNcP9r8VSbxEqvcu-hW50k-wYs1soAuUKDWE0uaHQyCRzyrHBvVVg98xq3" alt="流程图"></p>
<h2>什么是PlantUml</h2>
<p><a href="http://plantuml.com/" target="_blank" rel="noopener">PlantUml</a>是一个支持快速绘制的开源项目.其定义了一套完整的语言用于实现UML关系图的描述.并基于强大的graphviz图形渲染库进行UML图的生成.绘制的UML图还可以导出为图片,以及通用的矢量SVG格式文件.</p>
<p>如以下代码，可实现时序图</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Alice -&gt; Bob: Authentication Request</span><br><span class="line">Bob --&gt; Alice: Authentication Response</span><br><span class="line"></span><br><span class="line">Alice -&gt; Bob: Another authentication Request</span><br><span class="line">Alice &lt;-- Bob: another authentication Response</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="http://www.plantuml.com/plantuml/png/PP11QnD15CVlyocUlUIKh8YdfOHkDb71QY6RKZo5SVRP3CxEh3DlMkFDIp7W9r1FuaamX-95qNuQr_JcLt2cNMaMOM4PVk_t_y-RFKVSagyKkoMrKBv4RnKiY6gN9edbfuDZIGl_r3kqmcX2JGDXgkIbvtg9IQsuZdRVqL9XNznDAku8RIACnK4TStlWTJ2gO08j49uPfSofrCUWf4RWkeGEbjOHa87G2Ce8hjIIzVvT3cvoMMy_Ut9mE9jdnRnuE9db3qBLvVfYytEz-VxnSdM-MNzfFdtzy-Djy-QiUN_HhD_z-hRw_M7Ld9rlFhzcqybudasd1qUizsXoV_9ubhL7Hf8KmgwJhp2zStjOyAeEvm9VUDG2TvC8XennGSR2eKFBQcv92bbpJR1pxsg3N77dTe0xoBguG65qkSL7NRxFEtREMAo0_X2o5CRcoDZdiLgUSCAGhKtucHEq4TD2EWWVRvynGfP5TvH2RZ4gqxY7evkC4MEZE9B_7v-p7FhNTWHZev6LGRPc6LZKhg_LPhOLPPZPJi-knk8MARGHMmlieIvzfVu2" alt="时序图"></p>
<p>可以使用常用的编辑器vscode 或者sublime 或者其他IDE工具继承PlantUml</p>
<p>也可以使用在线的版本
<a href="https://www.planttext.com/" target="_blank" rel="noopener">https://www.planttext.com/</a></p>
<p>想了解更多PlantUml或者使用方法，可参考官网<a href="http://plantuml.com/zh/" target="_blank" rel="noopener">http://plantuml.com/zh/</a>，上面详细的中英文说明</p>
<h2>什么是C4 Model</h2>
<p><a href="https://c4model.com/" target="_blank" rel="noopener">C4 Model</a> 在我眼里更像是一个标准，一个方法论。让架构师、程序员、业务人员在讨论IT系统架构时候统一维度，统一标准，更方便的理解和沟通IT系统中的真实问题。<strong>强烈推荐</strong>！！！</p>
<p>C4 模型由一系列分层的软件架构图组成，这些架构图用于描述上下文（Context）、容器(Container)、组件(Component)和代码(Code)。C4 图的层次结构提供了不同的抽象级别，每种抽象级别都与不同的受众有关</p>
<p><img src="https://c4model.com/img/bigbankplc-Containers.png" alt="C4 Model"></p>
<p>这篇Infoq的文章是有一个比较详细的介绍<a href="https://infoq.cn/article/C4-architecture-model" target="_blank" rel="noopener">https://infoq.cn/article/C4-architecture-model</a></p>
<h2>本库只是一个样式库</h2>
<p>本库的目的是美化PlantUml和C4 Model所绘制系统架构图的样式，统一审美而产生。</p>
<p>详细的使用方法，可参考sample文件夹中的示例代码
<a href="https://github.com/xuanye/plantuml-style-c4/blob/master/samples/" target="_blank" rel="noopener">https://github.com/xuanye/plantuml-style-c4/blob/master/samples/</a></p>
<p>&lt;!--more--&gt;</p>
<h3>1.时序图</h3>
<p>在PlantUml代码中引用</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml sequence-sample</span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml</span><br><span class="line">&apos; 如果使用本地，则需要注释上一行，取消注释下一行</span><br><span class="line">&apos;!include core.puml</span><br><span class="line"></span><br><span class="line">&apos; 使用红色箭头，默认为灰色</span><br><span class="line">RED_ARROW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="https://www.plantuml.com/plantuml/img/PP71RjD054NtxoiUtMJb625MKHNLTW9852h5gQgkec7yQ4QCPypCk2Nis5H4wXS0AzGL4bbKR43Ghy6aEtw16MFKH4YMxD5vzzvvrtlMCUFgKgAbbpKfJf5bPIK9xWZ5PLrGRIJEdQli88uDE-kV23UldzMM3DVAaN9zhiluLStKWk9ACXNS8kiMaY9-FowPTMHYhWtrAq-WXxNoYj8hqSq9dsifzPbG9oY58cIgm2qiZFLV6dqYIisPb0le_RiStlf2RpyvFZYSpf9ybZyUJxD7FkfcTRt-iLf_-tYpl5glFZUNNtv_lsZUdZVlhvlLkvzVbxy-B9lpg_MdDp0PZsR9P79m1BqduuVZfzEaEu8JJXBkMl6Q1lVk3lEs7yoxldRZ08O0Z3jjyD0N0vNlL71H-J9mvq6xGIQPjJl8B2RRE2VVOx71qss-pxRK6K28m6Y8oG17-aYR5o5Qd397tbjf_zAdVi9ZDnSM_SEw6WE496ZJ0MQ6WcGIzh3krYC5ICD8zhzz1Xb6VzK1ZBGYABpOw4MuMDf2dzjvTX65dzbqJzgni4L8Q2qs5W3O8rMqVnJW3m00" alt="时序图"></p>
<h3>2. 类图</h3>
<p>以下为示例</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml 示例类图</span><br><span class="line"></span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml</span><br><span class="line">&apos; uncomment the following line and comment the first to use locally</span><br><span class="line">&apos;!include core.puml</span><br><span class="line"></span><br><span class="line">GREY_ARROW</span><br><span class="line"></span><br><span class="line">abstract class BaseClass &#123;</span><br><span class="line">    +  AbstractMethod() : void</span><br><span class="line">    #  VirtualMethod(s:string) : int</span><br><span class="line">&#125;</span><br><span class="line">class SubClass &#123;</span><br><span class="line">    + AbstractMethod() : void</span><br><span class="line">    # VirtualMethod(s:string) : int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IInterfaceA &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface &quot;IInterfaceA`1&quot;&lt;T&gt; &#123;</span><br><span class="line">    Value : T &lt;&lt;get&gt;&gt;</span><br><span class="line">&#125;</span><br><span class="line">class ImplementClass &#123;</span><br><span class="line">    + Value : int &lt;&lt;get&gt;&gt;</span><br><span class="line">&#125;</span><br><span class="line">BaseClass &lt;|-- SubClass</span><br><span class="line">IInterfaceA &lt;|-- &quot;IInterfaceA`1&quot;</span><br><span class="line">&quot;IInterfaceA`1&quot; &quot;&lt;int&gt;&quot; &lt;|-- ImplementClass</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="http://www.plantuml.com/plantuml/png/9Osn3S9G30Lxfe01yjrGKMKLurWaah_pPJyBiZr4LAShJZSdE53TBhVDnMhH2hkkmCW7KV2xlJQizQpKaDsXZYPxfq-n7qh3sCzwIXocazofSqA3alimJHBZpEblRPoVMNtvyGi0" alt="类图"></p>
<h3>3. 状态图</h3>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml state-sample</span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml</span><br><span class="line">&apos; uncomment the following line and comment the first to use locally</span><br><span class="line">&apos;!include core.puml</span><br><span class="line"></span><br><span class="line">GREEN_ARROW</span><br><span class="line"></span><br><span class="line">title HTTP Request Parsing States</span><br><span class="line"></span><br><span class="line">[*] --&gt; RequestLine</span><br><span class="line"></span><br><span class="line">RequestLine : Parse HTTP</span><br><span class="line">RequestLine : request line</span><br><span class="line">RequestLine --&gt; Headers : Ok</span><br><span class="line">RequestLine --&gt; Error : Failure</span><br><span class="line"></span><br><span class="line">Headers : Parse HTTP</span><br><span class="line">Headers : headers</span><br><span class="line">Headers --&gt; Host : Ok</span><br><span class="line">Headers --&gt; Error : Failure</span><br><span class="line"></span><br><span class="line">Host : Check host</span><br><span class="line">Host : header is present</span><br><span class="line">Host --&gt; Length : Not chunked</span><br><span class="line">Host --&gt; Chunked : Chunked</span><br><span class="line">Host --&gt; Error : Failure</span><br><span class="line"></span><br><span class="line">Length : Check if required,</span><br><span class="line">Length : valid &amp; size</span><br><span class="line">Length --&gt; Error : Failure</span><br><span class="line">Length --&gt; Error : Entity Too Large</span><br><span class="line">Length --&gt; [*] : Ok</span><br><span class="line"></span><br><span class="line">Chunked : Parse HTTP</span><br><span class="line">Chunked : chunk header</span><br><span class="line">Chunked --&gt; Error : Failure</span><br><span class="line">Chunked --&gt; [*] : Ok</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="http://www.plantuml.com/plantuml/png/9Oqn3i8m34LtJW47IBmmCVKg9hLe9SUDx6z1RmyHqzCRdjuIO4TslTnsQvghfEjr0qOyY9pVzRLZosU6U3iCOgZjwFH9jbDeADkiI-1KAUrEdGFY5Do7Ib208ULlTSpF8hR--0K0" alt="状态图"></p>
<h3>4. 用例图</h3>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml usecase-sample</span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml</span><br><span class="line">&apos; uncomment the following line and comment the first to use locally</span><br><span class="line">&apos;!include core.puml</span><br><span class="line"></span><br><span class="line">&apos; 设置方向</span><br><span class="line">LAYOUT_LEFT_RIGHT</span><br><span class="line">&apos;LAYOUT_TOP_DOWN</span><br><span class="line">&apos;LAYOUT_AS_SKETCH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">actor customer</span><br><span class="line">actor clerk</span><br><span class="line"></span><br><span class="line">UserCasePackage(&quot;checkout&quot;,&quot;买单&quot;) &#123;</span><br><span class="line">    customer -- (checkout)</span><br><span class="line">    (checkout) .&gt; (payment) : include</span><br><span class="line">    (help) .&gt; (checkout) : extends</span><br><span class="line">    (checkout) -- clerk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="http://www.plantuml.com/plantuml/img/9Oqx3i9030LxJW47oBgXeifLZFD48dcTbJ-2t1uYgj4KevaZsREwNcwRYTQ2ShskcICUHCxlzjfohMS5N7PBM3RPEtsAxG0DPJlhAV9GJ7Adpf5m2kv34LG1uS3qzpREqmnRVlm2" alt="用例图"></p>
<h3>5. 活动图</h3>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml activity-new-sample</span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml</span><br><span class="line">&apos; uncomment the following line and comment the first to use locally</span><br><span class="line">&apos;!include core.puml</span><br><span class="line"></span><br><span class="line">GREEN_ARROW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start</span><br><span class="line">:ClickServlet.handleRequest();</span><br><span class="line">:new page;</span><br><span class="line">if (Page.onSecurityCheck) then (true)</span><br><span class="line">    :Page.onInit();</span><br><span class="line">    if (isForward?) then (no)</span><br><span class="line">        :Process controls;</span><br><span class="line">        if (continue processing?) then (no)</span><br><span class="line">            stop</span><br><span class="line">        endif</span><br><span class="line">        if (isPost?) then (yes)</span><br><span class="line">            :Page.onPost();&lt;</span><br><span class="line">        else (no)</span><br><span class="line">            :Page.onGet();</span><br><span class="line">        endif</span><br><span class="line">        :Page.onRender();</span><br><span class="line">    endif</span><br><span class="line">else (false)</span><br><span class="line">endif</span><br><span class="line">if (do redirect?) then (yes)</span><br><span class="line">    :redirect process;</span><br><span class="line">else</span><br><span class="line">    if (do forward?) then (yes)</span><br><span class="line">        :Forward request;</span><br><span class="line">    else (no)</span><br><span class="line">        :Render page template;</span><br><span class="line">    endif</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">stop</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="https://www.plantuml.com/plantuml/img/9Or13i8m30JlVGKy8F654wT-nQGMZUIuKRoczFTGk8r66itiu85eEatNQaLZaHXwMO7kTwB1UtvMhF48br4sWnXosHgzW-qGwifsvibngAHoeyOE6UJSkeeJ5zHNnP5CzlINkVz-izZoXGy0" alt="活动图"></p>
<h3>6. 其他组件</h3>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml element</span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml</span><br><span class="line">&apos; uncomment the following line and comment the first to use locally</span><br><span class="line">&apos;!include core.puml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">actor actor</span><br><span class="line">agent agent</span><br><span class="line">artifact artifact</span><br><span class="line">boundary boundary</span><br><span class="line">card card</span><br><span class="line">cloud cloud</span><br><span class="line">component component</span><br><span class="line">control control</span><br><span class="line">database database</span><br><span class="line">entity entity</span><br><span class="line">file file</span><br><span class="line">folder folder</span><br><span class="line">frame frame</span><br><span class="line">interface  interface</span><br><span class="line">node node</span><br><span class="line">package package</span><br><span class="line">queue queue</span><br><span class="line">stack stack</span><br><span class="line">rectangle rectangle</span><br><span class="line">storage storage</span><br><span class="line">usecase usecase</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="https://www.plantuml.com/plantuml/img/7Sqx3eD034NHdbKa2m0tgLAn5MTu2aYs6VcZXDqdqDtcwCwHx5agmt3Vh4ajA9VRcjdZIUJycTvRhlMgWBVT4fPJsvM-nNQ0kh2TV8my16Dxa78ad8Ar2u8WqDFqwp73bd_y0000" alt="其他组件"></p>
<h2>C4 模型</h2>
<h3>1.System Context</h3>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml system-context-diagram</span><br><span class="line"></span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/c4_context.puml</span><br><span class="line">&apos; uncomment the following line and comment the first to use locally</span><br><span class="line">&apos;!include c4_context.puml</span><br><span class="line"></span><br><span class="line">LAYOUT_WITH_LEGEND</span><br><span class="line"></span><br><span class="line">title System Context diagram for Internet Banking System</span><br><span class="line"></span><br><span class="line">Actor(customer, &quot;Personal Banking Customer&quot;, &quot;A customer of the bank, with personal bank accounts.&quot;)</span><br><span class="line">System(banking_system, &quot;Internet Banking System&quot;, &quot;Allows customers to view information about their bank accounts, and make payments.&quot;)</span><br><span class="line"></span><br><span class="line">System_Ext(mail_system, &quot;E-mail system&quot;, &quot;The internal Microsoft Exchange e-mail system.&quot;)</span><br><span class="line">System_Ext(mainframe, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)</span><br><span class="line"></span><br><span class="line">Rel(customer, banking_system, &quot;Uses&quot;)</span><br><span class="line">Rel_Back(customer, mail_system, &quot;Sends e-mails to&quot;)</span><br><span class="line">Rel_Neighbor(banking_system, mail_system, &quot;Sends e-mails&quot;, &quot;SMTP&quot;)</span><br><span class="line">Rel(banking_system, mainframe, &quot;Uses&quot;)</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="https://www.plantuml.com/plantuml/png/VL7DRjf04BxxAQPSe1BWIquzXQIeZHJIg11LFLd3Ck0L-sFjpXRyzXqRcq9AU_FkVl--Zuo1apNP1-sKIHjAmK39NCLFUHxmCDrfBjCwHGhAEoR7K-LjVapeQiehWwvXJoBNXYRgBhSOcKAkxeeMVkHfrQWF8JdXMU43bmHRRum_QBS3enq1kWrSFUiGvSk3-8Bn2esfis4V4TwhPyFdsSzlRwlYnzFgQ_4y_p9_-PnbhDaGB6i9PE7nX8UDnbr02riVu4ckWYE61tHxoT9Xisocs8UHIf6zfJ26mIk5w1sQC_AnUnl8umnw9FXj6tyjg34SP3ceUcPp1wYKJuxZTF0nEvcDrYV58hP7aVj7gjQf6IsUxMApq2zD1z1E-bXaxHtWsgTsHHskJSVjp1Rt11NMbheSNP1YVkIHHMt-99bFcZF4i_-g9B5Y2asXXLR1Hxzbc1zLYMv7G9S4qNudxRQoF8dEel--qN4fqrC4DAPVKya5T3FTQ7fUOtpHb0EwYAg1oObOjKs_axdugtyj_nOf2anGnGEg_GNqUfSbkKtioZR_eEEyaDwLQnz6ryB_PRUD5wlNayGjPZzQd-vUwCcQtm00" alt="System Context"></p>
<h3>2. Container</h3>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml container-diagram</span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/c4_container.puml</span><br><span class="line">&apos; uncomment the following line and comment the first to use locally</span><br><span class="line">&apos;!include c4_container.puml</span><br><span class="line"></span><br><span class="line">LAYOUT_TOP_DOWN</span><br><span class="line">&apos;LAYOUT_AS_SKETCH</span><br><span class="line">LAYOUT_WITH_LEGEND_CN</span><br><span class="line"></span><br><span class="line">LAYOUT_TOP_DOWN</span><br><span class="line">&apos;LAYOUT_AS_SKETCH</span><br><span class="line">LAYOUT_WITH_LEGEND</span><br><span class="line"></span><br><span class="line">title Container diagram for Internet Banking System</span><br><span class="line"></span><br><span class="line">Actor(customer, Customer, &quot;A customer of the bank, with personal bank accounts&quot;)</span><br><span class="line"></span><br><span class="line">System_Boundary(c1, &quot;Internet Banking&quot;) &#123;</span><br><span class="line">    Container(web_app, &quot;Web Application&quot;, &quot;Java, Spring MVC&quot;, &quot;Delivers the static content and the Internet banking SPA&quot;)</span><br><span class="line">    Container(spa, &quot;Single-Page App&quot;, &quot;JavaScript, Angular&quot;, &quot;Provides all the Internet banking functionality to cutomers via their web browser&quot;)</span><br><span class="line">    Container(mobile_app, &quot;Mobile App&quot;, &quot;C#, Xamarin&quot;, &quot;Provides a limited subset of the Internet banking functionality to customers via their mobile device&quot;)</span><br><span class="line">    ContainerDb(database, &quot;Database&quot;, &quot;SQL Database&quot;, &quot;Stores user registraion information, hased auth credentials, access logs, etc.&quot;)</span><br><span class="line">    Container(backend_api, &quot;API Application&quot;, &quot;Java, Docker Container&quot;, &quot;Provides Internet banking functionality via API&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System_Ext(email_system, &quot;E-Mail System&quot;, &quot;The internal Microsoft Exchange system&quot;)</span><br><span class="line">System_Ext(banking_system, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)</span><br><span class="line"></span><br><span class="line">Rel(customer, web_app, &quot;Uses&quot;, &quot;HTTPS&quot;)</span><br><span class="line">Rel(customer, spa, &quot;Uses&quot;, &quot;HTTPS&quot;)</span><br><span class="line">Rel(customer, mobile_app, &quot;Uses&quot;)</span><br><span class="line"></span><br><span class="line">Rel_Neighbor(web_app, spa, &quot;Delivers&quot;)</span><br><span class="line">Rel(spa, backend_api, &quot;Uses&quot;, &quot;async, JSON/HTTPS&quot;)</span><br><span class="line">Rel(mobile_app, backend_api, &quot;Uses&quot;, &quot;async, JSON/HTTPS&quot;)</span><br><span class="line">Rel_Back_Neighbor(database, backend_api, &quot;Reads from and writes to&quot;, &quot;sync, JDBC&quot;)</span><br><span class="line"></span><br><span class="line">Rel_Back(customer, email_system, &quot;Sends e-mails to&quot;)</span><br><span class="line">Rel_Back(email_system, backend_api, &quot;Sends e-mails using&quot;, &quot;sync, SMTP&quot;)</span><br><span class="line">Rel_Neighbor(backend_api, banking_system, &quot;Uses&quot;, &quot;sync/async, XML/HTTPS&quot;)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="https://www.plantuml.com/plantuml/img/bLN1Zjf84BtxAsh9OOXa1aNAQKzX06Kc6MROcEma9wlSBg2LThVLtOP1g_tthJQsmH1jTZdPvQfNhr-zQZuuZzPNXG9Xj4UfoOvoYHkBHVIRr49LELLMmTRxqlq-7blStswatrPPvSY66jB-LfXY_5gXFj2uLAW3tiZvWwAHU3ykq7coO_4-xLhSbfmHtK2bkR9W1F1RWhLHokobte3Y942TG--pj8wV371dK4QWKeVefYK9r_ZHu-JxyzTLkdfUfhFdbwVefWbCaZJvF5zDxxl8oyFgFdsSVvm_pQB8Iwy8fYqOD7emFmiFV62hoSCTwX-1QdBWqnLHD17UsA6ed3S5sHYctTDW0cqOpBe-IiR5CUnPHoZ9EgDHrJ508KoblHkyZQ8ZSdh7WHpjOIZUCTPb_y5R-2i2_dLqXtlAKYnBJdwX32PbgQH0BuqUSEWJxZ26fBI1--BFQOZDICaTqwYfiH-y5D1CjXv227Tzi_RSomcJx7Ts9MCF4lxCar_YXaBtjciYh2nz31EzgHJQ45vQivCvEU1H_hpBcXqIgAEI_X1cBwfQI0SxYQ54Mk3pGcRDdlrunQWmcLJKoB6eNrfEqpSnVCC2MOa-5tPV8JtbuAhCCPTcPl-5cxiYToG0EUsae4jwisoOeySC7OKnD8-1JVB78_JUsLpCBUmSMDf8voroQv2QJLdKqurXoyavOCMk4fPo7fz4vU9WAdAELsR3B-J5xPLC6OeVf7FMIGQ_BXz-RfkPuJHxgklfzWjzWYGCpAt_xgmzV_L3Ab2grDK1XfkF5lpUR5N0Nx7qieRc7Lb8OOqpQm_pLx55pGuxLZBi6MR3u8JAc7hDAqmNQticRR1WCsd1WUuKPme3PgRofp77tRh6mFFG3klpdaIElf0wkn9EY_dLaGkzxrUhPSA9_RpZ6lrxJi_OTUgnNVf4ShFDpDarS8Hhbxn1geFziRSDqHsqYE5JylmqFcz-tl9_LQPtd7qYTh9y7-KBOUvWRKrHtpfxoql8Tv89o0tmx6xQdZDWdkbnOQE4OHtGA4HhZ1EH2yVrEVJhAXTksAvzibWj6w3kCBtoAz-rmeJwSQFEjyLZ9yu7BkL_gdy0" alt="容器图"></p>
<h3>3.Component</h3>
<p>组件图</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml component-diagram</span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/c4_component.puml</span><br><span class="line">&apos; uncomment the following line and comment the first to use locally</span><br><span class="line">&apos;!include c4_component.puml</span><br><span class="line"></span><br><span class="line">LAYOUT_WITH_LEGEND</span><br><span class="line"></span><br><span class="line">title Component diagram for Internet Banking System - API Application</span><br><span class="line"></span><br><span class="line">Container(spa, &quot;Single Page Application&quot;, &quot;javascript and angular&quot;, &quot;Provides all the internet banking functionality to customers via their web browser.&quot;)</span><br><span class="line">Container(ma, &quot;Mobile App&quot;, &quot;Xamarin&quot;, &quot;Provides a limited subset ot the internet banking functionality to customers via their mobile mobile device.&quot;)</span><br><span class="line">ContainerDb(db, &quot;Database&quot;, &quot;Relational Database Schema&quot;, &quot;Stores user registration information, hashed authentication credentials, access logs, etc.&quot;)</span><br><span class="line">System_Ext(mbs, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)</span><br><span class="line"></span><br><span class="line">Container_Boundary(api, &quot;API Application&quot;) &#123;</span><br><span class="line">    Component(sign, &quot;Sign In Controller&quot;, &quot;MVC Rest Controlle&quot;, &quot;Allows users to sign in to the internet banking system&quot;)</span><br><span class="line">    Component(accounts, &quot;Accounts Summary Controller&quot;, &quot;MVC Rest Controlle&quot;, &quot;Provides customers with a summory of their bank accounts&quot;)</span><br><span class="line">    Component(security, &quot;Security Component&quot;, &quot;Spring Bean&quot;, &quot;Provides functionality related to singing in, changing passwords, etc.&quot;)</span><br><span class="line">    Component(mbsfacade, &quot;Mainframe Banking System Facade&quot;, &quot;Spring Bean&quot;, &quot;A facade onto the mainframe banking system.&quot;)</span><br><span class="line"></span><br><span class="line">    Rel(sign, security, &quot;Uses&quot;)</span><br><span class="line">    Rel(accounts, mbsfacade, &quot;Uses&quot;)</span><br><span class="line">    Rel(security, db, &quot;Read &amp; write to&quot;, &quot;JDBC&quot;)</span><br><span class="line">    Rel(mbsfacade, mbs, &quot;Uses&quot;, &quot;XML/HTTPS&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rel(spa, sign, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)</span><br><span class="line">Rel(spa, accounts, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)</span><br><span class="line"></span><br><span class="line">Rel(ma, sign, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)</span><br><span class="line">Rel(ma, accounts, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="https://www.plantuml.com/plantuml/img/fLLDKzim4BtxLsnpA646oAMddXe2BL1e6HpwSSgivOsZLXyUIIRDTFhVkv8Jsm6cmqnpYRnQxRvzxyb-vmEwq6W5mkhQ6ZBXk9HOETJPAsc4Qafgd89L2BL_EvauN9zKCgoQel7aX3M1JvpmsScl1is69hL24-iT-x1HT2pUJ3JwG6uYtYow5YSrPsG7q1WEQGv0M14ihL9sBKq5IXe2D2NiRKldUMM1EuEo0fNQP0SxaF2qVdPmFVt--Nw--7evlrXSdtyu_tJMnQRv8lzuFfzTP5cGGH7CTeTXEp_ZSN390pf30KxH_8pGyWrFe-4OfhUNCArh9GK6QKsMpPWCPE1kx6iyWb7EwLpt5YiQ9evuwmS-e1TErY5DYQPg5BguS-liWop90q-NffOx0CKMm999YtLGoR29T8Z61wl9UNYG6Cz81sige71spHgTZ0u7q7H4TcCBgHAesF8RQdJIx7Td2RGCL89l2i_TRVWFDBhjj_qhwK4AseDrLepBWlkVOS02FKKiTwImhGoxCEHYHHhZRXwiOvpHXE2eaZwubCq8MJQTraUmGh_Y6R1X72Pi1G3Xg8oFgFmHe13aFVkfuWSA8k9gDLwS_mfZNVX86ADSiYNeaGq6IA9UTfb84Xpe21hW0Ini4tg6KdFRcC0hXcyy9Yfx73r1YrFEAz5jnbXBRlh8VAD3-9q1_peJZxsiJ39XPTZ442ivlb-KN7RpPGPtnBUf2yVeD5w_bbCVfOmb67zSFgkzRpauVDIv7seqtIuXRpIRRFCY69q9Uokj-Ot3dlHSnNALbcSsLaJIaVW4Y2VHEBPbf66xx7UJTBMBSvmIxhj_tzGk6f5Tb1WnLIlg4OWLjWyrUh-shknrsuV15bgYm9B-OIHudpAU0JM5zZ0mHQqEkgknBqHoJ6pDDsSh_u21UqyxXk9-Bz8GtgEa_dYwdNU49Ro6DOU8sOZehivEPuC3WrhjnKa5uplcvdfoCP_Vvfpy9yjIyVYItBfqbtQLV_xKvNL90qCzcvWozGkgwPSKUqUcvA_7Nm00" alt="组件图"></p>
<h3>4 Code</h3>
<p>类图上面已经演示过了</p>
<h3>5. 扩展图</h3>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml system-context-extend-diagram</span><br><span class="line">!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/c4_context.puml</span><br><span class="line">&apos; uncomment the following line and comment the first to use locally</span><br><span class="line">&apos;!include c4_context.puml</span><br><span class="line"></span><br><span class="line">&apos;LAYOUT_TOP_DOWN</span><br><span class="line">&apos;LAYOUT_AS_SKETCH</span><br><span class="line">LAYOUT_WITH_LEGEND</span><br><span class="line"></span><br><span class="line">title System Landscape diagram for Big Bank plc</span><br><span class="line"></span><br><span class="line">Actor(customer, &quot;Personal Banking Customer&quot;, &quot;A customer of the bank, with personal bank accounts.&quot;)</span><br><span class="line"></span><br><span class="line">Enterprise_Boundary(c0, &quot;Big Bank plc&quot;) &#123;</span><br><span class="line">    System(banking_system, &quot;Internet Banking System&quot;, &quot;Allows customers to view information about their bank accounts, and make payments.&quot;)</span><br><span class="line"></span><br><span class="line">    System_Ext(atm, &quot;ATM&quot;, &quot;Allows customers to withdraw cash.&quot;)</span><br><span class="line">    System_Ext(mail_system, &quot;E-mail system&quot;, &quot;The internal Microsoft Exchange e-mail system.&quot;)</span><br><span class="line"></span><br><span class="line">    System_Ext(mainframe, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)</span><br><span class="line"></span><br><span class="line">    Person_Ext(customer_service, &quot;Customer Service Staff&quot;, &quot;Customer service staff within the bank.&quot;)</span><br><span class="line">    Person_Ext(back_office, &quot;Back Office Staff&quot;, &quot;Administration and support staff within the bank.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rel_Neighbor(customer, banking_system, &quot;Uses&quot;)</span><br><span class="line">Rel_R(customer, atm, &quot;Withdraws cash using&quot;)</span><br><span class="line">Rel_Back(customer, mail_system, &quot;Sends e-mails to&quot;)</span><br><span class="line"></span><br><span class="line">Rel_R(customer, customer_service, &quot;Asks questions to&quot;, &quot;Telephone&quot;)</span><br><span class="line"></span><br><span class="line">Rel_D(banking_system, mail_system, &quot;Sends e-mail using&quot;)</span><br><span class="line">Rel_R(atm, mainframe, &quot;Uses&quot;)</span><br><span class="line">Rel_R(banking_system, mainframe, &quot;Uses&quot;)</span><br><span class="line">Rel_D(customer_service, mainframe, &quot;Uses&quot;)</span><br><span class="line">Rel_U(back_office, mainframe, &quot;Uses&quot;)</span><br><span class="line"></span><br><span class="line">Lay_D(atm, banking_system)</span><br><span class="line"></span><br><span class="line">Lay_D(atm, customer)</span><br><span class="line">Lay_U(mail_system, customer)</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p>
<p><img src="https://www.plantuml.com/plantuml/img/TLHDR-8m4BtxLynoAPNus4DFUogKQ5ijBLK1LNkAZEE0XMDdRQU0LllVT-maaBG12IcUppTlddrl7JMko2JOatKy6pAj73-w8VwvIeQ9e5j3C_9DA2QBX1T6miwvtFuOZmqzZBR2xOfDORa9YSgDcCx6nuAg4n_daYfVUsZTIV8Xknjd59kOCRkBgpwZ7Fta1Wg5UHdcWzjnIBMK-Y3K5gHG7AXAeEKMnkAN1kmBKZCgvOdSr13XStLoCv_yNgnNyMhn6iyMxozdmsGPBtz5guV7i-NzQVKOpwEVqSkC42USvB0CnC0SKLX6SmuL9uZIm5HiOKhL7dB929amfqsV5TRfZ9i1z5wviLfH6MByF0-LhuVE2TIHeDCms0QZ1d10JY6lCxqDA6EwKCwEUhU4H3YRoOsmF9wYDQ7cr6VViM0JJEyM_XB0Nmc_loa1nEMQCVZ9Lr7SdQ6LWG6OPz-UqLbFzOVW1n0APywe4re1tUWYh4EODiP1s5T6znnoUl9BAs5VmCJHqVMfyoWcg-Th7JqD2MeC6BKxN-5JWOmAUHad6lfpfM9VSeLyYZ0ZalWicD5MfmwY8zjHjUN0cmbT0D6jKjmpnsBFzNS7MqlSERU08gpNoD005U4Td9sd73GuSuOgIvaFmnDtx0ofr520L6V6UDy-1FF8Qa71iZJ1qj4qxJKzLJ1Oxmcq2dMMMqrieyk6idsiqxHiCCKJBCBfKdkIP489Yw3BkN3XjiXpRTprBly8UUCoVk5YkzkqhiaNRQujjvZXmzyQSQLatYjTs20CV0CmjGhsM1lnROKiyJsprTgzm3o_dpjq43onUmj_2cx3QdoU5nUNFDzfnUiYioyNx7hp5kItyY8qnTQQlgDiL-2iGnjNGjVj1NT4aJazOSK0hDs_xQjRtWRZkdqZBqvoZyFZG_mV" alt="扩展图"></p>
<h2>参考</h2>
<p>C4 Model的配色和实现大部分都是直接使用
<a href="https://github.com/RicardoNiepel/C4-PlantUML" target="_blank" rel="noopener">https://github.com/RicardoNiepel/C4-PlantUML</a>的,只有几个配色略有调整，并抽取出颜色的文件，可单独替换c4_theme 以实现其他配色</p>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>PlantUML</tag>
        <tag>架构设计</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Peach简化Socket网络通讯协议开发</title>
    <url>/a-lightweight-and-fast-socket-lib-base-on-dotnetty/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/697065c1ly1g0ky6oxiznj21hc0gohdu.jpg" alt></p>
<p>Peach是基于<a href="https://github.com/Azure/DotNetty" target="_blank" rel="noopener">DotNetty</a>的Socket网络通讯帮助类库，可以帮助开发者简化使用DotNetty，关于DotNetty可参考我之前的<a href="http://xuanye.github.io/dotnetty-quickstart/">这篇文章</a>。
Peach内置实现了一个基于文本协议的CommandLineProtocol，下面的实例以这个协议展开，最后以<a href="https://github.com/dotbpe/dotbpe" target="_blank" rel="noopener">DotBPE</a>中Amp协议来介绍下如何扩展自定义协议。</p>
<p>Github地址: https://github.com/xuanye/Peach</p>
<h1>QuickStart 使用</h1>
<p>添加引用</p>
<blockquote>
<p>dotnet nuget add Peach</p>
</blockquote>
<p>要使用Peach编写网络程序，一般只需要三个步骤</p>
<ol>
<li>实现协议传输消息IMessage</li>
<li>实现协议打包和解包逻辑IProtocol</li>
<li>实现ISocketService完成服务端逻辑编写
&lt;!-- more --&gt;
在快速开始的实例中，我们使用内置的CommandLineProtocol，所以省去了步骤1,2让我们开始吧！</li>
</ol>
<h2>1 服务端</h2>
<h3>1.1 实现MyService</h3>
<p>可分别重写</p>
<ol>
<li><code>OnConnected</code> 有客户端连接上的事件</li>
<li><code>OnDisConnected</code> 客户端断开连接时的事件</li>
<li><code>OnReceive</code> 收到客户端消息的事件</li>
<li><code>OnException</code> 发生异常时的事件，如异常断开</li>
</ol>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyService : Peach.AbsSocketService&lt;Peach.Messaging.CommandLineMessage&gt;</span><br><span class="line">&#123;</span><br><span class="line">    private readonly ILogger&lt;MyService&gt; _logger;</span><br><span class="line"></span><br><span class="line">    public MyService(ILogger&lt;MyService&gt; logger)</span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line">    public override void OnConnected(ISocketContext&lt;CommandLineMessage&gt; context)</span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(&quot;client connected from &#123;0&#125;&quot;, context.RemoteEndPoint);</span><br><span class="line">        base.OnConnected(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void OnDisconnected(ISocketContext&lt;CommandLineMessage&gt; context)</span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(&quot;client disconnected from &#123;0&#125;&quot;, context.RemoteEndPoint);</span><br><span class="line">        base.OnDisconnected(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void OnException(ISocketContext&lt;CommandLineMessage&gt; context, Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogError(ex,&quot;client from &#123;0&#125;, occ error &#123;1&#125;&quot;, context.RemoteEndPoint,ex.Message);</span><br><span class="line">        base.OnException(context, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void OnReceive(ISocketContext&lt;CommandLineMessage&gt; context, CommandLineMessage msg)</span><br><span class="line">    &#123;</span><br><span class="line">        string replyMessage = string.Empty;</span><br><span class="line">        string replyCmd = string.Empty;</span><br><span class="line">        switch (msg.Command)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;echo&quot;:</span><br><span class="line">                replyMessage = msg.Parameters[0];</span><br><span class="line">                replyCmd = &quot;echo&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;init&quot;:</span><br><span class="line">                replyMessage = &quot;ok&quot;;</span><br><span class="line">                replyCmd = &quot;init_reply&quot;;</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                replyMessage = &quot;error unknow command&quot;;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Task.Run(async () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            await context.SendAsync(new CommandLineMessage(replyCmd, replyMessage));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>2. 挂载服务</h3>
<p>服务默认挂载在5566端口</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    var builder = new HostBuilder()          </span><br><span class="line">    .ConfigureServices((context,services) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        //协议</span><br><span class="line">        services.AddSingleton&lt;IProtocol&lt;CommandLineMessage&gt;, CommandLineProtocol&gt;();</span><br><span class="line">        //挂载服务逻辑</span><br><span class="line">        services.AddSingleton&lt;ISocketService&lt;CommandLineMessage&gt;, MyService&gt;();</span><br><span class="line">        //添加挂载的宿主服务</span><br><span class="line">        services.AddTcpServer&lt;CommandLineMessage&gt;();</span><br><span class="line">    &#125;)</span><br><span class="line">    .ConfigureLogging(</span><br><span class="line">        logger =&gt;</span><br><span class="line">        &#123;                   </span><br><span class="line">            logger.AddConsole();</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    builder.RunConsoleAsync().Wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2>2. 客户端</h2>
<h3>2.1 使用内置的TcpClient</h3>
<p>监听接收消息和链接的消息，如下所示：
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TcpClient&lt;CommandLineMessage&gt; client = new TcpClient&lt;CommandLineMessage&gt;(new CommandLineProtocol());</span><br><span class="line">client.OnReceived += Client_OnReceived;</span><br><span class="line">client.OnConnected += Client_OnConnected;</span><br><span class="line"></span><br><span class="line">Task.Run(async () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    //连接服务器</span><br><span class="line">    var socketContext = await client.ConnectAsync(new IPEndPoint(Hey.IPUtility.GetLocalIntranetIP(), 5566));</span><br><span class="line">    //发送消息</span><br><span class="line">    var initCmd = new Hey.Messaging.CommandLineMessage(&quot;init&quot;);</span><br><span class="line">    await socketContext.SendAsync(initCmd);</span><br><span class="line">&#125;).Wait();</span><br></pre></td></tr></table></figure></p>
<p>可用的事件:</p>
<ul>
<li><code>OnReceived</code> 当收到服务端消息时</li>
<li><code>OnError</code> 当通讯发生异常时</li>
<li><code>OnConnected</code> 当连接上服务器时</li>
<li><code>OnDisconnected</code> 当与服务端断开链接时</li>
<li><code>OnIdleState</code> 链接闲置时触发，一般在此事件中发送心跳包</li>
</ul>
<h2>3. 自定义协议</h2>
<p>Peach支持使用自定义协议，扩展协议需要自行实现两个接口:</p>
<h3>3.1. IMessage 接口</h3>
<p>实现类具体实现通讯消息的内容载体，只需实现如何获取消息长度的属性</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface IMessage</span><br><span class="line">&#123;</span><br><span class="line">    int Length &#123; get;  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>3.2. IProtocol 接口</h3>
<p>实现类需要描述消息头信息和具体打包解包逻辑，头信息描述参见<code>ProtocolMeta</code>字段描述</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 协议接口</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;typeparam name=&quot;TMessage&quot;&gt;&lt;/typeparam&gt;</span><br><span class="line">public interface IProtocol&lt;TMessage&gt;</span><br><span class="line">    where TMessage :  Messaging.IMessage</span><br><span class="line">&#123;</span><br><span class="line">    ProtocolMeta GetProtocolMeta();</span><br><span class="line"></span><br><span class="line">    TMessage Parse(Buffer.IBufferReader reader);</span><br><span class="line"></span><br><span class="line">    void Pack(Buffer.IBufferWriter writer, TMessage message);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>3.3 Amp协议</h3>
<p>为了更好让读者理解自定义协议的操作，这里以DotBPE中的Amp协议为例，来具体讲解一下，先来看下Amp协议的说明:</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      0        1 2 3 4   5 6 7 8     9     10 11 12 13   1415      16171819    20    &lt;length&gt;-21</span><br><span class="line">+------------+----------+---------+------+-------------+---------+---------+--------+------------+</span><br><span class="line">| &lt;ver/argc&gt; | &lt;length&gt; |  &lt;seq&gt;  |&lt;type&gt;| &lt;serviceId&gt; | &lt;msgId&gt; |  &lt;code&gt; | &lt;codec&gt;|   &lt;data&gt;   |</span><br><span class="line">+------------+----------+---------+------+-------------+---------+---------+--------+------------+</span><br></pre></td></tr></table></figure></p>
<p>Amp协议固定包头上21个字节，说明如下：</p>
<ul>
<li>ver/argc = 版本 固定填1</li>
<li>length = 为总包长</li>
<li>seq  = 请求序列号</li>
<li>type = 消息类型
<ul>
<li>1 = Request 请求消息</li>
<li>2 = Response 响应消息</li>
<li>3 = Notify 通知消息</li>
<li>4 = OneWayRequest 调用不关心返回值</li>
</ul>
</li>
<li>serId = serviceId  服务号</li>
<li>msgId = msgId 消息ID</li>
<li>code = 当 type = 0 （请求时）固定传0 ，其他即为响应码，如果响应码不为0 则认为请求失败，具体错误码再定义</li>
<li>codecType = 编码方式 0=默认 Protobuf 1=MessagePack 2=JSON</li>
<li>data = 实际的业务数据</li>
</ul>
<h3>3.3.1 AmpMessage实现</h3>
<p>为了避免干扰因素，这里的代码去除了一些，辅助行的字段和方法，AmpMessage其实是主要用于描述头信息的，并且包含body的buffer数据 <code>Data</code>字段，并实现获取消息体Length的方法（用于发送消息时，计算缓冲区）</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AmpMessage :  Peach.Messaging.IMessage</span><br><span class="line">   &#123;</span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">       /// 第一个版本为18个字节头固定长度</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public const int VERSION_0_HEAD_LENGTH = 18;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 现有版本21个字节头固定长度</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public const int VERSION_1_HEAD_LENGTH = 21;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 状态码</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public int Code &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">       //0 默认为Protobuf 1 MessagePack 2 = JSON</span><br><span class="line">       public CodecType CodecType &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 实际的请求数据</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public byte[] Data &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">       public int Length &#123;</span><br><span class="line">           get</span><br><span class="line">           &#123;</span><br><span class="line">               var hl = Version == 0 ? VERSION_0_HEAD_LENGTH : VERSION_1_HEAD_LENGTH;</span><br><span class="line">               if(Data == null)</span><br><span class="line">               &#123;</span><br><span class="line">                   return hl;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               return hl + this.Data.Length;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 消息标识</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public string Id =&gt; $&quot;&#123;ServiceId&#125;|&#123;MessageId&#125;|&#123;Sequence&#125;&quot;;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 调用服务的唯一消息号 确定哪个方法</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public ushort MessageId &#123; get; set; &#125;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 请求的序列号</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public int Sequence &#123; get; set; &#125;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 调用服务的唯一服务号 确定哪个服务</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public int ServiceId &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 协议版本0/1</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public byte Version &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">       public InvokeMessageType InvokeMessageType &#123; get; set; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public enum InvokeMessageType : byte</span><br><span class="line">   &#123;</span><br><span class="line">       Request = 1,</span><br><span class="line">       Response = 2,</span><br><span class="line">       Notify = 3,</span><br><span class="line">       OnewayRequest=4 //请求且不等待回复</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h3>3.3.2 AmpProtocol的实现</h3>
<p>AmpProtocol中的实现主要是对ProtocolMeta描述，代码中已有详细注释，至于打包和解包，就是根据协议Write或者Read对应的数据类型即可</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">    /// Amp Protocol</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class AmpProtocol : IProtocol&lt;AmpMessage&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly ISerializer _serializer;</span><br><span class="line"></span><br><span class="line">        public AmpProtocol(ISerializer serializer)</span><br><span class="line">        &#123;</span><br><span class="line">            this._serializer = serializer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static readonly ProtocolMeta AMP_PROTOCOL_META = new ProtocolMeta</span><br><span class="line">        &#123;</span><br><span class="line">            InitialBytesToStrip = 0, //读取时需要跳过的字节数</span><br><span class="line">            LengthAdjustment = -5, //包实际长度的纠正，如果包长包括包头和包体，则要减去Length之前的部分</span><br><span class="line">            LengthFieldLength = 4, //长度字段的字节数 整型为4个字节</span><br><span class="line">            LengthFieldOffset = 1, //长度属性的起始（偏移）位</span><br><span class="line">            MaxFrameLength = int.MaxValue, //最大的数据包字节数</span><br><span class="line">            HeartbeatInterval = 30 * 1000 // 30秒没消息发一个心跳包</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        public ProtocolMeta GetProtocolMeta()</span><br><span class="line">        &#123;</span><br><span class="line">            return AMP_PROTOCOL_META;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Pack(IBufferWriter writer, AmpMessage message)</span><br><span class="line">        &#123;</span><br><span class="line">            writer.WriteByte(message.Version);</span><br><span class="line">            writer.WriteInt(message.Length);</span><br><span class="line">            writer.WriteInt(message.Sequence);</span><br><span class="line">            writer.WriteByte((byte)message.InvokeMessageType);</span><br><span class="line"></span><br><span class="line">            if (message.Version == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteUShort((ushort)message.ServiceId);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteInt(message.ServiceId);</span><br><span class="line">            &#125;</span><br><span class="line">            writer.WriteUShort(message.MessageId);</span><br><span class="line">            writer.WriteInt(message.Code);</span><br><span class="line">            if(message.Version == 1)</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteByte(_serializer.CodecType);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (message.Data != null)</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteBytes(message.Data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public AmpMessage Parse(IBufferReader reader)</span><br><span class="line">        &#123;</span><br><span class="line">            if (reader.ReadableBytes == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var msg = new AmpMessage &#123;Version = reader.ReadByte()&#125;;</span><br><span class="line"></span><br><span class="line">            int headLength;</span><br><span class="line">            if (msg.Version == 0 )</span><br><span class="line">            &#123;</span><br><span class="line">                headLength = AmpMessage.VERSION_0_HEAD_LENGTH;</span><br><span class="line">                if (reader.ReadableBytes &lt; AmpMessage.VERSION_0_HEAD_LENGTH - 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    throw new RpcCodecException($&quot;decode error ,ReadableBytes=&#123;reader.ReadableBytes+1&#125;,HEAD_LENGTH=&#123;AmpMessage.VERSION_0_HEAD_LENGTH&#125;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (msg.Version == 1 )</span><br><span class="line">            &#123;</span><br><span class="line">                headLength = AmpMessage.VERSION_1_HEAD_LENGTH;</span><br><span class="line">                if (reader.ReadableBytes &lt; AmpMessage.VERSION_1_HEAD_LENGTH - 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    throw new RpcCodecException($&quot;decode error ,ReadableBytes=&#123;reader.ReadableBytes+1&#125;,HEAD_LENGTH=&#123;AmpMessage.VERSION_1_HEAD_LENGTH&#125;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                throw new RpcCodecException($&quot;decode error ,&#123;msg.Version&#125; is not support&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var length = reader.ReadInt();</span><br><span class="line">            msg.Sequence = reader.ReadInt();</span><br><span class="line">            var type = reader.ReadByte();</span><br><span class="line">            msg.InvokeMessageType = (InvokeMessageType)Enum.ToObject(typeof(InvokeMessageType), type);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            msg.ServiceId = msg.Version == 0 ? reader.ReadUShort() : reader.ReadInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            msg.MessageId = reader.ReadUShort();</span><br><span class="line">            msg.Code = reader.ReadInt();</span><br><span class="line"></span><br><span class="line">            if (msg.Version == 1)</span><br><span class="line">            &#123;</span><br><span class="line">                byte codeType = reader.ReadByte();</span><br><span class="line">                if (codeType != this._serializer.CodecType)</span><br><span class="line">                &#123;</span><br><span class="line">                    throw  new RpcCodecException($&quot;CodecType:&#123;codeType&#125; is not Match &#123;this._serializer.CodecType&#125;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                msg.CodecType = (CodecType)Enum.ToObject(typeof(CodecType), codeType);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                msg.CodecType = CodecType.Protobuf;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int left = length - headLength;</span><br><span class="line">            if (left &gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                if (left &gt; reader.ReadableBytes)</span><br><span class="line">                &#123;</span><br><span class="line">                    throw new RpcCodecException(&quot;message not long enough!&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                msg.Data = new byte[left];</span><br><span class="line">                reader.ReadBytes(msg.Data);</span><br><span class="line">            &#125;</span><br><span class="line">            return msg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2>4. 后记</h2>
<p>Peach的产生主要是源于对DotBPE的重构，因为在其他项目中有关于通讯的其他需求，所以这块虽然比较简单，也可比较独立，所以单独开了一个库来实现对DotNetty的封装。另外欢迎各位dotnet core的同学一起学习交流 QQ群号：699044833</p>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>dotnet</tag>
        <tag>socket</tag>
        <tag>peach</tag>
        <tag>dotnetty</tag>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>xxl-job dotnet core executor执行器开源</title>
    <url>/xxl-job-executor-dotnet-port/</url>
    <content><![CDATA[<h1>DotXxlJob</h1>
<p>[(github)https://github.com/xuanye/DotXxlJob][https://github.com/xuanye/DotXxlJob]
xxl-job的dotnet core 执行器实现，支持XXL-JOB 2.0+</p>
<h2>1 XXL-JOB概述</h2>
<p>[XXL-JOB][1]是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。以下是它的架构图
<img src="https://raw.githubusercontent.com/xuxueli/xxl-job/master/doc/images/img_Qohm.png" alt="架构图"></p>
<h2>2. 关于DotXxlJob产生</h2>
<p>在工作中调研过多个任务调度平台，如Hangfire、基于Quatz.NET的第三方扩展，都与实际的需求有一点差距。 之前一直使用Hangfire，Hangfire的执行器在同步调用业务服务时，如果即时业务服务正在重新部署或者重启，有一定概率会出现死锁，导致CPU100%，后来全部调整为异步，但是这样就无法获得执行结果，这样的设计有蛮大问题，XxlJob的回调机制很好的解决了这个问题。本身如果通过http的方式调用，只要部署springbootd的一个执行器就可以解决问题，但是扩展性较差。所以萌生了实现DotNet版本的执行器的想法，为避免重复造轮子，开始之前也进行过调研，以下仓库[https://github.com/yuniansheng/xxl-job-dotnet][2]给了较大的启发，但是该库只支持1.9版本的xxljob，还有一些其他小问题，所以还是自力更生。</p>
<h2>3. 如何使用</h2>
<p>目前只实现了BEAN的方式，即直接实现IJobHandler调用的方式，Glue源码的方式实际上实现起来也并不复杂（有需求再说把），或者各位有需求Fork 实现一下</p>
<p>可参考sample</p>
<p>安装:</p>
<blockquote>
<p>dotnet add package DotXxlJob.Core</p>
</blockquote>
<h3>3.1 在AspNetCore中使用</h3>
<ol>
<li>生命一个AspNet的Middleware中间件,并扩展ApplicationBuilder，本质是拦截Post请求，解析Body中的流信息</li>
</ol>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class XxlJobExecutorMiddleware</span><br><span class="line">&#123;</span><br><span class="line">    private readonly IServiceProvider _provider;</span><br><span class="line">    private readonly RequestDelegate _next;</span><br><span class="line"></span><br><span class="line">    private readonly XxlRpcServiceHandler _rpcService;</span><br><span class="line">    public XxlJobExecutorMiddleware(IServiceProvider provider, RequestDelegate next)</span><br><span class="line">    &#123;</span><br><span class="line">        this._provider = provider;</span><br><span class="line">        this._next = next;</span><br><span class="line">        this._rpcService = _provider.GetRequiredService&lt;XxlRpcServiceHandler&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public async Task Invoke(HttpContext context)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        if (&quot;POST&quot;.Equals(context.Request.Method, StringComparison.OrdinalIgnoreCase) &amp;&amp; </span><br><span class="line">            &quot;application/octet-stream&quot;.Equals(context.Request.ContentType, StringComparison.OrdinalIgnoreCase))</span><br><span class="line">        &#123;</span><br><span class="line">            var rsp =  await _rpcService.HandlerAsync(context.Request.Body);</span><br><span class="line">            context.Response.StatusCode = (int) HttpStatusCode.OK;</span><br><span class="line">            context.Response.ContentType = &quot;text/plain;utf-8&quot;;</span><br><span class="line">            await context.Response.Body.WriteAsync(rsp,0,rsp.Length);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        await _next.Invoke(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>扩展ApplicationBuilderExtensions,可根据实际情况绑定在特殊的Url Path上</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static class ApplicationBuilderExtensions</span><br><span class="line">&#123;</span><br><span class="line">    public static IApplicationBuilder UseXxlJobExecutor(this IApplicationBuilder @this)</span><br><span class="line">    &#123;</span><br><span class="line">       return @this.UseMiddleware&lt;XxlJobExecutorMiddleware&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在Startup中添加必要的引用,其中自动注册。</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Startup</span><br><span class="line">&#123;</span><br><span class="line">    public Startup(IConfiguration configuration)</span><br><span class="line">    &#123;</span><br><span class="line">        Configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private IConfiguration Configuration &#123; get; &#125;</span><br><span class="line">    </span><br><span class="line">    public void ConfigureServices(IServiceCollection services)</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">        services.AddXxlJobExecutor(Configuration);</span><br><span class="line">        services.AddSingleton&lt;IJobHandler, DemoJobHandler&gt;(); // 添加自定义的jobHandler</span><br><span class="line">        services.AddAutoRegistry(); // 自动注册</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void Configure(IApplicationBuilder app,IHostingEnvironment env)</span><br><span class="line">    &#123;</span><br><span class="line">        //启用XxlExecutor</span><br><span class="line">        app.UseXxlJobExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>编写JobHandler,继承AbstractJobHandler或者直接实现接口IJobHandler，通过context.JobLogger 记录执行过程和结果，在AdminWeb上可查看的哦
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[JobHandler(&quot;demoJobHandler&quot;)]</span><br><span class="line">public class DemoJobHandler:AbstractJobHandler</span><br><span class="line">&#123;</span><br><span class="line">    public override Task&lt;ReturnT&gt; Execute(JobExecuteContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        context.JobLogger.Log(&quot;receive demo job handler,parameter:&#123;0&#125;&quot;,context.JobParameter);</span><br><span class="line"></span><br><span class="line">        return Task.FromResult(ReturnT.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2>3.2 配置信息</h2>
<p>管理端地址和端口是必填信息，其他根据实际情况，选择配置，配置项说明见下代码中的注释</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> public class XxlJobExecutorOptions</span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 管理端地址，多个以;分隔</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public string AdminAddresses &#123; get; set; &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// appName自动注册时要去管理端配置一致</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public string AppName &#123; get; set; &#125; = &quot;xxl-job-executor-dotnet&quot;;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 自动注册时提交的地址，为空会自动获取内网地址</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public string SpecialBindAddress &#123; get; set; &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 绑定端口</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public int Port &#123; get; set; &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 是否自动注册</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public bool AutoRegistry &#123; get; set; &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 认证票据</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public string AccessToken &#123; get; set; &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 日志目录，默认为执行目录的logs子目录下，请配置绝对路径</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public string LogPath &#123; get; set; &#125; = Path.Combine(AppContext.BaseDirectory, &quot;./logs&quot;);</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 日志保留天数</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public int LogRetentionDays &#123; get; set; &#125; = 30;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2>在其他Http服务中使用</h2>
<p>只需要实现Http请求的拦截，并判断post请求中content-Type=&quot;application/octet-stream&quot;,并使用XxlRpcServiceHandler来处理流 即可。</p>
<h2>其他说明</h2>
<p>XXL-JOB内置的RPC是使用Hessian协议，这个有点坑。很多都是java特有的属性和标识，比如类名什么的。在本项目中，并没有实现完整的Hessian2协议，只实现了使用到的类型，当然扩展起来也非常方便。如果有人要单独使用Hessian 这个类库的话，要特别注意这个问题。</p>
<p>有任何问题，可Issue反馈 ,最后感谢 xxl-job</p>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>dotnet</tag>
        <tag>rpc</tag>
        <tag>taskmanage</tag>
        <tag>开源</tag>
        <tag>原创</tag>
        <tag>xxljob</tag>
      </tags>
  </entry>
  <entry>
    <title>(译) Service Discovery And Health Checks In ASP.NET Core With Consul</title>
    <url>/service-discovery-and-health-checks-in-aspnet-core-with-consul/</url>
    <content><![CDATA[<p>在这篇文章中，我们将快速了解一下<code>服务发现</code>是什么，使用<a href="https://consul.io/" target="_blank" rel="noopener">Consul</a>在ASP.NET Core MVC框架中，并结合<a href="http://dnsclient.michaco.net/" target="_blank" rel="noopener">DnsClient.NET</a>实现基于Dns的客户端服务发现</p>
<blockquote>
<p>这篇文章的所有源代码都可以在GitHub上Demo项目获得.</p>
</blockquote>
<h2>Service Discovery</h2>
<p>在现代微服务架构中，服务可以在容器中运行，并且可以动态启动，停止和扩展。 这导致了一个非常动态的托管环境，可能有数百个实际端点，无法手动配置或找到正确的端点。</p>
<p>话虽这么说，我相信服务发现不仅适用于生活在容器中的粒状微服务。它可以被任何必须访问其他资源的应用程序使用。资源可以是数据库，其他Web服务，也可以是托管在其他地方的网站的一部分。服务发现有助于摆脱特定于环境的配置文件！</p>
<p>服务发现可用于解决此问题，但通常，有许多不同的方法来实现它</p>
<ul>
<li>客户端服务发现
一种解决方案是拥有一个中央服务注册表，其中所有服务实例都在这里注册。客户端必须实现逻辑以查询他们需要的服务，最终验证端点是否仍然存活并且可能将请求分发到多个端点。</li>
<li>服务器端/负载平衡
所有流量都通过负载均衡器，负载均衡器知道所有实际的，动态变化的端点，并相应地重定向所有请求</li>
</ul>
<p>Consul是一个服务注册表，可用于实现客户端服务发现。</p>
<p>除了使用这种方法的许多强大功能和优点之外，它的缺点是每个客户端应用程序都需要实现一些逻辑来使用此中央注册表。这个逻辑可能非常具体，因为Consul和任何其他技术都有自定义API和逻辑工作方式。</p>
<p>负载平衡也可能无法自动完成。客户端可以查询服务的所有可用/已注册端点，然后决定选择哪个端点。
好的是Consul不仅带有REST API来查询服务注册表，它还提供DNS端点，返回标准SRV和TXT记录。</p>
<p>DNS端点确实关心服务运行状况，因为它不会返回不健康的服务实例。它还通过以交替顺序返回记录来进行负载平衡！ 此外，它可能使服务具有更高的优先级，更接近客户端。</p>
<p>现在，让我们开始......</p>
<p>&lt;!--more--&gt;</p>
<h2>Consul 安装</h2>
<p><a href="https://consul.io/" target="_blank" rel="noopener">Consul</a>是由HashiCorp开发的软件，它不仅提供服务发现（如上所述），还提供“健康检查”，并提供分布式“密钥值存储”。</p>
<p>Consul旨在一个集群中运行，至少有三个实例处理集群环境中每个节点上的集群和“代理”的协调。应用程序始终只与本地代理通信，这使得通信速度非常快，并将网络延迟降至最低。</p>
<p>但是，对于本地开发，您可以在--dev模式下运行Consul，而不是设置完整集群。 但是请记住这一点，为了生产使用，需要做一些工作才能正确设置Consul。</p>
<h3>下载和运行Consul</h3>
<p><a href="https://www.consul.io/intro/getting-started/install.html" target="_blank" rel="noopener">官方文档</a>有很多例子，并且很好地解释了如何设置Consul。我不会详细介绍，我们只是将它作为本地开发代理运行。</p>
<p>要开始使用，请<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">下载Consul</a></p>
<p>使用<code>consul agent --dev</code>命令和参数来运行启动Consul，这将在本地服务模式下启动Consul而无需配置文件，并且只能在localhost上访问。
访问http://localhost:8500 ,这应该可以打开Consul UI</p>
<p><img src="http://ww1.sinaimg.cn/mw690/697065c1gy1fyvgzhr3a7j20py0migly.jpg" alt="Consul UI"></p>
<h2>注册第一个服务</h2>
<p>Consul提供了添加或修改服务注册表的不同方法。一种选择是将JSON配置文件放入Consul的config目录中。下面的例子将注册一个Redis服务：
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    &quot;service&quot;:&#123;</span><br><span class="line">        &quot;name&quot;: &quot;redis&quot;,</span><br><span class="line">        &quot;tags&quot;:[],</span><br><span class="line">        &quot;port&quot;: 6379</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另一个更有趣的选择是通过REST API。幸运的是，已有许多语言的客户端库可用于此REST API，我们将使用<a href="https://github.com/PlayFab/consuldotnet" target="_blank" rel="noopener">https://github.com/PlayFab/consuldotnet</a>，.Net Core也可以使用</p>
<p>要通过代码注册新服务，请创建一个新的ConsulClient实例并注册新的服务注册</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var client = new ConsulClient(); // uses default host:port which is localhost:8500</span><br><span class="line"></span><br><span class="line">var agentReg = new AgentServiceRegistration()</span><br><span class="line">&#123;</span><br><span class="line">    Address = &quot;127.0.0.1&quot;,</span><br><span class="line">    ID = &quot;uniqueid&quot;,</span><br><span class="line">    Name = &quot;serviceName&quot;,</span><br><span class="line">    Port = 5200</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">await client.Agent.ServiceRegister(agentReg);</span><br></pre></td></tr></table></figure></p>
<p>重要的是要注意，即使服务不再运行，该注册理论上也将永远存在于Consul集群中。</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">await client.Agent.ServiceDeregister(&quot;uniqueid&quot;);</span><br></pre></td></tr></table></figure></p>
<p>如果服务崩溃，则可能无法始终手动取消注册服务。这就是Consul的另一个特色：健康检查。</p>
<h2>健康检查 Health Checks</h2>
<p>Consul中的监控检查可用于监视群集中的所有服务的状态，还可以从Consul注册表中自动删除不健康的服务端点注册。可以将Consul配置为根据需要定期为每个注册服务运行尽可能多的运行状况检查。</p>
<p>最基本的健康检查让Consul尝试通过TCP连接到服务：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var tcpCheck = new AgentServiceCheck()</span><br><span class="line">&#123;</span><br><span class="line">    DeregisterCriticalServiceAfter = TimeSpan.FromMinutes(1),</span><br><span class="line">    Interval = TimeSpan.FromSeconds(30),</span><br><span class="line">    TCP = $&quot;127.0.0.1:&#123;port&#125;&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>Consul还可以检查HTTP端点。在这种情况下，只要端点返回HTTP状态代码200，服务就是健康的。
一个非常简单的健康检查控制器可以像这样实现：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Route(&quot;[Controller]&quot;)]</span><br><span class="line">public class HealthCheckController : Controller</span><br><span class="line">&#123;</span><br><span class="line">    [HttpGet(&quot;&quot;)]</span><br><span class="line">    [HttpHead(&quot;&quot;)]</span><br><span class="line">    public IActionResult Ping()</span><br><span class="line">    &#123;</span><br><span class="line">        return Ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这次注册中，我们现在必须通过指定AgentServiceCheck的<code>Http</code>属性而不是<code>Tcp</code>属性来将Consul指向该节点：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var httpCheck = new AgentServiceCheck()</span><br><span class="line">&#123;</span><br><span class="line">    DeregisterCriticalServiceAfter = TimeSpan.FromMinutes(1),</span><br><span class="line">    Interval = TimeSpan.FromSeconds(30),</span><br><span class="line">    HTTP = $&quot;http://127.0.0.1:&#123;port&#125;/HealthCheck&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>更新之前注册代码，添加让Consul每30秒运行一次健康检查的部分。请注意，我还将检查配置为自动取消注册服务实例，以防它被标记为运行状况超过一分钟。</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var registration = new AgentServiceRegistration()</span><br><span class="line">&#123;</span><br><span class="line">    Checks = new[] &#123; tcpCheck, httpCheck &#125;,</span><br><span class="line">    Address = &quot;127.0.0.1&quot;,</span><br><span class="line">    ID = id,</span><br><span class="line">    Name = name,</span><br><span class="line">    Port = port</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">await client.Agent.ServiceRegister(registration);</span><br></pre></td></tr></table></figure></p>
<p>这些基本示例应该足以开始。但是，运行健康检查可以执行更复杂的操作，Consul支持运行小脚本来验证响应。</p>
<h2>Endpoint Name, ID and Port</h2>
<p>您可能已经注意到，要注册服务，我们必须知道服务运行的实际端点(<code>Endpoint</code>)，我们必须给它一个<code>Name</code>和一个<code>ID</code>。</p>
<p><code>ID</code>应该是足够唯一的字符串来标识服务实例，而<code>Name</code>应该是同一服务的所有实例的通用名称。</p>
<p>其他客户端将使用Name来查询服务注册表，该ID仅用于引用确切的实例，例如取消注册服务实例时。
但是我们如何定义名称和端口以及IP地址？</p>
<p>如果我们自己使用Kestrel托管ASP.NET Core应用程序很简单，因为我们还在哪个端口和地址上配置Kestrel。当使用IIS（或任何其他反向代理）托管服务时，这种方法会分崩离析，因为在反向代理模式下，Kestrel使用了动态配置，并且实际的托管信息无法在应用程序代码中使用。（译者注:IIS对外的端口和内部Kestrel的端口并不一致）</p>
<p>要了解如何使用Kestrel托管它，让我们创建一个空的ASP.NET Core web api项目。</p>
<p>运行<code>dotnet new webapi</code>或在Visual Studio中使用WebAPI模板。</p>
<p>这将创建一个Program.cs和Startup.cs。 修改<code>Program.cs</code>以创建主机。我们将使用<code>host.Start</code>而不是<code>host.Run</code>，它不会阻塞线程。之后，我们将注册该服务并在服务停止时取消注册：
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var host = new WebHostBuilder()</span><br><span class="line">    .UseKestrel()</span><br><span class="line">    .UseUrls(&quot;http://localhost:5200&quot;)</span><br><span class="line">    .UseContentRoot(Directory.GetCurrentDirectory())</span><br><span class="line">    .UseStartup&lt;Startup&gt;()</span><br><span class="line">    .Build();</span><br><span class="line"></span><br><span class="line">host.Start();</span><br><span class="line"></span><br><span class="line">var client = new ConsulClient();</span><br><span class="line"></span><br><span class="line">var name = Assembly.GetEntryAssembly().GetName().Name;</span><br><span class="line">var port = 5200;</span><br><span class="line">var id = $&quot;&#123;name&#125;:&#123;port&#125;&quot;;</span><br><span class="line"></span><br><span class="line">var tcpCheck = new AgentServiceCheck()</span><br><span class="line">&#123;</span><br><span class="line">    DeregisterCriticalServiceAfter = TimeSpan.FromMinutes(1),</span><br><span class="line">    Interval = TimeSpan.FromSeconds(30),</span><br><span class="line">    TCP = $&quot;127.0.0.1:&#123;port&#125;&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var httpCheck = new AgentServiceCheck()</span><br><span class="line">&#123;</span><br><span class="line">    DeregisterCriticalServiceAfter = TimeSpan.FromMinutes(1),</span><br><span class="line">    Interval = TimeSpan.FromSeconds(30),</span><br><span class="line">    HTTP = $&quot;http://127.0.0.1:&#123;port&#125;/HealthCheck&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var registration = new AgentServiceRegistration()</span><br><span class="line">&#123;</span><br><span class="line">    Checks = new[] &#123; tcpCheck, httpCheck &#125;,</span><br><span class="line">    Address = &quot;127.0.0.1&quot;,</span><br><span class="line">    ID = id,</span><br><span class="line">    Name = name,</span><br><span class="line">    Port = port</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">client.Agent.ServiceRegister(registration).GetAwaiter().GetResult();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(&quot;DataService started...&quot;);</span><br><span class="line">Console.WriteLine(&quot;Press ESC to exit&quot;);</span><br><span class="line"></span><br><span class="line">while (Console.ReadKey().Key != ConsoleKey.Escape)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client.Agent.ServiceDeregister(id).GetAwaiter().GetResult();</span><br></pre></td></tr></table></figure></p>
<p><img src="http://blog.michaco.net/media/aspNetCoreAndConsul/FirstServiceReg.png" alt="此处输入图片的描述"></p>
<p>并且（如果您已添加运行状况检查控制器），它将成功运行两个运行状况检查：</p>
<p><img src="http://blog.michaco.net/media/aspNetCoreAndConsul/FirstServiceCheck.png" alt="此处输入图片的描述"></p>
<p>我使用程序集名称作为服务名称，我正在硬编码端口和IP地址。显然，这需要是可配置的，阻止控制台线程的解决方案也不是很好。</p>
<h2>更复杂的方式</h2>
<p>了解基础知识以及注册过程的工作原理，让我们稍微改进一下实现。</p>
<p><strong>目标</strong>：</p>
<ul>
<li>可以通过appsettings.json配置服务名称</li>
<li>主机和端口不应该是硬编码的</li>
<li>使用Microsoft.Extensions.Configuration和Options来正确配置我们需要的所有内容</li>
<li>将注册设置为Startup管道的一部分</li>
</ul>
<h3>Configuration</h3>
<p>我定义了一个新的POCOs的配置文件在<code>appsetting.json</code>文件中，如下所示:</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  &quot;ServiceDiscovery&quot;: &#123;</span><br><span class="line">    &quot;ServiceName&quot;: &quot;DataService&quot;,</span><br><span class="line">    &quot;Consul&quot;: &#123;</span><br><span class="line">      &quot;HttpEndpoint&quot;: &quot;http://127.0.0.1:8500&quot;,</span><br><span class="line">      &quot;DnsEndpoint&quot;: &#123;</span><br><span class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;Port&quot;: 8600</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C#:</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ServiceDisvoveryOptions</span><br><span class="line">&#123;</span><br><span class="line">    public string ServiceName &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public ConsulOptions Consul &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ConsulOptions</span><br><span class="line">&#123;</span><br><span class="line">    public string HttpEndpoint &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public DnsEndpoint DnsEndpoint &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class DnsEndpoint</span><br><span class="line">&#123;</span><br><span class="line">    public string Address &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public int Port &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public IPEndPoint ToIPEndPoint()</span><br><span class="line">    &#123;</span><br><span class="line">        return new IPEndPoint(IPAddress.Parse(Address), Port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在Startup.ConfigureServices方法中进行配置：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">services.AddOptions();</span><br><span class="line">services.Configure&lt;ServiceDisvoveryOptions&gt;(Configuration.GetSection(&quot;ServiceDiscovery&quot;));</span><br></pre></td></tr></table></figure></p>
<p>使用此配置来设置consul客户端：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">services.AddSingleton&lt;IConsulClient&gt;(p =&gt; new ConsulClient(cfg =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    var serviceConfiguration = p.GetRequiredService&lt;IOptions&lt;ServiceDisvoveryOptions&gt;&gt;().Value;</span><br><span class="line"></span><br><span class="line">    if (!string.IsNullOrEmpty(serviceConfiguration.Consul.HttpEndpoint))</span><br><span class="line">    &#123;</span><br><span class="line">        // if not configured, the client will use the default value &quot;127.0.0.1:8500&quot;</span><br><span class="line">        cfg.Address = new Uri(serviceConfiguration.Consul.HttpEndpoint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p>
<p><code>ConsulClient</code>不一定需要配置，如果没有指定，它将使用默认地址（localhost：8500）。</p>
<h3>动态服务注册</h3>
<p>只要使用<code>Kestrel</code>在某个端口上托管服务，就可以使用<code>app.Properties[&quot;server.Features&quot;]</code>来确定托管服务的位置。如上所述，如果使用IIS集成或任何其他反向代理，此解决方案将不再起作用，并且必须使用服务可访问的实际端点来在Consul中注册服务，并且在启动期间无法获取该信息。</p>
<p>如果要将IIS集成与服务发现一起使用，请不要使用以下代码。而是通过配置配置端点，或手动注册服务。</p>
<p>无论如何，对于Kestrel，我们可以执行以下操作：获取URIs kestrel托管服务（这不适用于像<code>UseUrls(&quot;*:5000&quot;)</code>这样的通配符，然后循环地址以在Consul中注册所有地址：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ublic void Configure(</span><br><span class="line">        IApplicationBuilder app,</span><br><span class="line">        IApplicationLifetime appLife,</span><br><span class="line">        ILoggerFactory loggerFactory,</span><br><span class="line">        IOptions&lt;ServiceDisvoveryOptions&gt; serviceOptions,</span><br><span class="line">        IConsulClient consul)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        var features = app.Properties[&quot;server.Features&quot;] as FeatureCollection;</span><br><span class="line">        var addresses = features.Get&lt;IServerAddressesFeature&gt;()</span><br><span class="line">            .Addresses</span><br><span class="line">            .Select(p =&gt; new Uri(p));</span><br><span class="line"></span><br><span class="line">        foreach (var address in addresses)</span><br><span class="line">        &#123;</span><br><span class="line">            var serviceId = $&quot;&#123;serviceOptions.Value.ServiceName&#125;_&#123;address.Host&#125;:&#123;address.Port&#125;&quot;;</span><br><span class="line"></span><br><span class="line">            var httpCheck = new AgentServiceCheck()</span><br><span class="line">            &#123;</span><br><span class="line">                DeregisterCriticalServiceAfter = TimeSpan.FromMinutes(1),</span><br><span class="line">                Interval = TimeSpan.FromSeconds(30),</span><br><span class="line">                HTTP = new Uri(address, &quot;HealthCheck&quot;).OriginalString</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var registration = new AgentServiceRegistration()</span><br><span class="line">            &#123;</span><br><span class="line">                Checks = new[] &#123; httpCheck &#125;,</span><br><span class="line">                Address = address.Host,</span><br><span class="line">                ID = serviceId,</span><br><span class="line">                Name = serviceOptions.Value.ServiceName,</span><br><span class="line">                Port = address.Port</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            consul.Agent.ServiceRegister(registration).GetAwaiter().GetResult();</span><br><span class="line"></span><br><span class="line">            appLife.ApplicationStopping.Register(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                consul.Agent.ServiceDeregister(serviceId).GetAwaiter().GetResult();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p>
<p><code>serviceId</code>必须足够独特，以便稍后再次找到该服务的特定实例，以取消注册它。我正在使用主机和端口以及实际的服务名称的连接方式，这应该足够好了。</p>
<p>这样我们就达到了所有的目标，虽然在启动的时候写了很多的代码，不过我们可以重构一下使用扩展方法来改善。</p>
<h2>查询服务注册信息</h2>
<p>新服务正在运行并在Consul中注册，现在应该很容易通过Consul API或DNS找到它。</p>
<h3>使用Consul客户端查询</h3>
<p>使用Consul客户端，我们可以使用两种Consul服务</p>
<ul>
<li>
<p>使用Catalog端点，它提供有关服务的原始信息，这个将返回未过滤的结果
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var consulResult = await _consul.Catalog.Service(_options.Value.ServiceName);</span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>使用Health端点，它将返回已经过滤过的结果
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var healthResult = await _consul.Health.Service(_options.Value.ServiceName, tag: null, passingOnly: true);</span><br></pre></td></tr></table></figure></p>
</li>
</ul>
<p>这里需要注意的重要一点是，这些端点返回的服务列表（如果多个实例正在运行）将始终采用相同的顺序。您必须实现逻辑，以便不会一直调用相同的服务端点，并在所有端点之间传播流量。</p>
<p>同样，这就是我们可以使用DNS的方式。除了建立负载平衡之外，优点还在于，我们不必再进行另一次昂贵的http调用，并且并且把最终结果缓存一小段时间。使用DNS，我们只需几行代码就可以实现这一切。</p>
<h3>使用DNS查询</h3>
<p>让我们用<code>dig</code>命令检查DNS端点，以了解响应的样子：</p>
<p>要求SRV记录的域名语法是<code>&lt;servicename&gt;.consul.service</code>，这意味着我们可以使用<code>dig @127.0.0.1 -p 8600 dataservice.service.consul SRV</code>查询我们的<code>dataService</code>：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ; &lt;&lt;&gt;&gt; DiG 9.11.0-P2 &lt;&lt;&gt;&gt; @127.0.0.1 -p 8600 dataservice.service.consul SRV</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 25053</span><br><span class="line">;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line">;; WARNING: recursion requested but not available</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;dataservice.service.consul.    IN      SRV</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">dataservice.service.consul. 0   IN      SRV     1 1 5200 machinename.node.eu-west.consul.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">machinename.node.eu-west.consul. 0 IN      CNAME   localhost.</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 127.0.0.1#8600(127.0.0.1)</span><br><span class="line">;; WHEN: Tue Apr 25 21:08:19 DST 2017</span><br><span class="line">;; MSG SIZE  rcvd: 109</span><br></pre></td></tr></table></figure></p>
<p>我们获取<code>SRV</code>记录中的端口，相应的<code>CNAME</code>记录包含我们用于注册服务的主机名或地址.</p>
<p>Consul DNS端点还允许我们查询标签并限制查询仅查看一个特定的数据中心。 要查询标记，我们必须在标记和服务名称前加上<code>_: _&lt;tag&gt;._&lt;serviceName&gt;.service.consul</code>,要指定数据中心查询，将根域更改为<code>&lt;servicename&gt;.service.&lt;datacenter&gt;.consul</code>.</p>
<h4>DNS负载均衡</h4>
<p>DNS端点通过以交替顺序返回结果来执行负载均衡。如果我在另一个端口上启动另一个服务实例，我们得到：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;; QUESTION SECTION:</span><br><span class="line">;dataservice.service.consul.    IN      SRV</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">dataservice.service.consul. 0   IN      SRV     1 1 5200 machinename.node.eu-west.consul.</span><br><span class="line">dataservice.service.consul. 0   IN      SRV     1 1 5300 machinename.node.eu-west.consul.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">machinename.node.eu-west.consul. 0 IN      CNAME   localhost.</span><br><span class="line">machinename.node.eu-west.consul. 0 IN      CNAME   localhost.</span><br></pre></td></tr></table></figure></p>
<p>如果您运行查询几次，您将看到答案以不同的顺序返回。</p>
<h4>使用DnsClient</h4>
<p>要通过C#代码查询DNS，我将使用我的<a href="http://dnsclient.michaco.net/" target="_blank" rel="noopener"><code>DnsClient</code></a>库。我将<code>ResolveService</code>扩展方法添加到库中，以使这些<code>SRV</code>查找非常简单。
安装<code>DnsClient</code> NuGet包后，我只需在DI中注册一<code>个DnsLookup</code>客户端：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">services.AddSingleton&lt;IDnsQuery&gt;(p =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    return new LookupClient(IPAddress.Parse(&quot;127.0.0.1&quot;), 8600);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private readonly IDnsQuery _dns;</span><br><span class="line">private readonly IOptions&lt;ServiceDisvoveryOptions&gt; _options;</span><br><span class="line"></span><br><span class="line">public SomeController(IDnsQuery dns, IOptions&lt;ServiceDisvoveryOptions&gt; options)</span><br><span class="line">&#123;</span><br><span class="line">    _dns = dns ?? throw new ArgumentNullException(nameof(dns));</span><br><span class="line">    _options = options ?? throw new ArgumentNullException(nameof(options));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[HttpGet(&quot;&quot;)]</span><br><span class="line">[HttpHead(&quot;&quot;)]</span><br><span class="line">public async Task&lt;IActionResult&gt; DoSomething()</span><br><span class="line">&#123;</span><br><span class="line">    var result = await _dns.ResolveServiceAsync(&quot;service.consul&quot;, _options.Value.ServiceName);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>DnsClient.NET</code>的<code>ResolveServiceAsync</code>执行DNS <code>SRV</code>查找，匹配<code>CNAME</code>记录并为包含主机名和端口（以及使用的地址）的每个条目返回一个对象。
现在，我们可以使用简单的<code>HttpClient</code>调用（或生成的客户端）来调用服务：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var address = result.First().AddressList.FirstOrDefault();</span><br><span class="line">var port = result.First().Port;</span><br><span class="line"></span><br><span class="line">using (var client = new HttpClient())</span><br><span class="line">&#123;</span><br><span class="line">    var serviceResult = await client.GetStringAsync($&quot;http://&#123;address&#125;:&#123;port&#125;/Values&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2>结论</h2>
<p>Consul是一个伟大，灵活和稳定的工具。我喜欢它的API和使用模式并不是固定的，你可以有很多选择来使用服务注册和其他功能。与此同时，它的性能表现也是非常优异。
在今天来说，因为有了众多的工具，在.NET中使用Consul也是非常简单方便。如果你的程序有不同部分需要通讯，那我确定它可以帮助你。</p>
<blockquote>
<p>我在GitHub上整理了一个包含<a href="https://github.com/MichaCo/AspNetCore.Services/tree/master/ConsulExample" target="_blank" rel="noopener">完整演示项目</a>，把你的想法在评论中告诉我</p>
</blockquote>
<p>原文地址:http://michaco.net/blog/ServiceDiscoveryAndHealthChecksInAspNetCoreWithConsul</p>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>dotnet</tag>
        <tag>consul</tag>
        <tag>microservice</tag>
      </tags>
  </entry>
  <entry>
    <title>(译) Serilog Tutorial</title>
    <url>/serilog-tutorial/</url>
    <content><![CDATA[<p>在过去的几年中，结构化日志已经大受欢迎。而Serilog是 .NET 中最著名的结构化日志类库 ,我们提供了这份的精简指南来帮助你快速了解并运用它。</p>
<h2>0. 内容</h2>
<ol>
<li>设定目标</li>
<li>认识Serilog</li>
<li>事件和级别</li>
<li>触发和收集结构化数据</li>
<li>为过滤和关联添加事件标记</li>
<li>大海捞针 [Finding needles in the haystack]</li>
<li>下一步是什么？</li>
<li>获得帮助</li>
</ol>
<h2>1. 设定目标</h2>
<p>你可能之前已经在项目中使用了Serilog，或者你有一个新的项目希望使用Serilog，又或者你只是对结构化日志记录感兴趣: 那就非常好！ 你来对地方了。</p>
<p>然而，更进一步来说，你的目标可能是：</p>
<ol>
<li>希望在用户之前发现代码中的BUG和错误</li>
<li>为了更快的找到生产环境中的问题</li>
<li>深入的了解系统运行表现</li>
</ol>
<p>Serilog使用json格式来记录应用程序中的事件，方便我们可以快速的查询日志，关键是可以方便地过滤和查询日志，而不用编写正则表达式。</p>
<p>在本教程中，我们将介绍最关键的几个部分，帮助我们可以在生成环境中提供令人惊叹的诊断能力。[注：原文这句挺拗口]</p>
<p>&lt;!-- more --&gt;</p>
<h2>2. 认识 Serilog</h2>
<p>那就让我们开始吧！为了更好的理解，你可以先创建一个新的.Net console 项目，可以是netcore或者传统的NETFramework版本。</p>
<p>Serilog 通过NuGet分发，项目包括一个Seirlog核心项目<em>Seirlog</em>和很多接收器<em>sinks</em>(超过100个)，这些接收是通过插件的方式来实现将日志写入到各种终端，文件,邮件,数据库或日志服务器</p>
<p>我们将通过使用<em>Serilog</em>和<em>Serilog.Sinks.Console</em>这两个组件开始，在稍后讨论其他选项：</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet add package Serilog</span><br><span class="line">dotnet add package Serilog.Sinks.Console</span><br></pre></td></tr></table></figure></p>
<p>这是世界上最简单的<em>Serilog</em>配置：</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Serilog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> log = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">            .WriteTo.Console()</span><br><span class="line">            .CreateLogger())</span><br><span class="line">        &#123;</span><br><span class="line">            log.Information(<span class="string">"Hello, Serilog!"</span>);</span><br><span class="line">            log.Warning(<span class="string">"Goodbye, Serilog."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>让我们稍微分解一下:</p>
<ul>
<li><code>LoggerConfiguration</code> 类提供一个流式接口用于构建一个日志记录管道</li>
<li><code>WriteTo.Console（)</code> 将控制台接收器添加到上述管道中</li>
<li><code>CreateLogger（）</code> 组装并返回一个实现<code>ILogger</code>接口的<code>Logger</code>对象</li>
<li>上述Logger对象同样实现了IDisposable，所以我们可以在<code>using</code>中调用它</li>
<li>最后<code>log.Information（）</code>和<code>log.Warning（）</code> 触发记录日志</li>
</ul>
<p>这个日志记录管道是一个可释放的[disposable],这可能会让你有点意外，但是请记住，记录器通常是要写入文件，数据库等等： 很多<em>sinks</em> 必须被完全地关闭掉。尽管这样，也仅仅在应用程序退出前，根logger才需要被释放。而在应用程序中使用logger是不需要关心这些细节的。</p>
<p>你运行了这个程序嘛？这是你看到的效果吧？
<img src="http://ww1.sinaimg.cn/large/697065c1gy1fottdd5d6nj20sf0dht8r.jpg" alt></p>
<p>Apart from just passing it around everywhere, there are two possibilities. [ 除了在各地传递外，还有两种可能性。] If you're using an IoC container, you might have components receive an ILogger through dependency injection. [ 如果您使用的是IoC容器，则可能会让组件通过依赖注入来接收ILogger。] Packages like AutofacSerilogIntegration can help with that. [ 像AutofacSerilogIntegration这样的软件包可以提供帮助。]</p>
<p>现在最直接的问题是：我们在应用程序的其他类里面如何获得这个<code>log</code>对象,除了到处传递之外，还有两个办法。</p>
<ol>
<li>如果你使用IoC容器，你可以组件注入一个ILogger对象来接收，像<code>AutofacSerilogIntegration</code>的包括帮助你实现这种方式。</li>
<li>或者，您可以将Logger对象存储在众所周知的位置; Serilog 已经内容内置了一个静态的Log对象，就像这样：</li>
</ol>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Log.Logger = <span class="keyword">new</span> LoggerConfiguration()  </span><br><span class="line">    .WriteTo.Console()</span><br><span class="line">    .CreateLogger();</span><br><span class="line"></span><br><span class="line">Log.Information(<span class="string">"Hello again, Serilog!"</span>);</span><br><span class="line"></span><br><span class="line">Log.CloseAndFlush();</span><br></pre></td></tr></table></figure></p>
<p><code>Log</code>类提供所有与<code>ILogger</code>接口相同的方法,这里我们显示调用<code>Log.CloseAndFlush（）</code>来关闭它，而不是使用<code>using</code>代码块</p>
<p>你可以使用依赖注入的方式，也可以是静态属性的方式 - 这取决你的个人喜好问题。为了简单起见，我们在本教程中使用了静态Log的方式。</p>
<blockquote>
<p>也许，你不是在编写一个控制台应用程序。我们将使用Console应用作为广为人知的示例，但是你一旦完成了本教程，您应该查看目标平台的文档（例如，<a href="https://nblumhardt.com/2017/08/use-serilog/" title="Leaner, meaner ASP.NET Core 2 logging" target="_blank" rel="noopener">ASP.NET Core</a>）。</p>
</blockquote>
<h2>3. Event and Level [时间和级别]</h2>
<p>和一些老的日志类库相比（如log4net），在使用Serilog时，你需要做的就是最大改变就是思考日志<em>事件</em>[log <em>events</em>]，而不是日志<em>消息</em>[log <em>message</em>]，一条事件[event]由以下几个内容组成:</p>
<ul>
<li>事件发生时的<strong>时间戳</strong>[<strong>timestamp</strong>]</li>
<li>描述何时应该捕获事件的<strong>级别</strong>[<strong>level</strong>]</li>
<li>记录事件的消息[<strong>message</strong>]内容]</li>
<li>描述事件的命名<strong>属性</strong>[<strong>properties</strong>]</li>
<li>还可能有一个<strong>Exception</strong>对象</li>
</ul>
<p>您可以将日志事件格式化为控制台的可读文本，正如我们在第一个示例中看到的那样：</p>
<pre><code>11:33:01 [INF] Hello, Serilog!  
</code></pre>
<p>或者，您可以将相同的事件格式化为JSON并将其发送到远程日志服务器：</p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"@t"</span>:<span class="string">"2017-11-20T11:33:01.22138"</span>,<span class="attr">"@m"</span>:<span class="string">"Hello, Serilog!"</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>在背后，应用程序中的日志语句会创建<code>LogEvent</code>对象，而连接到管道的接收器[<em>sinks</em>]会知道如何记录它们。</p>
<h3>Logging levels</h3>
<p>Serilog速度很快，但始终构建和记录详细的日志事件会浪费CPU，磁盘和网络资源。为了管理这个，Serilog事件被赋予了多种级别：<code>Debug</code>, <code>Information</code>, <code>Warning</code> 和 <code>Error</code>等。对应的有一个<code>Log.*()</code>方法来对应各个级别。</p>
<p>在开发过程中，可能会打开调试级别的事件：</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"> Log.Logger = <span class="keyword">new</span> LoggerConfiguration()  </span><br><span class="line">    .MinimumLevel.Debug() <span class="comment">// &lt;- Set the minimum level</span></span><br><span class="line">    .WriteTo.Console()</span><br><span class="line">    .CreateLogger();</span><br><span class="line"></span><br><span class="line"><span class="comment">// In a tight loop...</span></span><br><span class="line">Log.Debug(<span class="string">"Processing item &#123;ItemNumber&#125; of &#123;ItemCount&#125;"</span>, itemNumber, itemCount);</span><br></pre></td></tr></table></figure></p>
<p>在生成环境中，通常关闭调试的日志，并将最小的日志级别设置成<code>Information</code>,以便只记录重要的事件，在<a href="https://github.com/serilog/serilog/wiki/Writing-Log-Events#log-event-levels" target="_blank" rel="noopener">这篇文档</a>中可以获得有关Serilog Logger Lever的更多信息</p>
<p>Tip: Serilog has special handling for Exception objects; methods like Log.Error() take the exception as the first parameter, e.g. [ 提示：Serilog对Exception对象有特殊的处理;]  Log.Error(ex, &quot;Task {TaskName} was canceled&quot;, task). [ Log.Error（例如，“任务{任务名称}被取消”，任务）。] Don't include exceptions in the log message itself. [ 不要在日志消息本身中包含异常。]
<strong>提示</strong>:Serilog对Exception对象有特殊的处理; 像方法<code>Log.Error()</code> 将 <em>exception</em> 作为第一个参数，例如<code>Log.Error(ex, &quot;Task {TaskName} was canceled&quot;, task)</code>，不要将异常的包括在message消息中</p>
<h2>4. 触发和收集结构化数据</h2>
<p>让我们回到最后一个代码片段：</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> itemNumber = <span class="number">10</span>;  </span><br><span class="line"><span class="keyword">var</span> itemCount = <span class="number">999</span>;  </span><br><span class="line">Log.Debug(<span class="string">"Processing item &#123;ItemNumber&#125; of &#123;ItemCount&#125;"</span>, itemNumber, itemCount);</span><br></pre></td></tr></table></figure></p>
<p>您是否注意到日志消息中的<code>{ItemNumber}</code>这样的占位符？ 这不是一个C#的内插字符串[<em>Interpolated string</em> C# 6.0的新特性],<code>Log.*()</code>方法接收一个<a href="https://messagetemplates.org" target="_blank" rel="noopener">消息模板</a>,另外一种.NET格式化字符串，除了支持传统的<code>{0}</code>的方式，还支持<code>{Name}</code>的方式。</p>
<p>这看起来有点奇怪，除非您意识到通过这样做，Serilog可以将这些消息的一部分作为类的属性与人性化的文本一起捕获：</p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@t"</span>: <span class="string">"2017-11-20T11:33:01.22138"</span>,</span><br><span class="line">    <span class="attr">"@l"</span>: <span class="string">"Debug"</span>,</span><br><span class="line">    <span class="attr">"@m"</span>: <span class="string">"Processing item 10 of 999"</span>,</span><br><span class="line">    <span class="attr">"ItemNumber"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"ItemCount"</span>: <span class="number">999</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们为什么要这样做？因为通过这种有趣的字段插入方式，并作为属性记录到事件日志中，我们可以立即使用优雅的简单的过滤器来查找事件，就像<code>ItemNumber &gt; 900</code>,而无需通过正则表达式从消息中提取了。</p>
<p>进一步，我们可以使用 <code>@</code> 结构捕获运算符 来获取不仅仅是平坦的属性值，而是完整的对象：</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> &#123; Name = <span class="string">"Nick"</span>, Id = <span class="string">"nblumhardt"</span> &#125;;  </span><br><span class="line">Log.Information(<span class="string">"Logged on user &#123;@User&#125;"</span>, user);</span><br></pre></td></tr></table></figure></p>
<p>在这里，<code>user</code>对象被捕获，并生成的JSON中，以便我们可以使用查询来查找事件,如:<code>User.Id = 'nblumhardt'</code></p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@t"</span>: <span class="string">"2017-11-20T11:33:01.22138"</span>,</span><br><span class="line">    <span class="attr">"@m"</span>: <span class="string">"Logged on user &#123;\"Name\": \"Nick\", \"Id\": \"nblumhardt\"&#125;"</span>,</span><br><span class="line">    <span class="attr">"User"</span>: &#123;<span class="attr">"Name"</span>: <span class="string">"Nick"</span>, <span class="attr">"Id"</span>: <span class="string">"nblumhardt"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生产环境的监控和调试已经非常困难和耗时，而且经常是压力山大的任务：而通过将相关的数据放在手边，Serilog除去了运维操作相关活动的最大难题之一。</p>
<p><strong>Tip</strong>: 从Visual Studio Marketplace安装令人惊叹的<a href="https://marketplace.visualstudio.com/items?itemName=Suchiman.SerilogAnalyzer" target="_blank" rel="noopener">Serilog Analyzer</a>，可以帮助你检查你的消息模板类型（ 注：这个插件还能帮你通过配置代码生成appsetting.json的内容，但是只支持生成一级配置:( ）</p>
<p>这实际上有多大的差异取决于你如何收集Serilog的事件。一般来说，日志事件进入文本文件并用<code>grep</code>进行搜索。Serilog也可以记录文本文件，但不能在记事本中执行<code>ItemNumber&gt; 900</code>，因此您需要评估更强大的工具来执行此操作。</p>
<h3>写 JSON 格式的日志文件</h3>
<p>如果您的需求很简单，您可以将JSON写入日志文件，并使用支持JSON的工具直接查询文件。] [ Serilog的文件接收器[<em>sink</em>]和紧凑的JSON格式化类库[compact JSON formatter]使第一部分变得简单。 让我们重新建一个控制台应用程序，并安装下列软件包：</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet add package Serilog</span><br><span class="line">dotnet add package Serilog.Sinks.File  </span><br><span class="line">dotnet add package Serilog.Formatting.Compact</span><br></pre></td></tr></table></figure></p>
<p>在<code>Main</code>函数中插入:</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Log.Logger = <span class="keyword">new</span> LoggerConfiguration()  </span><br><span class="line">    .MinimumLevel.Debug()</span><br><span class="line">    .WriteTo.File(<span class="keyword">new</span> CompactJsonFormatter(), <span class="string">"log.clef"</span>)</span><br><span class="line">    .CreateLogger();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> itemCount = <span class="number">99</span>;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> itemNumber = <span class="number">0</span>; itemNumber &lt; itemCount; ++itemNumber)  </span><br><span class="line">    Log.Debug(<span class="string">"Processing item &#123;ItemNumber&#125; of &#123;ItemCount&#125;"</span>, itemNumber, itemCount);</span><br><span class="line"></span><br><span class="line">Log.CloseAndFlush();</span><br></pre></td></tr></table></figure></p>
<p>运行这个程序将产生使用Serilog的紧凑格式[compact]，在文件log.clef中生成以<a href="https://en.wikipedia.org/wiki/JSON_streaming" title="newline-delimited JSON stream" target="_blank" rel="noopener">换行符分隔的<code>JSON</code>流</a>,如果没有使用<code>CompactJsonFormatter</code>，则会创建一个简单饿扁平日志文件。</p>
<p>如果你在文本编辑器中打开文件，你会看到JSON事件，就像我们上面使用的例子。</p>
<p><a href="https://github.com/datalust/clef-tool" target="_blank" rel="noopener">CLEF-tool</a> 是查询CLEF格式的日志文件的方便的命令行应用程序：(注:貌似只支持windows)</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1fotvarg5n7j20xe0dzdgb.jpg" alt></p>
<p>注意第二行的过滤器<code>ItemNumber&gt; 95</code>：毫不费力地在大型日志流中定位事件,就是结构化日志记录的好处吧。</p>
<h3>将日志写入日志服务器</h3>
<p>将日志事件从多个应用程序发送到中央服务器或日志聚合服务非常方便,而不是试图在生产环境中多个日志进行浑水摸鱼[shuffle log files]</p>
<p>日志服务器通常通过HTTP/S或UDP在网络上接收事件，并为开发人员和操作员工程师提供用户界面，以便在出现问题时搜索和分析日志流。</p>
<p><a href="https://github.com/serilog/serilog/wiki/Provided-Sinks" target="_blank" rel="noopener">Serilog接收器</a>[sinks]支持大量的日志服务器，其中许多具有结构化数据支持。</p>
<p>注：这段是广告就不翻译了，读者可以根据实际需求选择自己的日志服务器。</p>
<h2>5.  为过滤和关联标记事件</h2>
<p>我们刚刚看到消息模板如何实现我们传统上认为可以有效搜索和分析的日志“消息”。</p>
<p>结构化日志记录的另一方面是通过某种因果关系或空间关联来识别相关事件集合。事件触发:[Events raised: ]</p>
<ul>
<li>在处理单个HTTP请求期间</li>
<li>从特定的机器，应用程序，服务或组件</li>
<li>关于单个客户，订单或交易</li>
<li>起因于事件的因果链</li>
</ul>
<p>Serilog通过<em>enrichment</em>来处理所有这些情况（以及其他情况）。<em>Enrichment</em>只是为事件添加附加属性，而不是源自消息模板的属性</p>
<h3>添加[Enriching]特定的属性</h3>
<p>最简单的enrichment方法将固定属性值添加到源自日志记录管道的所有事件，可以通过<code>Enrich.WithProperty()</code>方法快速实现</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Log.Logger = new LoggerConfiguration()  </span><br><span class="line">    .Enrich.WithProperty(&quot;Application&quot;, &quot;Demo&quot;)</span><br><span class="line">    .WriteTo.Seq(&quot;http://localhost:5341&quot;) //Seq 日志服务器</span><br><span class="line">    .CreateLogger();</span><br></pre></td></tr></table></figure></p>
<p>在<code>LogEvents</code>上，通过<em>enrichment</em>添加的属性看起来与源自消息模板的属性相同</p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="attr">"@t"</span>: <span class="string">"2017-11-20T11:33:01.22138"</span>,</span><br><span class="line">    <span class="attr">"@l"</span>: <span class="string">"Debug"</span>,</span><br><span class="line">    <span class="attr">"@m"</span>: <span class="string">"Processing item 10 of 999"</span>,</span><br><span class="line">    <span class="attr">"ItemNumber"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"ItemCount"</span>: <span class="number">999</span>,</span><br><span class="line">    <span class="attr">"Application"</span>: <span class="string">"Demo"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>丰富特殊的属性</h3>
<p>通过创建和使用上下文记录器，可以将属性添加到一个或几个相关事件中，而不是增加具有相同值的所有事件</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> orderLog = Log.ForContext(<span class="string">"OrderId"</span>, order.Id);  </span><br><span class="line">orderLog.Information(<span class="string">"Looking up product codes"</span>);  </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">orderLog.Information(<span class="string">"Product lookup took &#123;Elapsed&#125; ms"</span>, elapsed.TotalMilliseconds);</span><br></pre></td></tr></table></figure></p>
<p>在这里，通过<code>orderLog</code>发出的两个事件都会附加一个<code>OrderId</code>属性。
<code>Enrichmen</code>是附加的:如果应用程序属性设置在管道级别，则上面的第二个事件将携带<code>Elapsed</code>（来自消息），<code>OrderId</code>（来自上下文记录器）和<code>Application</code>（来自记录管道）。</p>
<h3>丰富消息源类型信息</h3>
<p>记录器特定的<em>enrichment</em>一个特例是关于如何使用创建它们的类标记事件</p>
<p>在名为<code>HomeController</code>的类中，使用以下命令创建类型特定的记录器：</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> ILogger _log = Log.ForContext&lt;HomeController&gt;();</span><br></pre></td></tr></table></figure></p>
<p>通过<code>_log</code>发出的事件将携带一个值为<code>MyApp.Controllers.HomeController</code>的<code>SourceContext</code>属性。</p>
<h3>充分利用上下文</h3>
<p>为了丰富工作单元中所有事件[为所有事件添加特定属性],<code>Serilog</code>提供了<code>LogContext</code>,首先需要使用<code>Enrich.FromLogContext()</code>在<code>LoggerConfiguration</code>级别启用：</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Log.Logger = <span class="keyword">new</span> LoggerConfiguraition()  </span><br><span class="line">     .Enrich.FromLogContext()</span><br><span class="line">     <span class="comment">// ...</span></span><br></pre></td></tr></table></figure></p>
<p>LogContext可以被认为是一堆<code>(key,value)</code>键值对;</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (LogContext.PushProperty(<span class="string">"MessageId"</span>, message.Id))  </span><br><span class="line">&#123;</span><br><span class="line">    Log.Debug(<span class="string">"Dispatching message of type &#123;MessageType&#125;"</span>, message.GetType());</span><br><span class="line">    <span class="keyword">await</span> handler.HandleAsync(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于LogContext有趣的是没有什么需要对象需要传递。在示例代码中，<code>HandleAsync()</code>以及由它调用的任何其他方法的实现可以直接使用<code>Log</code>和<code>ILogger</code> - MessageId属性将自动T并添加<code>LogEvent</code>中。</p>
<p><strong>Tip</strong>: <code>LogContext</code>是一个堆栈;推送到堆栈上的属性必须通过释放从PushProperty()返回的对象， -- 上述通过手动使用<code>using</code>块的方式</p>
<h3>已经存在的Enricher</h3>
<p>所有<em>enrichment</em> API都是使用<code>Enricher</code>的实现Serilog的<code>ILogEventEnricher</code>接口的对象来实现的。</p>
<p>NuGet中为线程细节，机器信息和用户详细信息等内容提供了一些有趣的预先构建的Enricher实现。</p>
<p><a href="https://github.com/serilog/serilog-enrichers-thread" target="_blank" rel="noopener">Serilog.Enrichers.Thread</a> 通过 Enrich.WithThreadId() 来添加线程ID相关的扩展:</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Log.Logger = new LoggerConfiguration()  </span><br><span class="line">    .Enrich.WithThreadId()</span><br><span class="line">    // ...</span><br></pre></td></tr></table></figure></p>
<p>这将为事件附加一个<code>ThreadId</code>属性，以便交错事件可以再次分开。</p>
<p>我们将在下一节中看到一个简单的例子，说明如何编写和插入自己的应用程序专用的<code>Enricher</code>程序。</p>
<h2>6. 大海捞针 Finding needles in the haystack</h2>
<p>如果我们已经知道如何使用Serilog调用消息模板和enrichment结构化日志的两个支柱，那么第三个支柱就是隐式事件类型的概念。</p>
<p>结构化日志适合有效处理大量日志数据。关于大型日志流的一个有趣的观察是，真实产生的事件比编写日志语句代码块时要多的多（注:这算什么发现）</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Log.Debug(<span class="string">"Processing item &#123;ItemNumber&#125; of &#123;ItemCount&#125;"</span>, itemNumber, itemCount);</span><br></pre></td></tr></table></figure></p>
<p>这意味着,尽管生成了许多独特的消息字符串,如<code>&quot;Processing item 31 of 4159&quot;</code>,但由此日志记录语句生成的每个事件共享相同的消息模板，即<code>&quot;Processing item {ItemNumber} of {ItemCount}&quot;</code></p>
<p>Serilog及其许多sinks 利用这一事实从根本上改进了查询和过滤日志事件的体验。如果消息模板与事件一起保存，则下面的过滤器可以立即从嘈杂的日志记录语句中排除成千上万的事件，从而更容易看到否则会被淹没的有趣事件：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@MessageTemplate &lt;&gt; &apos;Processing item &#123;ItemNumber&#125; of &#123;ItemCount&#125;&apos;</span><br></pre></td></tr></table></figure></p>
<p>反转也适用 - 放大事件类型可以从单个日志记录语句中查找所有事件</p>
<p>如何利用此功能取决于您存储和搜索日志的位置。接下来我们会看看细节。</p>
<p><strong>Tip</strong>:字符串链接，C#内插字符串，以及其他技术手段来预格式化传递给Serilog的消息内容，会取消此功能。详细请看 <a href="https://nblumhardt.com/2014/09/how-not-to-parameterize-serilog-events/" target="_blank" rel="noopener"> How (not) to parameterize Serilog events </a></p>
<h3>隐式事件类型</h3>
<p>存储，然后过滤罗嗦的消息模板并不总是理想的。 相反，通常从消息模板创建一个数字哈希值，并将其与事件一起存储：
<img src="http://ww1.sinaimg.cn/large/697065c1gy1fotxujxoo9j21690h0q3j.jpg" alt></p>
<h3>事件类型 enrichment</h3>
<p>日志文件和本地不支持消息模板的日志服务器仍然可以通过在Serilog管道中明确地<code>enricher</code>事件来接收事件类型。</p>
<p>为此，自定义<code>enricher</code>程序将<code>EventType</code>属性附加到每个事件</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Install-Package Murmurhash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">EventTypeEnricher</span> : <span class="title">ILogEventEnricher</span>  </span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Enrich</span>(<span class="params">LogEvent logEvent, ILogEventPropertyFactory propertyFactory</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">      <span class="keyword">var</span> murmur = MurmurHash.Create32();</span><br><span class="line">      <span class="keyword">var</span> bytes = Encoding.UTF8.GetBytes(logEvent.MessageTemplate.Text);</span><br><span class="line">      <span class="keyword">var</span> hash = murmur.ComputeHash(bytes);</span><br><span class="line">      <span class="keyword">var</span> numericHash = BitConverter.ToUInt32(hash, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">var</span> eventType = propertyFactory.CreateProperty(<span class="string">"EventType"</span>, numericHash);</span><br><span class="line">      logEvent.AddPropertyIfAbsent(eventType);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当插入管道时，这会使<code>{EventType}</code>属性可用于<code>sinks</code></p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Log.Logger = <span class="keyword">new</span> LoggerConfiguration()  </span><br><span class="line">   .Enrich.With&lt;EventTypeEnricher&gt;()</span><br><span class="line">   .WriteTo.Console(outputTemplate:</span><br><span class="line">       <span class="string">"&#123;Timestamp:HH:mm:ss&#125; [&#123;EventType:x8&#125; &#123;Level:u3&#125;] &#123;Message:lj&#125;&#123;NewLine&#125;&#123;Exception&#125;"</span>)</span><br><span class="line">   .CreateLogger();</span><br></pre></td></tr></table></figure></p>
<p><code>WriteTo.Console()</code>的参数是一个Serilog输出模板，描述了如何将日志事件的属性格式化为文本。 大多数基于文本的sinks（包括<code>Serilog.Sinks.File</code>）都可以接受输出模板来指导格式化。</p>
<p>[ 输出如下所示：]</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1foty29nelmj21eo0b3dg5.jpg" alt></p>
<h2>7. 下一步做什么</h2>
<p>Serilog是一个强大的库，拥有广泛的插件和工具生态系统。我们只涉及绝对的基础知识 - 取决于您希望如何使用Serilog以及您使用的框架和平台，还有很多可以发现的地方。</p>
<p>这里有一些文章和扩展，供你参考：</p>
<ul>
<li><strong>Debugging and diagnostics</strong> - if you're having trouble getting Serilog or a sink to work, check out this page on <a href="https://github.com/serilog/serilog/wiki/Debugging-and-Diagnostics" target="_blank" rel="noopener">the Serilog wiki</a></li>
<li><strong><code>appsettings.json</code> configuration</strong> - in this article we've only shown the C# configuration API; <a href="https://github.com/serilog/serilog-settings-configuration" target="_blank" rel="noopener">Serilog.Settings.Configuration</a> adds support for logger configuration in .NET Core JSON settings</li>
<li><strong>XML <code>&lt;appSettings&gt;</code> configuration</strong> - <a href="https://github.com/serilog/serilog-settings-appsettings" target="_blank" rel="noopener">Serilog.Settings.AppSettings</a> adds support for reading logger configuration from .NET Framework configuration files</li>
<li><strong>ASP.NET Core integration</strong> - the <a href="https://github.com/serilog/serilog-aspnetcore" target="_blank" rel="noopener">Serilog.AspNetCore</a> package seamlessly integrates Serilog into ASP.NET Core 2.0 apps to take advantage of the structured log events emitted by the framework</li>
<li><strong>ASP.NET integration</strong> - check out <a href="https://github.com/serilog-web/classic" target="_blank" rel="noopener">SerilogWeb.Classic</a> for a quick-and-painless way to record unhandled exceptions and request timings from ASP.NET projects</li>
<li><strong>Smart logging middleware for ASP.NET Core</strong> - improve the quality of request logging in ASP.NET Core with the <a href="https://blog.getseq.net/smart-logging-middleware-for-asp-net-core/" target="_blank" rel="noopener">middleware from this article</a></li>
<li><strong>Timed operations</strong> - <a href="https://github.com/nblumhardt/serilog-timings" target="_blank" rel="noopener">SerilogTimings</a> is a small wrapper for Serilog that makes it easy to log operation timings</li>
<li><strong>Autofac-Serilog integration</strong> - use <a href="https://github.com/nblumhardt/autofac-serilog-integration" target="_blank" rel="noopener">AutofacSerilogIntegration</a> to inject Serilog ILoggers through Autofac with type information automatically added</li>
<li><strong>Code analysis for Serilog</strong> - mentioned earlier, <a href="https://github.com/suchiman/SerilogAnalyzer" target="_blank" rel="noopener">Serilog Analyzer</a> checks message template syntax in Visual Studio as-you-type, and detects many potential Serilog usage issues</li>
<li><strong>Dynamic filtering</strong> - <a href="https://github.com/serilog/serilog-filters-expressions" target="_blank" rel="noopener">Serilog.Filters.Expressions</a> makes it possible to filter events using a simple domain-specific language</li>
<li><strong>Async wrapper</strong> - the latency of logging to files or the console can be reduced further using the <a href="https://github.com/serilog/serilog-sinks-async" target="_blank" rel="noopener">Serilog.Sinks.Async</a> package</li>
<li><strong>Sink READMEs</strong> - most sinks, including <a href="https://github.com/serilog/serilog-sinks-file" target="_blank" rel="noopener">Serilog.Sinks.File</a>, <a href="https://github.com/serilog/serilog-sinks-console" target="_blank" rel="noopener">Serilog.Sinks.Console</a>, <a href="https://github.com/serilog/serilog-sinks-seq" target="_blank" rel="noopener">Serilog.Sinks.Seq</a> and others, have good README documents in their GitHub repositories with detailed instructions for using the sink</li>
<li><strong>Structured Logging Concepts in .NET series</strong> - this <a href="https://nblumhardt.com/2016/06/structured-logging-concepts-in-net-series-1/" target="_blank" rel="noopener">blog series on structured logging</a> has more detail on much of what we've covered in this tutorial</li>
<li><strong>F# support</strong> - if your application is written in F#, <a href="https://github.com/destructurama/fsharp" target="_blank" rel="noopener">Destructurama.FSharp</a> will let you log F# types seamlessly through Serilog</li>
<li><strong>JSON.NET support</strong> - <a href="https://github.com/destructurama/json-net" target="_blank" rel="noopener">Destructurama.JsonNet</a> extends Serilog to allow JSON.NET dynamic objects to be logged as structured data</li>
<li><strong>Exception enricher</strong> - <a href="https://github.com/RehanSaeed/Serilog.Exceptions" target="_blank" rel="noopener">Serilog.Exceptions</a> collects additional exception-type-specific information and attaches it to log events</li>
<li><strong>Async stack trace unmangling</strong> - <a href="https://github.com/nblumhardt/serilog-enrichers-demystify" target="_blank" rel="noopener">Serilog.Enrichers.Demystify</a> plugs in Ben Adams' Demystifier to improve the readability of exception stack traces</li>
</ul>
<h2>8. 获得帮助</h2>
<p>Serilog有三大优秀的社区支持渠道：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/tagged/serilog" target="_blank" rel="noopener">Stack Overflow</a> - 如果您有Seri​​log使用问题，Stack Overflow上的Serilog标签是一个很好的开始; 它被积极监控，并且您将通过留下一个容易找到的答案来帮助其他人解决同一个问题</li>
<li><a href="https://gitter.im/serilog/serilog" target="_blank" rel="noopener">Gitter Chat</a> - 如果您的问题不符合Stack Overflow格式，或者您只是想完善检查方法，那么Gitter聊天室是与Serilog社区中的其他人联系的快捷方式</li>
<li><a href="https://github.com/serilog/serilog/issues" target="_blank" rel="noopener">GitHub Issues</a> - 最后，如果你发现了一个bug或者想要对Serilog进行改进，GitHub就是这个地方;  <a href="https://github.com/serilog" target="_blank" rel="noopener">Serilog organization</a> 包括了serilog所有的核心库和问题跟踪。</li>
</ul>
<p>Happy logging!</p>
<p>原文地址<a href="http://blog.getseq.net/serilog-tutorial/" target="_blank" rel="noopener">http://blog.getseq.net/serilog-tutorial/</a></p>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>dotnet</tag>
        <tag>serilog</tag>
      </tags>
  </entry>
  <entry>
    <title>使用DotNetty编写跨平台网络通信程序</title>
    <url>/dotnetty-quickstart/</url>
    <content><![CDATA[<p>长久以来,.Net开发人员都非常羡慕Java有Netty这样，高效，稳定又易用的网络通信基础框架。终于微软的Azure团队，使用C#实现的Netty的版本发布。不但使用了C#和.Net平台的技术特点，并且保留了Netty原来绝大部分的编程接口。让我们在使用时，完全可以依照Netty官方的教程来学习和使用DotNetty应用程序。
DotNetty同时也是开源的，它的源代码托管在Github上:<a href="https://github.com/azure/dotnetty" target="_blank" rel="noopener">https://github.com/azure/dotnetty</a></p>
<p>&lt;!-- more --&gt;</p>
<h2>0x01 项目预览</h2>
<p>从github上下载最新的代码到本地，使用VS2017或者VSCode打开下载好的代码，可以看到如图所示的代码那结构，其中源码部分有9个项目组成，其中</p>
<blockquote>
<p>DotNetty.Common 是公共的类库项目，包装线程池，并行任务和常用帮助类的封装
DotNetty.Transport 是DotNetty核心的实现
DotNetty.Buffers 是对内存缓冲区管理的封装
DotNetty.Codes 是对编解码是封装，包括一些基础基类的实现，我们在项目中自定义的协议，都要继承该项目的特定基类和实现<br>
DotNetty.Handlers 封装了常用的管道处理器，比如Tls编解码，超时机制，心跳检查，日志等，如果项目中没有用到可以不引用，不过一般都会用到<br>
其他还有对Redis的编解码，Mqtt的编解码，Protobuf2/3的编解码项目中可根据实际情况引用
很遗憾Http协议和Websocket协议还没有实现。</p>
</blockquote>
<h2>0x02 快速开始-示例-回声程序的实现</h2>
<p>从上一步下载的代码中，看到有一个sample目录，有很多例子，都大同小异， 先来看这个最简单的Echo服务的实现吧.<br>
Echo服务，分为服务端和客户端，服务端使用DotNetty框架启动一个Socket服务，并等待客户端链接，当客户端链接并接收客户端消息，并将接收到的消息原样返回给客户端。而客户端同样使用DotNetty框架启动一个Socket客户端服务，并链接到服务端，并发送一条Hello的字符串信息，并等待服务端返回。如此往复。</p>
<h3>2.1 Echo Server</h3>
<p>来一起看一下代码吧，我把注释都写到代码中：</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">RunServerAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置输出日志到Console</span></span><br><span class="line">    ExampleHelper.SetConsoleLogger();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 主工作线程组，设置为1个线程</span></span><br><span class="line"> 	<span class="keyword">var</span> bossGroup = <span class="keyword">new</span> MultithreadEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">	<span class="comment">// 工作线程组，默认为内核数*2的线程数</span></span><br><span class="line">    <span class="keyword">var</span> workerGroup = <span class="keyword">new</span> MultithreadEventLoopGroup();</span><br><span class="line">    X509Certificate2 tlsCertificate = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (ServerSettings.IsSsl) <span class="comment">//如果使用加密通道</span></span><br><span class="line">            &#123;</span><br><span class="line">                tlsCertificate = <span class="keyword">new</span> X509Certificate2(Path.Combine(ExampleHelper.ProcessDirectory, <span class="string">"dotnetty.com.pfx"</span>), <span class="string">"password"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//声明一个服务端Bootstrap，每个Netty服务端程序，都由ServerBootstrap控制，</span></span><br><span class="line">				<span class="comment">//通过链式的方式组装需要的参数</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">                bootstrap</span><br><span class="line">                    .Group(bossGroup, workerGroup) <span class="comment">// 设置主和工作线程组</span></span><br><span class="line">                    .Channel&lt;TcpServerSocketChannel&gt;() <span class="comment">// 设置通道模式为TcpSocket</span></span><br><span class="line">                    .Option(ChannelOption.SoBacklog, <span class="number">100</span>) <span class="comment">// 设置网络IO参数等，这里可以设置很多参数，当然你对网络调优和参数设置非常了解的话，你可以设置，或者就用默认参数吧</span></span><br><span class="line">                    .Handler(<span class="keyword">new</span> LoggingHandler(<span class="string">"SRV-LSTN"</span>)) <span class="comment">//在主线程组上设置一个打印日志的处理器</span></span><br><span class="line">                    .ChildHandler(<span class="keyword">new</span> ActionChannelInitializer&lt;ISocketChannel&gt;(channel =&gt;</span><br><span class="line">                    &#123; <span class="comment">//工作线程连接器 是设置了一个管道，服务端主线程所有接收到的信息都会通过这个管道一层层往下传输</span></span><br><span class="line"><span class="comment">//同时所有出栈的消息 也要这个管道的所有处理器进行一步步处理</span></span><br><span class="line">                        IChannelPipeline pipeline = channel.Pipeline;</span><br><span class="line">                        <span class="keyword">if</span> (tlsCertificate != <span class="literal">null</span>) <span class="comment">//Tls的加解密</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            pipeline.AddLast(<span class="string">"tls"</span>, TlsHandler.Server(tlsCertificate));</span><br><span class="line">                        &#125;</span><br><span class="line">						<span class="comment">//日志拦截器</span></span><br><span class="line">                        pipeline.AddLast(<span class="keyword">new</span> LoggingHandler(<span class="string">"SRV-CONN"</span>));</span><br><span class="line"><span class="comment">//出栈消息，通过这个handler 在消息顶部加上消息的长度</span></span><br><span class="line">                        pipeline.AddLast(<span class="string">"framing-enc"</span>, <span class="keyword">new</span> LengthFieldPrepender(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//入栈消息通过该Handler,解析消息的包长信息，并将正确的消息体发送给下一个处理Handler，该类比较常用，后面单独说明</span></span><br><span class="line">                        pipeline.AddLast(<span class="string">"framing-dec"</span>, <span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="keyword">ushort</span>.MaxValue, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//业务handler ，这里是实际处理Echo业务的Handler</span></span><br><span class="line">                        pipeline.AddLast(<span class="string">"echo"</span>, <span class="keyword">new</span> EchoServerHandler());</span><br><span class="line">                    &#125;));</span><br><span class="line">			</span><br><span class="line">		<span class="comment">// bootstrap绑定到指定端口的行为 就是服务端启动服务，同样的Serverbootstrap可以bind到多个端口</span></span><br><span class="line">                IChannel boundChannel = <span class="keyword">await</span> bootstrap.BindAsync(ServerSettings.Port);</span><br><span class="line"></span><br><span class="line">                Console.ReadLine();</span><br><span class="line"><span class="comment">//关闭服务</span></span><br><span class="line">                <span class="keyword">await</span> boundChannel.CloseAsync();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="comment">//释放工作组线程</span></span><br><span class="line">                <span class="keyword">await</span> Task.WhenAll(</span><br><span class="line">                    bossGroup.ShutdownGracefullyAsync(TimeSpan.FromMilliseconds(<span class="number">100</span>), TimeSpan.FromSeconds(<span class="number">1</span>)),</span><br><span class="line">                    workerGroup.ShutdownGracefullyAsync(TimeSpan.FromMilliseconds(<span class="number">100</span>), TimeSpan.FromSeconds(<span class="number">1</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>来看下实际的业务代码，比较简单，也就是打印日志，并返回收到的字符串</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> public class EchoServerHandler : ChannelHandlerAdapter //管道处理基类，较常用</span><br><span class="line">    &#123;</span><br><span class="line">//	重写基类的方法，当消息到达时触发，这里收到消息后，在控制台输出收到的内容，并原样返回了客户端</span><br><span class="line">        public override void ChannelRead(IChannelHandlerContext context, object message)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            var buffer = message as IByteBuffer;</span><br><span class="line">            if (buffer != null)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Received from client: &quot; + buffer.ToString(Encoding.UTF8));</span><br><span class="line">            &#125;</span><br><span class="line">            context.WriteAsync(message);//写入输出流</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">// 输出到客户端，也可以在上面的方法中直接调用WriteAndFlushAsync方法直接输出</span><br><span class="line">        public override void ChannelReadComplete(IChannelHandlerContext context) =&gt; context.Flush();</span><br><span class="line"></span><br><span class="line">//捕获 异常，并输出到控制台后断开链接，提示：客户端意外断开链接，也会触发</span><br><span class="line">        public override void ExceptionCaught(IChannelHandlerContext context, Exception exception)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Exception: &quot; + exception);</span><br><span class="line">            context.CloseAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3>2.2 Echo Client</h3>
<p>客户端的代码和服务端的代码相差很少，体现了Netty统一的编程模型。有几个不同点：</p>
<ol>
<li>客户端的Bootstrap不是ServerBootstrap了，</li>
<li>客户端不需要主线程组，只有工作线程组，消息处理管道也建立在里主线程工作组的拦截通道上。</li>
<li>最后不是bind而是connect</li>
</ol>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static async Task RunClientAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            ExampleHelper.SetConsoleLogger();</span><br><span class="line"></span><br><span class="line">            var group = new MultithreadEventLoopGroup();</span><br><span class="line"></span><br><span class="line">            X509Certificate2 cert = null;</span><br><span class="line">            string targetHost = null;</span><br><span class="line">            if (ClientSettings.IsSsl)</span><br><span class="line">            &#123;</span><br><span class="line">                cert = new X509Certificate2(Path.Combine(ExampleHelper.ProcessDirectory, &quot;dotnetty.com.pfx&quot;), &quot;password&quot;);</span><br><span class="line">                targetHost = cert.GetNameInfo(X509NameType.DnsName, false);</span><br><span class="line">            &#125;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                var bootstrap = new Bootstrap();</span><br><span class="line">                bootstrap</span><br><span class="line">                    .Group(group)</span><br><span class="line">                    .Channel&lt;TcpSocketChannel&gt;()</span><br><span class="line">                    .Option(ChannelOption.TcpNodelay, true)</span><br><span class="line">                    .Handler(new ActionChannelInitializer&lt;ISocketChannel&gt;(channel =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        IChannelPipeline pipeline = channel.Pipeline;</span><br><span class="line"></span><br><span class="line">                        if (cert != null)</span><br><span class="line">                        &#123;</span><br><span class="line">                            pipeline.AddLast(&quot;tls&quot;, new TlsHandler(stream =&gt; new SslStream(stream, true, (sender, certificate, chain, errors) =&gt; true), new ClientTlsSettings(targetHost)));</span><br><span class="line">                        &#125;</span><br><span class="line">                        pipeline.AddLast(new LoggingHandler());</span><br><span class="line">                        pipeline.AddLast(&quot;framing-enc&quot;, new LengthFieldPrepender(2));</span><br><span class="line">                        pipeline.AddLast(&quot;framing-dec&quot;, new LengthFieldBasedFrameDecoder(ushort.MaxValue, 0, 2, 0, 2));</span><br><span class="line"></span><br><span class="line">                        pipeline.AddLast(&quot;echo&quot;, new EchoClientHandler());</span><br><span class="line">                    &#125;));</span><br><span class="line"></span><br><span class="line">                IChannel clientChannel = await bootstrap.ConnectAsync(new IPEndPoint(ClientSettings.Host, ClientSettings.Port));</span><br><span class="line"></span><br><span class="line">                Console.ReadLine();</span><br><span class="line"></span><br><span class="line">                await clientChannel.CloseAsync();</span><br><span class="line">            &#125;</span><br><span class="line">            finally</span><br><span class="line">            &#123;</span><br><span class="line">                await group.ShutdownGracefullyAsync(TimeSpan.FromMilliseconds(100), TimeSpan.FromSeconds(1));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>业务代码</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 代码和服务端也相差不多，并且继承了同样的基类。</span><br><span class="line"> public class EchoClientHandler : ChannelHandlerAdapter</span><br><span class="line">    &#123;</span><br><span class="line">        readonly IByteBuffer initialMessage;</span><br><span class="line"></span><br><span class="line">        public EchoClientHandler()</span><br><span class="line">        &#123;</span><br><span class="line">            this.initialMessage = Unpooled.Buffer(ClientSettings.Size);</span><br><span class="line">            byte[] messageBytes = Encoding.UTF8.GetBytes(&quot;Hello world&quot;);</span><br><span class="line">            this.initialMessage.WriteBytes(messageBytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	//重写基类方法，当链接上服务器后，马上发送Hello World消息到服务端</span><br><span class="line">        public override void ChannelActive(IChannelHandlerContext context) =&gt; context.WriteAndFlushAsync(this.initialMessage);</span><br><span class="line"></span><br><span class="line">        public override void ChannelRead(IChannelHandlerContext context, object message)</span><br><span class="line">        &#123;</span><br><span class="line">            var byteBuffer = message as IByteBuffer;</span><br><span class="line">            if (byteBuffer != null)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Received from server: &quot; + byteBuffer.ToString(Encoding.UTF8));</span><br><span class="line">            &#125;</span><br><span class="line">            context.WriteAsync(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void ChannelReadComplete(IChannelHandlerContext context) =&gt; context.Flush();</span><br><span class="line"></span><br><span class="line">        public override void ExceptionCaught(IChannelHandlerContext context, Exception exception)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Exception: &quot; + exception);</span><br><span class="line">            context.CloseAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h2>0x03 常用Handler和基类</h2>
<p>从Echo服务的例子中，我们可以看到Netty程序不管时服务端还是客户端都通过一个Bootstrap/ServerBootstrap来启动Socket程序，并通过设置处理Handler管道来处理出入的消息，管道中常见的拦截器有加解密，日志记录，编解码，消息头处理，业务处理等，实际业务中根据情况可以自行添加自己的业务逻辑，同时很多处理器代码在服务端和客户端是公用的，Netty本身已经提供了一些常用处理器和业务处理器的基类来简化实际开发，我们一起看一下</p>
<h3>3.1 TlsHandler</h3>
<p>Netty支持Tls加密传输，TlsHandler类可以在开发人员无须关心加密传输时字节码的变化，只关心自己的业务代码即可。在管道处理的第一个配置该类即可</p>
<h3>3.2 LengthFieldPrepender</h3>
<p>这个handler 会在实际发送前在将数据的长度放置在数据前，本例中使用2个字节来存储数据的长度。</p>
<h3>3.3 LengthFieldBasedFrameDecoder</h3>
<p>这个handler比较常用，会在解码前用于解析数据，用于读取数据包的头信息，特别是包长，并等待数据达到包长后再交由下一个handler处理。
参数说明 以下是Amp协议的参数值，并注释了意义</p>
<blockquote>
<p>InitialBytesToStrip = 0, //读取时需要跳过的字节数<br>
LengthAdjustment = -5, //包实际长度的纠正，如果包长包括包头和包体，则要减去Length之前的部分<br>
LengthFieldLength = 4, //长度字段的字节数 整型为4个字节<br>
LengthFieldOffset = 1, //长度属性的起始（偏移）位<br>
MaxFrameLength = int.MaxValue, // 最大包长</p>
</blockquote>
<h3>3.4 ChannelHandlerAdapter和SimpleChannelInboundHandler&lt;T&gt;</h3>
<p>业务处理的常用Handler基类，一般客户端和服务端的业务处理handler 都要继承这个这两个类，其中SimpleChannelInboundHandler&lt;T&gt;是ChannelHandlerAdapter的子类，对其简单的进行封装，并进行了类型检查。</p>
<h3>3.5 IdleStateHandler 链接状态检查handler</h3>
<p>这个handler一般用于检查链接的状态，比如写超时，读超时。在实际项目中一般在客户端添加它，并用于发送心跳包。</p>
<p>以下是DotBPE在客户端管道中 第一个添加IdleStateHandler 并设置触发时间</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bootstrap = new Bootstrap();</span><br><span class="line">           bootstrap</span><br><span class="line">               .Channel&lt;TcpSocketChannel&gt;()</span><br><span class="line">               .Option(ChannelOption.TcpNodelay, true)</span><br><span class="line">               .Option(ChannelOption.ConnectTimeout, TimeSpan.FromSeconds(3))</span><br><span class="line">               .Group(new MultithreadEventLoopGroup())</span><br><span class="line">               .Handler(new ActionChannelInitializer&lt;ISocketChannel&gt;(c =&gt;</span><br><span class="line">               &#123;</span><br><span class="line">                   var pipeline = c.Pipeline;</span><br><span class="line">                   pipeline.AddLast(new LoggingHandler(&quot;CLT-CONN&quot;));</span><br><span class="line">                   MessageMeta meta = _msgCodecs.GetMessageMeta();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   // IdleStateHandler</span><br><span class="line">                   pipeline.AddLast(&quot;timeout&quot;, new IdleStateHandler(0, 0, meta.HeartbeatInterval / 1000));</span><br><span class="line">                   //消息前处理</span><br><span class="line">                   pipeline.AddLast(</span><br><span class="line">                       new LengthFieldBasedFrameDecoder(</span><br><span class="line">                           meta.MaxFrameLength,</span><br><span class="line">                           meta.LengthFieldOffset,</span><br><span class="line">                           meta.LengthFieldLength,</span><br><span class="line">                           meta.LengthAdjustment,</span><br><span class="line">                           meta.InitialBytesToStrip</span><br><span class="line">                       )</span><br><span class="line">                   );</span><br><span class="line"></span><br><span class="line">                   pipeline.AddLast(new ChannelDecodeHandler&lt;TMessage&gt;(_msgCodecs));</span><br><span class="line">                   pipeline.AddLast(new ClientChannelHandlerAdapter&lt;TMessage&gt;(this));</span><br><span class="line"></span><br><span class="line">               &#125;));</span><br><span class="line">           return bootstrap;</span><br></pre></td></tr></table></figure></p>
<p>然后在业务处理handler中处理UserEventTriggered事件</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//ChannelHandlerAdapter 重写UserEventTriggered</span><br><span class="line">public override void UserEventTriggered(IChannelHandlerContext context, object evt)&#123;</span><br><span class="line">  if(evt is IdleStateEvent)&#123;</span><br><span class="line">     var eventState = evt as IdleStateEvent;</span><br><span class="line">     if(eventState !=null)&#123;</span><br><span class="line">	    this._bootstrap.SendHeartbeatAsync(context,eventState);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>更多细节可以参考 《<a href="https://www.gitbook.com/book/waylau/netty-4-user-guide/details" target="_blank" rel="noopener">Netty 4.x 用户指南</a>》</p>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>dotnet</tag>
        <tag>serilog</tag>
      </tags>
  </entry>
  <entry>
    <title>基于DotNet Core的RPC框架(一) DotBPE.RPC快速开始</title>
    <url>/a-dotnet-core-rpc-sln-dotbpe-quickstart/</url>
    <content><![CDATA[<h2>0x00 简介</h2>
<p>DotBPE.RPC是一款基于dotnet core编写的RPC框架，而它的爸爸DotBPE，目标是实现一个开箱即用的微服务框架，但是它还差点意思，还仅仅在构思和尝试的阶段。但不管怎么说RPC是微服务的基础，先来讲讲RPC的实现吧。DotBPE.RPC底层通信默认实现基于<a href="https://github.com/Azure/DotNetty" target="_blank" rel="noopener">DotNetty</a>，这是由微软Azure团队开发的C#的Netty实现，非常酷。当然你也可以替换成其他Socket通信组件。DotBPE.RPC使用的默认协议名称叫Amp,编解码使用谷歌的Protobuf3,不过这些默认实现都是可以替换的。</p>
<p>源码地址：<a href="https://github.com/xuanye/dotbpe.git" target="_blank" rel="noopener">https://github.com/xuanye/dotbpe.git</a></p>
<p>&lt;!-- more --&gt;</p>
<h2>0x01 关于Amp协议和Google Protobuf</h2>
<h3>Amp(A Message Protocol)</h3>
<p>Amp(A Message Protocol)  ,中文名叫 <code>一个消息协议</code> ,是DotBPE.RPC默认实现的消息协议，在实际开发中，其实是不需要了解消息是如何编解码和传输的，但是了解协议有助于进一步了解框架。协议基本结构如下图所示:</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      0        1 2 3 4   5 6 7 8     9     10 11     12 13   &lt;length&gt;-14</span><br><span class="line">+------------+----------+---------+------+-------+---------+------------+</span><br><span class="line">| &lt;ver/argc&gt; | &lt;length&gt; |  &lt;seq&gt;  |&lt;type&gt;|&lt;serId&gt;| &lt;msgid&gt; |   &lt;data&gt;   |</span><br><span class="line">+------------+----------+---------+------+-------+---------+------------+</span><br></pre></td></tr></table></figure></p>
<p>Amp协议默认消息头长为14个字节，不包含扩展包头<br>
第0位：ver/argc // 为版本号，暂时来说，默认为0<br>
第1-4位: length //为包总长度（含包头长度）<br>
第5-8位: sequence // 为消息序列号，通过该序列号对应 请求&lt;---&gt;响应
第9位: type // 消息类型，现值有5种，如下:</p>
<blockquote>
<p>Request = 1, Response = 2, Notify = 3,NotFound = 4, ERROR = 5<br>
第10-11位: serviceId//消息ID ushort类型<br>
第12-13位: msgId//消息ID ushort类型<br>
在Amp协议中，serviceId标识一类请求，类似应用中的模块，而msgId标识模块中的具体方法</p>
</blockquote>
<p>其后紧跟实际的数据</p>
<h3>Google Protobuf</h3>
<p>Google Protocol Buffer( 简称 Protobuf) 是 Google 公司内部的混合语言数据标准，目前已经正在使用的有超过 48,162 种报文格式定义和超过 12,183 个 .proto 文件。他们用于 RPC 系统和持续数据存储系统。</p>
<p>Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 多种语言的API，包括C++、 C# 、GO、 JAVA、 PYTHON</p>
<p>我在之前的博客<a href="http://xuanye.github.io/2017/04/23/write-google-protobuf-plugin-with-csharp/">使用CSharp编写Google Protobuf插件</a>中有过介绍如果通过编写插件的方式，来通过定义proto文件，并生成我们需要的代码。</p>
<p>在DotBPE.RPC 中，我使用protobuf来作为服务的描述文件，并通过自定义的插件方式来生成服务端和客户端代理类。</p>
<h2>0x02 快速开始</h2>
<h3>0. 前提</h3>
<blockquote>
<p>因为DotBPE是基于dotnet core开发的，你本地必须已经有了dotnet core开发环境<br>
使用github托管代码，所以你必须已经安装了git客户端<br>
需要通过protoc生成模板代码，所以你必须已经安装了google protobuf命令行工具</p>
</blockquote>
<h3>1. 下载示例程序</h3>
<p>为了能够解释我们的快速开始程序，你需要一份本地能够运行的示例代码。从github上下载我已经写好的示例代码，可以让你快速的搭建程序，免去一些繁琐，但是又必须的步骤。</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;$ # Clone the repository to get the example code:    </span><br><span class="line">&gt;$ git clone https://github.com/xuanye/dotbpe-sample.git  </span><br><span class="line">&gt;$ cd dotbpe-sample</span><br></pre></td></tr></table></figure></p>
<p>使用VS2017，或者VSCode打开下载好的代码，目录结构如下所示：
<img src="http://ww1.sinaimg.cn/large/697065c1gy1ffm9r259j1j20bw0dmq3f.jpg" alt="代码结构"></p>
<p>如果你使用VS2017 可以自动帮你还原，如果使用VSCode的话 ，需要运行<code>dotnet restore</code> 下载依赖，成功后使用<code>dotnet build</code> 编译一下看看结果：看着很完美
<img src="http://ww1.sinaimg.cn/large/697065c1gy1ffm9ves29zj20qw08jweu.jpg" alt="编译结果"></p>
<h3>2. 运行程序</h3>
<h4>运行Server</h4>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;$ cd HelloDotBPE.Server   </span><br><span class="line">&gt;$ dotnet run</span><br></pre></td></tr></table></figure></p>
<h4>运行Client</h4>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;$ cd HelloDotBPE.Client   </span><br><span class="line">&gt;$ dotnet run</span><br></pre></td></tr></table></figure></p>
<p>恭喜！已经使用DotBPE.RPC运行一个Server/Client的应用程序。</p>
<h3>3. 来一起看一下代码吧</h3>
<h4>3.1 服务描述文件proto</h4>
<p>首先是DotBPE.RPC框架中对proto的扩展文件，所有的项目都需要这个文件，关于如何扩展proto，我的这篇<a href="http://xuanye.github.io/2017/04/23/write-google-protobuf-plugin-with-csharp/">博客</a>有比较详细的介绍,这里就不重复说了</p>
<p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dotbpe_option.proto 文件</span></span><br><span class="line"></span><br><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">package</span> dotbpe;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> csharp_namespace = <span class="string">"DotBPE.ProtoBuf"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"google/protobuf/descriptor.proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展服务</span></span><br><span class="line">extend google.protobuf.ServiceOptions &#123;</span><br><span class="line">  <span class="built_in">int32</span> service_id = <span class="number">51001</span>;</span><br><span class="line">  <span class="built_in">bool</span> disable_generic_service_client = <span class="number">51003</span>; <span class="comment">//禁止生成客户端代码</span></span><br><span class="line">  <span class="built_in">bool</span> disable_generic_service_server = <span class="number">51004</span>; <span class="comment">//禁止生成服务端代码</span></span><br><span class="line">&#125;</span><br><span class="line">extend google.protobuf.MethodOptions &#123;</span><br><span class="line">  <span class="built_in">int32</span> message_id = <span class="number">51002</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extend google.protobuf.FileOptions &#123;</span><br><span class="line">  <span class="built_in">bool</span> disable_generic_services_client = <span class="number">51003</span>; <span class="comment">//禁止生成客户端代码</span></span><br><span class="line">  <span class="built_in">bool</span> disable_generic_services_server = <span class="number">51004</span>; <span class="comment">//禁止生成服务端代码</span></span><br><span class="line">  <span class="built_in">bool</span> generic_markdown_doc = <span class="number">51005</span>; <span class="comment">//是否生成文档 本示例中无用</span></span><br><span class="line">  <span class="built_in">bool</span> generic_objectfactory = <span class="number">51006</span>; <span class="comment">//是否生成objectfactory 本示例中无用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面的服务描述文件 <code>greeter.proto</code> 才是真正的示例的服务描述文件：比较简单，定义一个Greeter Rpc服务，并定义一个Hello的方法</p>
<p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">//greeter.proto</span></span><br><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">package</span> dotbpe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> csharp_namespace = <span class="string">"HelloDotBPE.Common"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入扩展</span></span><br><span class="line"><span class="keyword">import</span> public <span class="string">"dotbpe_option.proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个服务</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">option</span> (service_id)= <span class="number">100</span> ;<span class="comment">//消息ID，全局必须唯一</span></span><br><span class="line">  <span class="comment">// Sends a greeting</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Hello (HelloRequest) <span class="keyword">returns</span> (HelloResponse) &#123;</span></span><br><span class="line"><span class="function">    option (message_id)= 1 </span>;<span class="comment">//设定消息ID，同一服务内唯一</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The request message containing the user's name.</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The response message containing the greetings</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloResponse</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> <span class="class"><span class="keyword">message</span> = 1;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>通过protoc工具生成模板代码，示例中的代码生成到了 HelloDotBPE.Common_g 目录下，本地可以运行shell命令的同学可以直接到
dotbpe-sample\script\generate 目录运行<code>sh generate_hello.sh</code> （windows下一般安装cgywin），不能运行的同学也可以在HelloDotBPE目录下，直接运行命令行</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protoc -I=../protos --csharp_out=./HelloDotBPE.Common/_g/ --dotbpe_out=./HelloDotBPE.Common/_g/   ../protos/dotbpe_option.proto ../protos/greeter.proto  --plugin=protoc-gen-dotbpe=../../tool/protoc_plugin/Protobuf.Gen.exe</span><br></pre></td></tr></table></figure></p>
<p>当然我还是建议大家安装以下cgywin运行环境，可以运行unix上的一些常用命令。同时在部署到正式环境的时候可以公用开发环境的一些脚本。</p>
<h4>3.2 服务端代码</h4>
<p>服务实现：</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务实现代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GreeterImpl</span> : <span class="title">GreeterBase</span> </span><br><span class="line">&#123; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task&lt;HelloResponse&gt; <span class="title">HelloAsync</span>(<span class="params">HelloRequest request</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">		<span class="comment">// 直接返回Hello Name</span></span><br><span class="line">       <span class="keyword">return</span> Task.FromResult(<span class="keyword">new</span> HelloResponse() &#123; Message = <span class="string">"Hello "</span> + request.Name &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>服务端启动类</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span> : <span class="title">IStartup</span></span><br><span class="line">   &#123;</span><br><span class="line">      </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IAppBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">          </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> IServiceProvider <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           services.AddDotBPE(); <span class="comment">// 添加DotBPE.RPC的核心依赖</span></span><br><span class="line">           services.AddServiceActors&lt;AmpMessage&gt;(actors =&gt; &#123;</span><br><span class="line">               actors.Add&lt;GreeterImpl&gt;(); <span class="comment">// 注册服务实现</span></span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> services.BuildServiceProvider();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>启动服务端</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Program</span><br><span class="line"> &#123;</span><br><span class="line">     static void Main(string[] args)</span><br><span class="line">     &#123;</span><br><span class="line">         Console.OutputEncoding = System.Text.Encoding.UTF8;</span><br><span class="line"></span><br><span class="line">         //在控制台输出调试日志</span><br><span class="line">         DotBPE.Rpc.Environment.SetLogger(new DotBPE.Rpc.Logging.ConsoleLogger());</span><br><span class="line"></span><br><span class="line">         var host = new RpcHostBuilder()</span><br><span class="line">             .UseServer(&quot;0.0.0.0:6201&quot;) //绑定本地端口6201</span><br><span class="line">             .UseStartup&lt;Startup&gt;()</span><br><span class="line">             .Build();</span><br><span class="line"></span><br><span class="line">         host.StartAsync().Wait();</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(&quot;Press any key to quit!&quot;);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line"></span><br><span class="line">         host.ShutdownAsync().Wait();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h4>3.3 客户端代码</h4>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.OutputEncoding = Encoding.UTF8;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> client = AmpClient.Create(<span class="string">"127.0.0.1:6201"</span>); <span class="comment">//建立链接通道</span></span><br><span class="line">           <span class="keyword">var</span> greeter = <span class="keyword">new</span> GreeterClient(client); <span class="comment">//客户端代理类</span></span><br><span class="line">          </span><br><span class="line">           <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               Console.WriteLine(<span class="string">"input your name and press enter:"</span>);</span><br><span class="line">               <span class="keyword">string</span> name = Console.ReadLine();</span><br><span class="line">               <span class="keyword">if</span> (<span class="string">"bye"</span>.Equals(name))</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">try</span></span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">var</span> request = <span class="keyword">new</span> HelloRequest() &#123; Name = name &#125;;</span><br><span class="line">                   <span class="keyword">var</span> result = greeter.HelloAsync(request).Result;                  </span><br><span class="line">                   Console.WriteLine(<span class="string">$"---------------receive form server:<span class="subst">&#123;result.Message&#125;</span>-----------"</span>);</span><br><span class="line">                                   </span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">               &#123;</span><br><span class="line">                   Console.WriteLine(<span class="string">"发生错误："</span> + ex.Message);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           Console.WriteLine(<span class="string">$"---------------close connection-----------"</span>);</span><br><span class="line">           client.CloseAsync();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h3>0x03 下一步</h3>
<p>下一篇 我将详细讲述DotBPE.RPC中的主要类和调用关系，并介绍如何使用DotNetty实现RPC通信。
事实上我正在编写一个更加复杂的示例<a href="https://github.com/xuanye/PiggyMetrics.git" target="_blank" rel="noopener">https://github.com/xuanye/PiggyMetrics.git</a>，
这原是spring cloud的一个示例程序，我使用DotBPE进行改造，用示例描述DotBPE在真实场景中的应用。包括服务注册和发现，服务间调用，公开HttpApi，监控检查等功能，并通过实践进一步完善DotBPE。初步的功能已经实现，不过还没来的及写文档。该系列的后面将详细描述该系统的实现。</p>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>dotnet</tag>
        <tag>rpc</tag>
        <tag>dotbpe</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CSharp编写Google Protobuf插件</title>
    <url>/write-google-protobuf-plugin-with-csharp/</url>
    <content><![CDATA[<p>什么是 Google Protocol Buffer？</p>
<p>Google Protocol Buffer( 简称 Protobuf) 是 Google 公司内部的混合语言数据标准，目前已经正在使用的有超过 48,162 种报文格式定义和超过 12,183 个 .proto 文件。他们用于 RPC 系统和持续数据存储系统。</p>
<p>Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 多种语言的API，包括C++、 C# 、GO、 JAVA、 PYTHON</p>
<p>如果你并不了解Protobuf能做什么，建议结合google搜索关键字，看一下入门级别的文章，或者看一下官方文档中的<a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener">Developer Guide</a>，或者中文的<a href="http://www.jianshu.com/p/3ab14a2cb477" target="_blank" rel="noopener">开发指南</a> .官方的文档中有各种语言相关的示例，可以结合代码看一下实际的用法。</p>
<p>很多人说为什么不用json（或者xml), 答案很简单，Protobuf更小，更简洁，而且序列化和反序列化更快！</p>
<p>谷歌最新开源的<a href="http://www.grpc.io" target="_blank" rel="noopener">gRpc</a>框架就是默认使用Protobuf作为数据传输格式和服务描述文件。对于gRpc 就不做详细介绍了，有兴趣的可以看一下官网。</p>
<p>言归正传，在实际使用Protobuf过程中，我发现Protobuf不但可以编写描述消息（Message）的内容，同时可以表述其他方法（类似Rpc中的方法），主要是gRpc中看到的。同时在Protobuf 代码生成工具的包中，有一个这样的目录，一致以来都没搞明白是做什么用的，如下图：</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1fevjc4j16qj20cs0aadgf.jpg" alt></p>
<p>在目录中存在大量已经定义好的proto文件，其实这些文件是Protobuf的描述文件，类似元数据。用本身的语法描述本身，同时通过这些文件生成对应的语言的元数据类等代码，比如在C#版本的Google.Protobuf中就能看到上述描述文件生成的类，如下图所示</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1fevjf70qswj20fe0e0q40.jpg" alt></p>
<p>而这些描述文件中最重要的文件 就是<code>descriptor.proto</code> 这个文件，这个文件是整个proto语法的描述类，描述了实际Protobuf各层次语法的结构，来一起看一下这个文件的一些代码, 上面这个代码描述了proto文件定义的语法定义，如前面两个字段意思是可选的name，可选的package字段，中间是描述可多个message_type（Message），service（Rpc Service) ,enum_type（枚举）等定义，然后一层层分解下去。 基本上就可以了解Protobuf语法的全貌和扩展点了</p>
<p>&lt;!-- more --&gt;</p>
<p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">FileDescriptorProto</span> </span>&#123;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">string</span> name = <span class="number">1</span>;       <span class="comment">// file name, relative to root of source tree</span></span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">string</span> <span class="keyword">package</span> = <span class="number">2</span>;    <span class="comment">// e.g. "foo", "foo.bar", etc.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Names of files imported by this file.</span></span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> dependency = <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// Indexes of the public imported files in the dependency list above.</span></span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">int32</span> public_dependency = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// Indexes of the weak imported files in the dependency list.</span></span><br><span class="line">  <span class="comment">// For Google-internal migration only. Do not use.</span></span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">int32</span> weak_dependency = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// All top-level definitions in this file.</span></span><br><span class="line">  <span class="keyword">repeated</span> DescriptorProto message_type = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">repeated</span> EnumDescriptorProto enum_type = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">repeated</span> ServiceDescriptorProto <span class="class"><span class="keyword">service</span> = 6;</span></span><br><span class="line"><span class="class">  <span class="title">repeated</span> FieldDescriptorProto extension = 7;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  optional FileOptions options = 8;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  // This field contains optional information about the original source code.</span></span><br><span class="line"><span class="class">  // You may safely remove this entire field without harming runtime</span></span><br><span class="line"><span class="class">  // functionality of the descriptors -- the information is needed only by</span></span><br><span class="line"><span class="class">  // development tools.</span></span><br><span class="line"><span class="class">  optional SourceCodeInfo source_code_info = 9;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  // The syntax of the proto file.</span></span><br><span class="line"><span class="class">  // The supported values are "proto2" and "proto3".</span></span><br><span class="line"><span class="class">  optional string syntax = 12;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>同时在compiler目录下 还有一个plugin的目录，其中的plugin.proto文件很耐人寻味，先来看下这个文件中的内容</p>
<p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">package</span> google.protobuf.compiler;</span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">"com.google.protobuf.compiler"</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"PluginProtos"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> csharp_namespace = <span class="string">"Google.Protobuf.Compiler"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">"plugin_go"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"google/protobuf/descriptor.proto"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">CodeGeneratorRequest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> file_to_generate = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> parameter = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> FileDescriptorProto proto_file = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">CodeGeneratorResponse</span> </span>&#123;  </span><br><span class="line">  <span class="built_in">string</span> error = <span class="number">1</span>; </span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">File</span> </span>&#123;    </span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> insertion_point = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">string</span> content = <span class="number">15</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> File file = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>删除了非必要的注释后，我们可以看到这个文件里面其实只定义了两个类型，一个是代码生成请求，一个是代码生成响应，而在<code>CodeGeneratorRequest</code>中又有之前我们在<code>descriptor.proto</code>中看到的<code>FileDescriptorProto</code> 这个类的信息，用大腿都可以想到这里应该就是代码生成插件获取元数据的入口了，那么怎么做呢？</p>
<p>从gRpc 的代码生成示例中 我们可以看到 其实Protobuf是支持自定义生成代码插件的，如下所示：</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span>PROTOC% -I../../protos --csharp_out Greeter  ../../protos/helloworld.proto --grpc_out Greeter --plugin=protoc-gen-grpc=%PLUGIN%</span><br></pre></td></tr></table></figure></p>
<p>按理我们可以实现自己的插件来生成我们需要的任意格式，包括各种代码，甚至是文档。但是这个资料却非常少，几乎没有多少相关的文章，后来终于找到一片关于plugin的文章<a href="http://www.expobrain.net/2015/09/13/create-a-plugin-for-google-protocol-buffer/" target="_blank" rel="noopener">http://www.expobrain.net/2015/09/13/create-a-plugin-for-google-protocol-buffer/</a> ，大家有兴趣的可以看看，不过文章的重点是这句：</p>
<blockquote>
<p>The core part is the interface code to read a request from the <code>stdin</code>, traverse the AST and write the response on the <code>stdout</code>.</p>
</blockquote>
<p>原来插件的接口代码其实是从标准输入中读取流，然后再把你要生成的内容输出到标准输出中。这些终于知道怎么用了。。</p>
<p>撩起袖子开始干，通过protoc命令行生成plugin.proto的代码</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protoc-I../../protos --csharp_out test  ../../protos/plugin.proto</span><br></pre></td></tr></table></figure></p>
<p>新建一个控制台项目，把代码copy 到项目中，并在Program.cs代码中添加测试的代码</p>
<p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Google.Protobuf;</span><br><span class="line"><span class="keyword">using</span> Google.Protobuf.Compiler;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DotBPE.ProtobufPlugin</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.OutputEncoding = System.Text.Encoding.UTF8;</span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">new</span> CodeGeneratorResponse();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                CodeGeneratorRequest request;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> inStream = Console.OpenStandardInput())</span><br><span class="line">                &#123;</span><br><span class="line">                    request = CodeGeneratorRequest.Parser.ParseFrom(inStream);</span><br><span class="line">                &#125;</span><br><span class="line">                ParseCode(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                response.Error += e.ToString();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> output = Console.OpenStandardOutput())</span><br><span class="line">            &#123;</span><br><span class="line">                response.WriteTo(output);</span><br><span class="line">                output.Flush();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ParseCode</span>(<span class="params">CodeGeneratorRequest request, CodeGeneratorResponse response</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">           DotbpeGen.Generate(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>哈哈 开始编译，然而编译不通过！，坑爹啊！ 原来C#版本中 Google.Protobuf已经生成好的类 都是internal访问权限，不能从外部引用。。。但是Google.Protobuf是开源的。。而且我需要用的类 我也可以通过protoc命令自己生成到同一个项目中，或者设置成public访问权限。。方便起见，我直接copy了Google.Protobuf的源码到我们的项目中，这次再次编译 ，代码就完美运行了，接下来的工作 不过是填充<code>DotbpeGen.Generate</code> 的代码了，这不过是体力活。</p>
<p>至于CodeGeneratorRequest和CodeGeneratorResponse 到底有什么方法，其实看proto文件就能知道。以下是我自己在项目中使用的生成代码类 供大家参考</p>
<p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Google.Protobuf.Compiler;</span><br><span class="line"><span class="keyword">using</span> Google.Protobuf.Reflection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DotBPE.ProtobufPlugin</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DotbpeGen</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Generate</span>(<span class="params">CodeGeneratorRequest request, CodeGeneratorResponse response</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> protofile <span class="keyword">in</span> request.ProtoFile)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    GenerateByProtoFile(protofile, response);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">                    <span class="keyword">using</span> (Stream stream = File.Create(<span class="string">"./error.txt"</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] err = Encoding.UTF8.GetBytes(ex.Message+ex.StackTrace);</span><br><span class="line">                        stream.Write(err,<span class="number">0</span>,err.Length);</span><br><span class="line">                    &#125;</span><br><span class="line">                    response.Error += ex.Message;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GenerateSourceInfo</span>(<span class="params">FileDescriptorProto protofile, CodeGeneratorResponse response</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">bool</span> genericDoc;</span><br><span class="line">            protofile.Options.CustomOptions.TryGetBool(DotBPEOptions.GENERIC_MARKDOWN_DOC,<span class="keyword">out</span> genericDoc);</span><br><span class="line">            <span class="keyword">if</span> (!genericDoc)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> location <span class="keyword">in</span> protofile.SourceCodeInfo.Location)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">string</span> path = String.Join(<span class="string">","</span>, location.Path);</span><br><span class="line">                <span class="keyword">string</span> span = String.Join(<span class="string">","</span>, location.Span);</span><br><span class="line">                <span class="keyword">string</span> leadingDetachedComments = String.Join(<span class="string">"\r"</span>, location.LeadingDetachedComments);</span><br><span class="line">                <span class="keyword">string</span> trailingComments = String.Join(<span class="string">"\r"</span>, location.TrailingComments);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#123;\"Path\",\""</span>+path+<span class="string">"\",\"Span\",\""</span>+span+<span class="string">"\",\"LeadingComments\",\""</span>+ location.LeadingComments + <span class="string">"\",\"LeadingDetachedComments\",\""</span>+ leadingDetachedComments + <span class="string">"\",\"TrailingComments\",\""</span>+ trailingComments + <span class="string">"\"&#125;"</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> nfile = <span class="keyword">new</span> CodeGeneratorResponse.Types.File</span><br><span class="line">            &#123;</span><br><span class="line">                Name = GetFileName(protofile.Name) + <span class="string">"SI.txt"</span>,</span><br><span class="line">                Content = sb.ToString()</span><br><span class="line">            &#125;;</span><br><span class="line">            response.File.Add(nfile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GenerateByProtoFile</span>(<span class="params">FileDescriptorProto protofile, CodeGeneratorResponse response</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            GenerateSourceInfo(protofile, response);</span><br><span class="line">            GenerateServer(protofile, response);</span><br><span class="line">            GenerateClient(protofile, response);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GenerateServer</span>(<span class="params">FileDescriptorProto protofile, CodeGeneratorResponse response</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">bool</span> genericServer;</span><br><span class="line">            protofile.Options.CustomOptions.TryGetBool(DotBPEOptions.DISABLE_GENERIC_SERVICES_SERVER, <span class="keyword">out</span> genericServer);</span><br><span class="line">            <span class="keyword">if</span> (genericServer)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (protofile.Service == <span class="literal">null</span> || protofile.Service.Count &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//生成文件头</span></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.AppendLine(<span class="string">"// Generated by the protocol buffer compiler.  DO NOT EDIT!"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">$"// source: <span class="subst">&#123;protofile.Name&#125;</span>"</span>);</span><br><span class="line">            <span class="comment">//还可以生成注释</span></span><br><span class="line"></span><br><span class="line">            sb.AppendLine(<span class="string">"#region Designer generated code"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">""</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using System; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using System.Threading.Tasks; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using DotBPE.Rpc; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using DotBPE.Protocol.Amp; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using Google.Protobuf; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> ns = GetFileNamespace(protofile);</span><br><span class="line">            sb.AppendLine(<span class="string">"namespace "</span> + ns + <span class="string">" &#123;"</span>);</span><br><span class="line">            <span class="comment">//生成代码</span></span><br><span class="line">            <span class="keyword">foreach</span> (ServiceDescriptorProto t <span class="keyword">in</span> protofile.Service)</span><br><span class="line">            &#123;</span><br><span class="line">                t.Options.CustomOptions.TryGetBool(DotBPEOptions.DISABLE_GENERIC_SERVICES_SERVER, <span class="keyword">out</span> genericServer);</span><br><span class="line">                <span class="keyword">if</span> (genericServer)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                sb.AppendLine(<span class="string">""</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"//start for class Abstract"</span>+t.Name);</span><br><span class="line">                GenerateServiceForServer(t, sb);</span><br><span class="line">                sb.AppendLine(<span class="string">"//end for class Abstract"</span>+t.Name);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.AppendLine(<span class="string">"&#125;\n"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"#endregion\n"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> nfile = <span class="keyword">new</span> CodeGeneratorResponse.Types.File</span><br><span class="line">            &#123;</span><br><span class="line">                Name = GetFileName(protofile.Name) + <span class="string">"Server.cs"</span>,</span><br><span class="line">                Content = sb.ToString()</span><br><span class="line">            &#125;;</span><br><span class="line">            response.File.Add(nfile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GenerateClient</span>(<span class="params">FileDescriptorProto protofile, CodeGeneratorResponse response</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">bool</span> genericClient;</span><br><span class="line">            protofile.Options.CustomOptions.TryGetBool(DotBPEOptions.DISABLE_GENERIC_SERVICES_CLIENT, <span class="keyword">out</span> genericClient);</span><br><span class="line">            <span class="keyword">if</span> (genericClient)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (protofile.Service == <span class="literal">null</span> || protofile.Service.Count &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//生成文件头</span></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.AppendLine(<span class="string">"// Generated by the protocol buffer compiler.  DO NOT EDIT!"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">$"// source: <span class="subst">&#123;protofile.Name&#125;</span>"</span>);</span><br><span class="line">            <span class="comment">//还可以生成注释</span></span><br><span class="line"></span><br><span class="line">            sb.AppendLine(<span class="string">"#region Designer generated code"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">""</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using System; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using System.Threading.Tasks; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using DotBPE.Rpc; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using DotBPE.Protocol.Amp; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using DotBPE.Rpc.Exceptions; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"using Google.Protobuf; "</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> ns = GetFileNamespace(protofile);</span><br><span class="line">            sb.AppendLine(<span class="string">"namespace "</span> + ns + <span class="string">" &#123;"</span>);</span><br><span class="line">            <span class="comment">//生成代码</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (ServiceDescriptorProto t <span class="keyword">in</span> protofile.Service)</span><br><span class="line">            &#123;</span><br><span class="line">                t.Options.CustomOptions.TryGetBool(DotBPEOptions.DISABLE_GENERIC_SERVICES_CLIENT, <span class="keyword">out</span> genericClient);</span><br><span class="line">                <span class="keyword">if</span> (genericClient)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sb.AppendLine(<span class="string">""</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"//start for class "</span>+t.Name+<span class="string">"Client"</span>);</span><br><span class="line">                GenerateServiceForClient(t, sb);</span><br><span class="line">                sb.AppendLine(<span class="string">"//end for class "</span>+t.Name+<span class="string">"Client"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"#endregion"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成文件</span></span><br><span class="line">            <span class="keyword">var</span> nfile = <span class="keyword">new</span> CodeGeneratorResponse.Types.File</span><br><span class="line">            &#123;</span><br><span class="line">                Name = GetFileName(protofile.Name) + <span class="string">"Client.cs"</span>,</span><br><span class="line">                Content = sb.ToString()</span><br><span class="line">            &#125;;</span><br><span class="line">            response.File.Add(nfile);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GenerateServiceForClient</span>(<span class="params">ServiceDescriptorProto service, StringBuilder sb</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> serviceId;</span><br><span class="line">            <span class="keyword">bool</span> hasServiceId = service.Options.CustomOptions.TryGetInt32(DotBPEOptions.SERVICE_ID, <span class="keyword">out</span> serviceId);</span><br><span class="line">            <span class="keyword">if</span> (!hasServiceId || serviceId &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Service="</span> + service.Name + <span class="string">" ServiceId NOT_FOUND"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (serviceId &gt;= <span class="keyword">ushort</span>.MaxValue)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Service="</span> + service.Name + <span class="string">"ServiceId too large"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.AppendFormat(<span class="string">"public sealed class &#123;0&#125;Client : AmpInvokeClient \n"</span>,service.Name);</span><br><span class="line">            sb.AppendLine(<span class="string">"&#123;"</span>);</span><br><span class="line">            <span class="comment">//构造函数</span></span><br><span class="line">            sb.AppendLine(<span class="string">$"public <span class="subst">&#123;service.Name&#125;</span>Client(IRpcClient&lt;AmpMessage&gt; client) : base(client)"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"&#123;"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环方法</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> method <span class="keyword">in</span> service.Method)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> msgId ;</span><br><span class="line">                <span class="keyword">bool</span> hasMsgId= method.Options.CustomOptions.TryGetInt32(DotBPEOptions.MESSAGE_ID,<span class="keyword">out</span> msgId);</span><br><span class="line">                <span class="keyword">if</span> (!hasMsgId || msgId &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Service"</span> + service.Name + <span class="string">"."</span> + method.Name + <span class="string">" ' MessageId NOT_FINDOUT "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (msgId &gt;= <span class="keyword">ushort</span>.MaxValue)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Service"</span> + service.Name + <span class="string">"."</span> + method.Name + <span class="string">" is too large"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//异步方法</span></span><br><span class="line">                <span class="keyword">string</span> outType = GetTypeName(method.OutputType);</span><br><span class="line">                <span class="keyword">string</span> inType = GetTypeName(method.InputType);</span><br><span class="line"></span><br><span class="line">                sb.AppendLine(<span class="string">$"public async Task&lt;<span class="subst">&#123;outType&#125;</span>&gt; <span class="subst">&#123;method.Name&#125;</span>Asnyc(<span class="subst">&#123;inType&#125;</span> request,int timeOut=3000)"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#123;"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">$"AmpMessage message = AmpMessage.CreateRequestMessage(<span class="subst">&#123;serviceId&#125;</span>, <span class="subst">&#123;msgId&#125;</span>);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"message.Data = request.ToByteArray();"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"var response = await base.CallInvoker.AsyncCall(message,timeOut);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"if (response != null &amp;&amp; response.Data !=null)"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#123;"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">$"return <span class="subst">&#123;outType&#125;</span>.Parser.ParseFrom(response.Data);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"throw new RpcException(\"请求出错，请检查!\");"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line">                sb.AppendLine();</span><br><span class="line">                sb.AppendLine(<span class="string">"//同步方法"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">$"public <span class="subst">&#123;outType&#125;</span> <span class="subst">&#123;method.Name&#125;</span>(<span class="subst">&#123;inType&#125;</span> request)"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#123;"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">$"AmpMessage message = AmpMessage.CreateRequestMessage(<span class="subst">&#123;serviceId&#125;</span>, <span class="subst">&#123;msgId&#125;</span>);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"message.Data = request.ToByteArray();"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"var response =  base.CallInvoker.BlockingCall(message);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"if (response != null &amp;&amp; response.Data !=null)"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#123;"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">$"return <span class="subst">&#123;outType&#125;</span>.Parser.ParseFrom(response.Data);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"throw new RpcException(\"请求出错，请检查!\");"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//循环方法end</span></span><br><span class="line"></span><br><span class="line">            sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line">            <span class="comment">//类结束</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GenerateServiceForServer</span>(<span class="params">ServiceDescriptorProto service, StringBuilder sb</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> serviceId;</span><br><span class="line">            <span class="keyword">bool</span> hasServiceId = service.Options.CustomOptions.TryGetInt32(DotBPEOptions.SERVICE_ID, <span class="keyword">out</span> serviceId);</span><br><span class="line">            <span class="keyword">if</span>(!hasServiceId || serviceId&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Service="</span>+service.Name+<span class="string">" ServiceId NOT_FOUND"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(serviceId&gt;=<span class="keyword">ushort</span>.MaxValue)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Service="</span>+service.Name+ <span class="string">"ServiceId too large"</span> );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.AppendFormat(<span class="string">"public abstract class &#123;0&#125;Base : IServiceActor&lt;AmpMessage&gt; \n"</span>, service.Name);</span><br><span class="line">            sb.AppendLine(<span class="string">"&#123;"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"public string Id =&gt; \""</span>+serviceId+<span class="string">"$0\";"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            StringBuilder sbIfState = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环方法</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> method <span class="keyword">in</span> service.Method)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> msgId ;</span><br><span class="line">                <span class="keyword">bool</span> hasMsgId= method.Options.CustomOptions.TryGetInt32(DotBPEOptions.MESSAGE_ID,<span class="keyword">out</span> msgId);</span><br><span class="line">                <span class="keyword">if</span>(!hasMsgId || msgId&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Service"</span>+service.Name+<span class="string">"."</span>+method.Name+<span class="string">" ' MessageId NOT_FINDOUT "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(msgId&gt;=<span class="keyword">ushort</span>.MaxValue)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Service"</span> + service.Name+<span class="string">"."</span>+method.Name+<span class="string">" is too large"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//异步方法</span></span><br><span class="line">                <span class="keyword">string</span> outType = GetTypeName(method.OutputType);</span><br><span class="line">                <span class="keyword">string</span> inType = GetTypeName(method.InputType);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                sb.AppendLine(<span class="string">"//调用委托"</span>);</span><br><span class="line">                sb.AppendLine(</span><br><span class="line">                    <span class="string">$"private async Task Receive<span class="subst">&#123;method.Name&#125;</span>Async(IRpcContext&lt;AmpMessage&gt; context, AmpMessage req)"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#123;"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">$"var request = <span class="subst">&#123;inType&#125;</span>.Parser.ParseFrom(req.Data);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">$"var data = await <span class="subst">&#123;method.Name&#125;</span>Async(request);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"response.Sequence = req.Sequence;"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"response.Data = data.ToByteArray();"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"await context.SendAsync(response);"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">                sb.AppendLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                sb.AppendLine(<span class="string">"//抽象方法"</span>);</span><br><span class="line">                sb.AppendLine(<span class="string">$"public abstract Task&lt;<span class="subst">&#123;outType&#125;</span>&gt; <span class="subst">&#123;method.Name&#125;</span>Async(<span class="subst">&#123;inType&#125;</span> request);"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//拼装if调用语句</span></span><br><span class="line">                sbIfState.AppendFormat(<span class="string">"//方法&#123;0&#125;.&#123;1&#125;\n"</span>,service.Name,method.Name);</span><br><span class="line">                sbIfState.AppendLine(<span class="string">"if(req.MessageId == "</span>+msgId+<span class="string">")&#123;return this.Receive"</span>+method.Name+<span class="string">"Async(context, req);&#125;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//循环方法end</span></span><br><span class="line">            <span class="comment">//生成主调用代码</span></span><br><span class="line">            sb.AppendLine(<span class="string">"public Task ReceiveAsync(IRpcContext&lt;AmpMessage&gt; context, AmpMessage req)"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"&#123;"</span>);</span><br><span class="line">            sb.Append(sbIfState);</span><br><span class="line">            sb.AppendLine(<span class="string">"return Task.CompletedTask;"</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            sb.AppendLine(<span class="string">"&#125;"</span>);</span><br><span class="line">            <span class="comment">//类结束</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetFileNamespace</span>(<span class="params">FileDescriptorProto protofile</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> ns = protofile.Options.CsharpNamespace;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(ns))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">""</span> + protofile.Name + <span class="string">".proto did not set csharp_namespace"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ConvertCamelCase(ns);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetFileName</span>(<span class="params"><span class="keyword">string</span> fileProto</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> nomalName = fileProto.Split(<span class="string">'.'</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">return</span> ConvertCamelCase(nomalName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ConvertCamelCase</span>(<span class="params"><span class="keyword">string</span> nomalName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> String.Join(<span class="string">""</span>, nomalName.Split(<span class="string">'_'</span>).Select(_ =&gt; _.Substring(<span class="number">0</span>, <span class="number">1</span>).ToUpper() + _.Substring(<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetTypeName</span>(<span class="params"><span class="keyword">string</span> typeFullName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> ConvertCamelCase(typeFullName.Split(<span class="string">'.'</span>).Last());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后我们编写一个proto文件测试以下</p>
<p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">//benchmark.proto</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">package</span> dotbpe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> csharp_namespace = <span class="string">"DotBPE.IntegrationTesting"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> public <span class="string">"dotbpe_option.proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> optimize_for = SPEED;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Benchmark测试服务</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">BenchmarkTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">option</span> (service_id)= <span class="number">50000</span> ;<span class="comment">//设定服务ID</span></span><br><span class="line">    <span class="comment">//测试发送Echo消息</span></span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> Echo (BenchmarkMessage) <span class="keyword">returns</span> (BenchmarkMessage)&#123;</span></span><br><span class="line"><span class="function">        option (message_id)= 1 </span>;<span class="comment">//设定消息ID</span></span><br><span class="line">    &#125;;<span class="comment">//Echo尾部的注释</span></span><br><span class="line">    <span class="comment">// 测试发送退出消息</span></span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> Quit (Void) <span class="keyword">returns</span> (Void)&#123;</span></span><br><span class="line"><span class="function">        option (message_id)= 10000 </span>;<span class="comment">//设定消息ID</span></span><br><span class="line">    &#125;;<span class="comment">//Quit尾部的注释</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我是void消息</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Void</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//我是BenchmarkMessage消息</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">BenchmarkMessage</span> </span>&#123;</span><br><span class="line">  <span class="comment">//字段前的注释</span></span><br><span class="line">  <span class="built_in">string</span> field1 = <span class="number">1</span>; <span class="comment">//字段后的注释</span></span><br><span class="line">  <span class="comment">//字段前的注释 多行</span></span><br><span class="line">  <span class="comment">//字段前的字数多行</span></span><br><span class="line">  <span class="built_in">int32</span> field2 = <span class="number">2</span>; <span class="comment">//字段后的注释</span></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * 字段前注释特殊格式</span><br><span class="line">  * 字段前注释特殊格式多行</span><br><span class="line">  */</span><br><span class="line">  <span class="built_in">int32</span> field3 = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">string</span> field4 = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">fixed64</span> field5 = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">string</span> field9 = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">string</span> field18 = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">bool</span> field80 = <span class="number">80</span>;</span><br><span class="line">  <span class="built_in">bool</span> field81 = <span class="number">81</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int32</span> field280 = <span class="number">280</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field6 = <span class="number">6</span>;</span><br><span class="line">  <span class="built_in">int64</span> field22 = <span class="number">22</span> ;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> field59 = <span class="number">59</span> ;</span><br><span class="line">  <span class="built_in">string</span> field7 = <span class="number">7</span>;</span><br><span class="line">  <span class="built_in">int32</span> field16 = <span class="number">16</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field130 = <span class="number">130</span> ;</span><br><span class="line">  <span class="built_in">bool</span> field12 = <span class="number">12</span> ;</span><br><span class="line">  <span class="built_in">bool</span> field17 = <span class="number">17</span>;</span><br><span class="line">  <span class="built_in">bool</span> field13 = <span class="number">13</span>;</span><br><span class="line">  <span class="built_in">bool</span> field14 = <span class="number">14</span>;</span><br><span class="line">  <span class="built_in">int32</span> field104 = <span class="number">104</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field100 = <span class="number">100</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field101 = <span class="number">101</span> ;</span><br><span class="line">  <span class="built_in">string</span> field102 = <span class="number">102</span>;</span><br><span class="line">  <span class="built_in">string</span> field103 = <span class="number">103</span>;</span><br><span class="line">  <span class="built_in">int32</span> field29 = <span class="number">29</span> ;</span><br><span class="line">  <span class="built_in">bool</span> field30 = <span class="number">30</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field60 = <span class="number">60</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field271 = <span class="number">271</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field272 = <span class="number">272</span>;</span><br><span class="line">  <span class="built_in">int32</span> field150 = <span class="number">150</span>;</span><br><span class="line">  <span class="built_in">int32</span> field23 = <span class="number">23</span>;</span><br><span class="line">  <span class="built_in">bool</span> field24 = <span class="number">24</span>;</span><br><span class="line">  <span class="built_in">int32</span> field25 = <span class="number">25</span> ;</span><br><span class="line">  <span class="built_in">bool</span> field78 = <span class="number">78</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field67 = <span class="number">67</span>;</span><br><span class="line">  <span class="built_in">int32</span> field68 = <span class="number">68</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field128 = <span class="number">128</span> ;</span><br><span class="line">  <span class="built_in">string</span> field129 = <span class="number">129</span> ;</span><br><span class="line">  <span class="built_in">int32</span> field131 = <span class="number">131</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dotbpe_option.proto</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [START declaration]</span></span><br><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">package</span> dotbpe;</span><br><span class="line"><span class="comment">// [END declaration]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [START csharp_declaration]</span></span><br><span class="line"><span class="keyword">option</span> csharp_namespace = <span class="string">"DotBPE.ProtoBuf"</span>;</span><br><span class="line"><span class="comment">// [END csharp_declaration]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"google/protobuf/descriptor.proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展服务</span></span><br><span class="line">extend google.protobuf.ServiceOptions &#123;</span><br><span class="line">  <span class="built_in">int32</span> service_id = <span class="number">51001</span>;</span><br><span class="line">  <span class="built_in">bool</span> disable_generic_service_client = <span class="number">51003</span>; <span class="comment">//是否生成客户端代码</span></span><br><span class="line">  <span class="built_in">bool</span> disable_generic_service_server = <span class="number">51004</span>; <span class="comment">//是否生成服务端代码</span></span><br><span class="line">&#125;</span><br><span class="line">extend google.protobuf.MethodOptions &#123;</span><br><span class="line">  <span class="built_in">int32</span> message_id = <span class="number">51002</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extend google.protobuf.FileOptions &#123;</span><br><span class="line">  <span class="built_in">bool</span> disable_generic_services_client = <span class="number">51003</span>; <span class="comment">//是否生成客户端代码</span></span><br><span class="line">  <span class="built_in">bool</span> disable_generic_services_server = <span class="number">51004</span>; <span class="comment">//是否生成服务端代码</span></span><br><span class="line">  <span class="built_in">bool</span> generic_markdown_doc = <span class="number">51005</span>; <span class="comment">//是否生成文档</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的dotbpe_option.proto 我们proto文件进行了自定义的扩展，添加一些自己需要的额外信息，其实所有扩展都是对<code>descriptor.proto</code>中消息的扩展。</p>
<p>然后我们通过命令来生成一下，这里有个特殊的约定，一定要注意当我们设置</p>
<p>protoc-gen-<strong>dotbpe</strong>=../../tool/ampplugin/dotbpe_amp.exe 插件的名称protoc-gen-<strong>dotbpe</strong>时，那么输出的目录一定要写成--<strong>dotbpe</strong>_out ，两个名字一点要匹配哦</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set -ex</span><br><span class="line"></span><br><span class="line">cd $(dirname $0)/../../test/IntegrationTesting/</span><br><span class="line"></span><br><span class="line">PROTOC=protoc</span><br><span class="line">PLUGIN=protoc-gen-dotbpe=../../tool/ampplugin/dotbpe_amp.exe</span><br><span class="line">IntegrationTesting_DIR=./DotBPE.IntegrationTesting/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>PROTOC  -I=./protos --csharp_out=$IntegrationTesting_DIR --dotbpe_out=$IntegrationTesting_DIR \</span><br><span class="line">    ./protos/benchmark.proto  --plugin=$PLUGIN</span><br></pre></td></tr></table></figure></p>
<p>差不多就结束了，相关的代码可以在<a href="https://github.com/xuanye/dotbpe/tree/develop/src/tool" target="_blank" rel="noopener">https://github.com/xuanye/dotbpe/tree/develop/src/tool</a> 查看到，这是我最近在写的一个C#的rpc框架，现在完成了基本的功能，还需要进一步完善，有机会再介绍把。</p>
<p><strong>descriptor.proto信息挖掘</strong></p>
<p>我们注意到在descriptor.proto文件中包含有这样的一个message: SourceCodeInfo, 这个消息体里有如下字段</p>
<p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">optional</span> <span class="built_in">string</span> leading_comments = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">optional</span> <span class="built_in">string</span> trailing_comments = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">repeated</span> <span class="built_in">string</span> leading_detached_comments = <span class="number">6</span>;</span><br></pre></td></tr></table></figure></p>
<p>这是非常有意思的定义，意思是可以在运行时获取到proto文件中的注释。这可以帮助我们生成 文档或者代码注释，但是读取逻辑比较复杂，其内部有一个通过Path和Span来定位元素的逻辑。因为在实际的情况中，一般都是要获取Service和Message上的注释，那么就来专门讨论一下如何获取这两个类型的注释吧。</p>
<p>下面是 <code>SourceCodeInfo.Location</code> 中我们需要用到Path示例</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* [4, m] - Message的注释</span><br><span class="line">* [4, m, 2, f] - Message 中 字段（field）的注释</span><br><span class="line">* [6, s] - Service的注释</span><br><span class="line">* [6, s, 2, r] - Service中Rpc方法的注释</span><br></pre></td></tr></table></figure></p>
<p>where:</p>
<ul>
<li><code>m</code> -  proto文件中Message的索引（就是第几个定义的Message）, 从0开始</li>
<li><code>f</code> - Message中Field字段的索引（就是第几个字段）, 从0开始</li>
<li><code>s</code> -  proto文件中Service的索引, 从0开始</li>
<li><code>r</code> -  Service中Rpc方法的索引, 从0开始</li>
</ul>
<p>like this:</p>
<p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [4, 0] 就是这里的注释 </span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">MyMessage</span> </span>&#123;</span><br><span class="line">  <span class="comment">// [4, 0, 2, 0] 在这里</span></span><br><span class="line">  <span class="built_in">int32</span> field1 = <span class="number">1</span>; <span class="comment">// [4, 0, 2, 0] 也在这里</span></span><br><span class="line">&#125;<span class="comment">// [4, 0] 就是这里的注释 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [6, 0] 在这里!</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">  <span class="comment">// [6, 0, 2, 0] 在这里!</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> (MyMessage) <span class="keyword">returns</span> (MyMessage)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>想要了解全部内容可以去看下<code>descriptor.proto</code>中的注释内容 吧</p>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>dotnet</tag>
        <tag>Google Protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VsCode编写和调试.NET Core项目</title>
    <url>/debug-net-core-projects-with-vscode/</url>
    <content><![CDATA[<p>​   本来我还想介绍以下VSCode或者donet core，但是发现都是废话，没有必要，大家如果对这个不了解可以直接google这两个关键字，或者也根本不会看我这边文章。</p>
<p>​   好直接进入主题了，本文的前提条件：</p>
<ol>
<li>已经安装好了.NET Core SDK</li>
<li>已经安装了VSCode</li>
</ol>
<h2>0x00. 磨刀不误砍柴工</h2>
<p>使用VSCode编写dotnet core项目除了其 默认的功能外，我推荐还要安装一些非常有特色，并且有用的扩展，正是因为VSCode的插件机制，才让它变得更加强大，满足我们各式各样的需求</p>
<p>这个是使用VSCode编写C#代码必须的，安装之后在默认打开.cs文件时 还会自动下载调试器等（不过过程可能比较慢，在墙外的原因）<br>
[C# XML注释]: https://marketplace.visualstudio.com/items?itemName=k--kato.docomment<br>
这个可以插件可以快速的帮你添加注释，选择安装吧<br>
[C# Extensions]: https://marketplace.visualstudio.com/items?itemName=jchannon.csharpextensions<br>
这个插件，强烈推荐，可以帮你在建立文件的时候初始化文件内容包括对应的命名空间等</p>
<p>还有一些其他辅助类的，比如EditorConfig,Guildes,One Dark Theme,Project Manager ,Setting Sync等。</p>
<h2>0x01. 新建多项目解决方案</h2>
<p>打开命令行工具，在命令行工具中输入:</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span>:&gt; dotnet new sln -o vscode_tutorial //在当前目录下 创建名为vscode_tutorial</span><br></pre></td></tr></table></figure></p>
<p>以上命令使用dotnet sdk，新建一个解决方案文件，你可以不用命令行手动创建，但是使用<code>dotnet new</code> 可以更加方便的创建dotnet core相关的项目. 顺便提一下使用dotnet new 命令可以新建类库项目，控制台项目，网站项目等等，详细使用可以使用<code>dotnet help new</code> 命令来查看，如下图所示：</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feoku81gjlj20s20g9jsi.jpg" alt></p>
<p>建完解决方案我们要来建立项目了，包括一个控制台项目，一个类库项目和一个单元测试项目</p>
<p>首先建立一个公共的类库项目用于存放我们的业务方法（假设我们在做一个真实的项目）</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span>:&gt; dotnet new classlib -o VSCodeTutorial.Common //在当前目录下新建类库项目VSCodeTutorial.Common</span><br><span class="line"><span class="meta">$</span>:&gt; dotnet sln add VSCodeTutorial.Common/VSCodeTutorial.Common.csproj //将项目添加到解决方案中</span><br></pre></td></tr></table></figure></p>
<p>通过同样的方式，我们建立好控制台项目和单元测试项目</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span>:&gt; dotnet new console -o VSCodeTutorial.ConsoleApp</span><br><span class="line"><span class="meta">$</span>:&gt; dotnet sln add VSCodeTutorial.ConsoleApp/VSCodeTutorial.ConsoleApp.csproj</span><br><span class="line"><span class="meta">$</span>:&gt; dotnet new xunit -o VSCodeTutorial.UnitTest</span><br><span class="line"><span class="meta">$</span>:&gt; dotnet sln add VSCodeTutorail.UnitTest/VSCodeTutorial.UnitTest.csproj</span><br></pre></td></tr></table></figure></p>
<p>这里要注意控制的模板名称叫<code>console</code>而单元测试我们使用<code>xunit</code></p>
<p>这个时候我们的项目结构已经建立完成了，我们用VsCode来打开当前目录来看看完成的项目结构吧，如下图所示</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feokuqo7bmj20da0jldgj.jpg" alt></p>
<p>&lt;!-- more --&gt;</p>
<h2>0x02. 添加项目间的依赖关系</h2>
<p>使用VsCode打开项目文件VSCodeTutorial.ConsoleApp.csproj,在其中添加对Common项目的引用
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>Exe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp1.1<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--添加项目引用--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ProjectReference</span> <span class="attr">Include</span>=<span class="string">"..\VSCodeTutorial.Common\VSCodeTutorial.Common.csproj"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>同样打开VSCodeTutorial.UnitTest.csproj项目文件，在其中添加对Common项目的引用</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp1.1<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nuget 上的类库引用--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.NET.Test.Sdk"</span> <span class="attr">Version</span>=<span class="string">"15.0.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"xunit"</span> <span class="attr">Version</span>=<span class="string">"2.2.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"xunit.runner.visualstudio"</span> <span class="attr">Version</span>=<span class="string">"2.2.0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--本地项目引用--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ProjectReference</span> <span class="attr">Include</span>=<span class="string">"..\VSCodeTutorial.Common\VSCodeTutorial.Common.csproj"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>和上面的那个项目不同，这里有一些额外的依赖，这里可以刚好了解下，如果添加nuget中包的依赖，只需像上面一样使用<code>PackageReference</code>并填入类库名称和版本号即可</p>
<p>添加完依赖后，我们在根目录下使用<code>dotnet restore</code>来初始化以下,也可以再用<code>dotnet build</code>命令来尝试编译一下先</p>
<p>项目依赖关系如图2：</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feol1juewrj20kq07r3yp.jpg" alt></p>
<h2>0x03. 开始编写代码</h2>
<p>​   这个项目的整体需求：我需要打开一个控制台程序，运行时需要用户输入一个小于50的整数，控制台接收到这个数字后计算出这个数字的阶乘，并把结果输出到控制台上。</p>
<p>​   经过简单的思考，我决定把阶乘的实现放到Common项目中，并且对其进行单元测试，测试的代码则放到UnitTest项目中</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feol1juewrj20kq07r3yp.jpg" alt></p>
<p>首先我们把之前生成的项目中不需要的文件给删除掉VsCodeTutorial.Common中的Class1.cs和VSCodeTutorial.UnitTest中的UnitTest1.cs ，当然你也可以留着。</p>
<p>第一步，我们在<code>VsCodeTutorial.Common</code>项目中新建文件<code>MathHelper.cs</code>并在文件中添加如下代码,实现我们的阶乘，代码比较简单就不详述了。</p>
<p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">VSCodeTutorial.Common</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MathHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 阶乘，本例中暂不考虑 溢出的问题哦 Factorial(n) = n*（n-1）*(n-2)...*1;</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="n"&gt;</span>输入参数n<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Factorial</span>(<span class="params"><span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n &lt;=<span class="number">0</span> )&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> System.ArgumentOutOfRangeException(<span class="string">"n"</span>,<span class="string">"参数错误，不能小于等于零"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n*Factorial(n<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第二步，我们要来测试这个代码，看看是否达到了我们的目标，在<code>VSCodeTutorial.UnitTest</code>项目中新建文件<code>MathHelpTest.cs</code>向文件中添加测试<code>Factorial</code>函数的方法，如下所示：</p>
<p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> VSCodeTutorial.Common;</span><br><span class="line"><span class="keyword">using</span> Xunit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">VSCodeTutorial.UnitTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MathHelperTest</span></span><br><span class="line">    &#123;</span><br><span class="line">         [<span class="meta">Fact</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFactorial</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//先测试一下边界的情况</span></span><br><span class="line">            <span class="keyword">int</span> zero = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">var</span> exception = Assert.Throws&lt;ArgumentOutOfRangeException&gt;(() =&gt; MathHelper.Factorial(zero));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> one = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> oneResult = MathHelper.Factorial(one);</span><br><span class="line">            Assert.Equal(<span class="number">1</span>, oneResult);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//再测一下正常的情况</span></span><br><span class="line">            <span class="keyword">int</span> five = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">var</span> fiveResult = MathHelper.Factorial(five);</span><br><span class="line">            Assert.Equal(<span class="number">5</span>*<span class="number">4</span>*<span class="number">3</span>*<span class="number">2</span>*<span class="number">1</span>, fiveResult);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ten = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">var</span> tenResult = MathHelper.Factorial(ten);</span><br><span class="line">            Assert.Equal(<span class="number">10</span>*<span class="number">9</span>*<span class="number">8</span>*<span class="number">7</span>*<span class="number">6</span>*<span class="number">5</span>*<span class="number">4</span>*<span class="number">3</span>*<span class="number">2</span>*<span class="number">1</span>, tenResult);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2>0x04 使用命令行运行单元测试</h2>
<p>​   在使用配置VSCode之前 我还是建议大家先使用命令行来运行一下单元测试，这有利于更好的理解配置内容。</p>
<p>在根目录下输入命令:<code>dotnet test ./VSCodeTutorial.UnitTest/VSCodeTutorial.UnitTest.csproj</code> 查看运行结果：</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feomgnvhrjj20sb0ae3zf.jpg" alt></p>
<p>很差劲会出现编码错误，而且这个错误暂时还没有办法解决..但是我猜单元测试通过了，这个问题相信在后续的版本中肯定会得到解决，事实上在Console项目中是可以解决输出乱码问题的。不过可喜的是在VSCode中运行单元测试是没有乱码的问题的😁。</p>
<h2>0x05 使用VSCode 运行单元测试</h2>
<p>首先当你打开项目的时候，VSCode 可能已经建议你配置一下相关的内容，如下图所示:</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feomnmm2kwj21ah03bt96.jpg" alt></p>
<p>选择Yes, 会帮你新建这个一个目录和两个文件，luanch.json是用来执行调试程序的配置，而tasks.json则是配置各种任务的，其中运行单元测试就是一种任务。</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feomqq26tyj207u09m74l.jpg" alt></p>
<p>首先我们打开<code>tasks.json</code> ，默认已经添加好了一个任务，如下所示</p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"dotnet"</span>, <span class="comment">//全局命令，即所有的任务都使用这个命令，也可以在各个任务中设置</span></span><br><span class="line">    <span class="attr">"isShellCommand"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"args"</span>: [],</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"taskName"</span>: <span class="string">"build"</span>, <span class="comment">//任务名称 当设置了主的command 之后这个taskName也会作为一个命令参数</span></span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceRoot&#125;\\VSCodeTutorial.ConsoleApp\\VSCodeTutorial.ConsoleApp.csproj"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"isBuildCommand"</span>: <span class="literal">true</span>, <span class="comment">//一个解决方案只能设置一个编译任务，多设置了也是白搭，当然也能执行，只是不能利用快捷方式运行了</span></span><br><span class="line">            <span class="attr">"problemMatcher"</span>: <span class="string">"$msCompile"</span><span class="comment">//C#项目的problemMatcher</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>默认使用了全局命令行，这样可以在任务中省去配置dotnet命令，但是如果你的解决方案中包括多个项目需要不同的命令行编译方式，如果前端网站使用grunt打包资源，那么顶部应该留空，而在各个子任务中配置command。还有如果存在多个编译项目时（如客户端和服务端在一个解决方案时），也应该把command配置在子任务中，并设置个性化的taskName以便区别，所以我推荐把command设置在任务中，下面我们修改一下以上代码，并添加一个运行单元测试的人。</p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="attr">"isShellCommand"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"args"</span>: [],</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"taskName"</span>: <span class="string">"build_console"</span>,</span><br><span class="line">            <span class="attr">"command"</span>:<span class="string">"dotnet"</span></span><br><span class="line">            <span class="string">"args"</span>: [</span><br><span class="line">                <span class="string">"build"</span>, <span class="comment">//组成dotnet build</span></span><br><span class="line">                <span class="comment">//设置需要编译的项目，如果存在多个启动项目可以设置成解决方案文件（.sln）,这里只有一个项目所以设置运行项目也可以</span></span><br><span class="line">                <span class="string">"$&#123;workspaceRoot&#125;\\VSCodeTutorial.ConsoleApp\\VSCodeTutorial.ConsoleApp.csproj"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"isBuildCommand"</span>: <span class="literal">true</span>, <span class="comment">//设置是否编译项目</span></span><br><span class="line">            <span class="attr">"problemMatcher"</span>: <span class="string">"$msCompile"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"taskName"</span>: <span class="string">"UnitTest"</span>,</span><br><span class="line">            <span class="attr">"command"</span>:<span class="string">"dotnet"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"test"</span>,<span class="comment">//组成dotnet test 命令</span></span><br><span class="line">                <span class="string">"$&#123;workspaceRoot&#125;\\VSCodeTutorial.UnitTest\\VSCodeTutorial.UnitTest.csproj"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"isTestCommand"</span>: <span class="literal">true</span>,<span class="comment">//设置为单元测试项目</span></span><br><span class="line">            <span class="attr">"problemMatcher"</span>: <span class="string">"$msCompile"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的代码中，我将command命令移到了任务中，并给每个任务起了一个好识别的名字，现在这里一个有2个任务了</p>
<p>第一个任务<code>build_console</code>  运行时 会编译<code>VSCodeTutorial.ConsoleApp</code>项目及其依赖的项目</p>
<p>第二个任务<code>UnitTest</code>则是单元测试项目，运行<code>dotnet test</code>命令，这里有个特殊的设置就是<code>&quot;isTestCommand&quot;: true</code> 标识为测试项目后可以通过快捷方式运行该命令</p>
<p>任务建好了，我们来运行任务把，windows按下 ctrl+shift+p,在弹出的对话框中输入:task 过滤命令可以得到以下的选项</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feotyfpchzj20ig0aqmy1.jpg" alt></p>
<p>选择<code>任务:运行测试任务</code> 这条来运行我们之前编写好的单元测试项目，可以看到运行成功的情况，如下图所示</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feou0lpbsej20y708fzlr.jpg" alt></p>
<p>这里中文显示正常，没有乱码哦，但是我不知道是什么原因..就是这么神奇</p>
<p>对于经常执行的任务，可以通过设置键盘快捷方式来方便调用，可以看到我分别设置了ctrl+shift+t 运行测试任务ctrl+shift+b 运行编译任务，ctrl+shift+r 启动选择任务，大家可以根据自己的喜好来设置。</p>
<h2>0x06 开始编写控制台代码</h2>
<p>打开VSCodeTutorial.ConsoleApp项目中的Program.cs文件，修改其中的代码，如下所示</p>
<p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> VSCodeTutorial.Common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">VSCodeTutorial.ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"请输入一个小于10的数字,回车结束:"</span>);</span><br><span class="line">                <span class="keyword">string</span> input_str = Console.ReadLine();</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">int</span>.TryParse(input_str ,<span class="keyword">out</span> <span class="keyword">var</span> input_int))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(input_int&gt;<span class="number">0</span> &amp;&amp; input_int&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">                       <span class="keyword">int</span> result =  MathHelper.Factorial(input_int);</span><br><span class="line">                       Console.WriteLine(<span class="string">"你输入的数字是&#123;0&#125;,它的阶乘结果是&#123;1&#125;,退出请按ctrl+c,按其他键再试一次"</span>,input_int,result);</span><br><span class="line">                       Console.ReadKey();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"输入的字符不是有效的数字"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码比较 简单，就不做解释了，我们直接来看运行的结果，这里顺便提一下啊，在我们之前做的众多工作之后，我们这里编写代码有美美哒的智能提示哦，如下图所示：</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feoudwzdenj20qe0gu40h.jpg" alt></p>
<p>好，再根目录下输入以下命令运行ConsoleApp</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span>:&gt; dotnet run -p ./VSCodeTutorial.ConsoleApp/VSCodeTutorial.ConsoleApp.csproj</span><br></pre></td></tr></table></figure></p>
<p>也可以在<code>VSCodeTutorial.ConsoleApp</code> 目录下直接运行<code>dotnet run</code> 命令即可.</p>
<p>结果运行还是乱码中，但是这次我们有办法解决，我们在控制台代码中添加一句代码即可<code>onsole.OutputEncoding = Encoding.UTF8</code></p>
<p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> VSCodeTutorial.Common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">VSCodeTutorial.ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.OutputEncoding = Encoding.UTF8; <span class="comment">// 设置控制台编码</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"请输入一个小于10的数字,回车结束:"</span>);</span><br><span class="line">                <span class="keyword">string</span> input_str = Console.ReadLine();</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">int</span>.TryParse(input_str ,<span class="keyword">out</span> <span class="keyword">var</span> input_int))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(input_int&gt;<span class="number">0</span> &amp;&amp; input_int&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">                       <span class="keyword">int</span> result =  MathHelper.Factorial(input_int);</span><br><span class="line">                       Console.WriteLine(<span class="string">"你输入的数字是&#123;0&#125;,它的阶乘结果是&#123;1&#125;,退出请按ctrl+c,按其他键再试一次"</span>,input_int,result);</span><br><span class="line">                       Console.ReadKey();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"输入的字符不是有效的数字"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用dotnet build编译后，再次运行Console项目看到了我们期望的界面</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feoupo8qinj20pv02rjre.jpg" alt></p>
<p>程序运行正确，当然了，我们都跑过单元测试了不是。。</p>
<h2>0x07 开始调试程序了</h2>
<p>如下图提示操作</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feouu8xzrpj21720g5jts.jpg" alt></p>
<p>终于轮到我们之前生成的launch.json文件出场了，先来看下它的代码，代码中已经添加了配置的说明</p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">".NET Core Launch (console)"</span>, <span class="comment">//配置名称 可以改成更好识别的名字</span></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"coreclr"</span>, <span class="comment">// .net core类型的调试</span></span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>, <span class="comment">//调试方式 不用改</span></span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"build"</span>, <span class="comment">// 前置任务，这里是编译，但是默认的编译任务，已经被我改了名字了，所以这里要改一下哦</span></span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;\\VSCodeTutorial.ConsoleApp\\bin\\Debug\\netcoreapp1.1\\VSCodeTutorial.ConsoleApp.dll"</span>, <span class="comment">//需要调试的DLL的位置 </span></span><br><span class="line">            <span class="attr">"args"</span>: [], <span class="comment">//额外的参数</span></span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;\\VSCodeTutorial.ConsoleApp"</span>, <span class="comment">//工作目录</span></span><br><span class="line">            <span class="attr">"console"</span>: <span class="string">"internalConsole"</span>, <span class="comment">//控制台模式，这里是内嵌控制台，一会要改成外置的，不然没法交互输入</span></span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"internalConsoleOptions"</span>: <span class="string">"openOnSessionStart"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">".NET Core Attach"</span>, <span class="comment">//名称</span></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"coreclr"</span>, <span class="comment">//类型</span></span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"attach"</span>, <span class="comment">//使用附加的方式</span></span><br><span class="line">            <span class="attr">"processId"</span>: <span class="string">"$&#123;command:pickProcess&#125;"</span> <span class="comment">//附加的进程ID</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>根据实际情况，需要对上面的配置进行以下变更，变更的部分已经添加了注释，附加调试不是本文的重点，就不改了</p>
<p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"调试ConsoleApp"</span>, <span class="comment">//修改下命令</span></span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"coreclr"</span>,</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="string">"preLaunchTask"</span>: <span class="string">"build_console"</span>, <span class="comment">//修改前置任务名和task.json中配置一致</span></span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;\\VSCodeTutorial.ConsoleApp\\bin\\Debug\\netcoreapp1.1\\VSCodeTutorial.ConsoleApp.dll"</span>,</span><br><span class="line">            <span class="string">"args"</span>: [],</span><br><span class="line">            <span class="string">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;\\VSCodeTutorial.ConsoleApp"</span>,</span><br><span class="line">            <span class="string">"externalConsole"</span>:<span class="literal">true</span>, <span class="comment">//使用外置的控制台</span></span><br><span class="line">            <span class="string">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"internalConsoleOptions"</span>: <span class="string">"openOnSessionStart"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">".NET Core Attach"</span>,</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"coreclr"</span>,</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"attach"</span>,</span><br><span class="line">            <span class="string">"processId"</span>: <span class="string">"$&#123;command:pickProcess&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改完成后，我们点击运行按钮可以开始调试了，调试的方式和使用VS是一致的，快捷键为F5 F10 F11</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feov8e1scqj20rm0gaq58.jpg" alt></p>
<p>简直太强大了！</p>
<h2>0x08 多项目启动调试</h2>
<p>有时候我们会同时在一个解决方案中 同时启动两个项目来调试，那么怎么配置呢，其实很简单，另外一个项目和之前的一样各自配置一个编译的Task（当然最好是两个项目使用.sln来统一编译），然后各配置一个launch配置，然后使用<code>compounds</code> 配置来同时启动即可，示例如下</p>
<p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        <span class="string">"HelloRpcClientLaunch"</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"HelloRpcServer"</span>,</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"coreclr"</span>,</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="string">"preLaunchTask"</span>: <span class="string">"buildServer"</span>,</span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;\\src\\sample\\HelloRpc\\HelloRpc.Server\\bin\\Debug\\netcoreapp1.1\\HelloRpc.Server.dll"</span>,</span><br><span class="line">            <span class="string">"args"</span>: [],</span><br><span class="line">            <span class="string">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;\\src\\sample\\HelloRpc\\HelloRpc.Server"</span>,</span><br><span class="line">            <span class="string">"externalConsole"</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="string">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"internalConsoleOptions"</span>: <span class="string">"openOnSessionStart"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"HelloRpcClientLaunch"</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"HelloRpcClient"</span>,</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"coreclr"</span>,</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="string">"preLaunchTask"</span>: <span class="string">"buildClient"</span>,</span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;\\src\\sample\\HelloRpc\\HelloRpc.Client\\bin\\Debug\\netcoreapp1.1\\HelloRpc.Client.dll"</span>,</span><br><span class="line">            <span class="string">"args"</span>: [],</span><br><span class="line">            <span class="string">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;\\src\\sample\\HelloRpc\\HelloRpc.Client"</span>,</span><br><span class="line">            <span class="string">"externalConsole"</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="string">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"internalConsoleOptions"</span>: <span class="string">"openOnSessionStart"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="string">"compounds"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Server/Client"</span>,</span><br><span class="line">            <span class="string">"configurations"</span>: [<span class="string">"HelloRpcServer"</span>, <span class="string">"HelloRpcClient"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时候就会有个Sever/Client的调试选项供选择了，如图:</p>
<p><img src="http://ww1.sinaimg.cn/large/697065c1gy1feovdxuj89j207g04daa0.jpg" alt></p>
<p>好了，让我们一起使用VSCode来编写.NetCore项目吧</p>
<p>本文示例代码 <a href="https://github.com/xuanye/VSCodeTutorial" target="_blank" rel="noopener">https://github.com/xuanye/VSCodeTutorial</a></p>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>dotnet</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript React Sample</title>
    <url>/typescript-react-tutorial/</url>
    <content><![CDATA[<p>注：本文的原始资料和示例来自<a href="https://github.com/ServiceStackApps/typescript-redux" target="_blank" rel="noopener">ServiceStackApps/typescript-redux</a> ,根据我的实际情况，做了一些调整，详见文内说明，感谢原作者的无私分享。</p>
<p>本文通过设置，运行和探索Javascript一些高级的技术栈：</p>
<ul>
<li><a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> - 具备类型的Javascript超集, 提供一些高级别的语法特性（注：真正的面向对象等）和部分ES5的支持</li>
<li><a href="https://github.com/typings/typings" target="_blank" rel="noopener">typings</a> - 用于搜索和安装TypeScript语法定义的包管理器</li>
<li><a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React</a> - 简单，高性能的javascript UI层框架，利用虚拟DOM和应答数据流</li>
<li><a href="https://github.com/rackt/redux" target="_blank" rel="noopener">Redux</a> - javascript 应用程序的状态管理框架，非常适合和React搭配使用</li>
</ul>
<p>提供开发大型javascript应用程序强大的基础，并改进在Visual Studio中的开发体验（注：事实上，并非一定在Visual Studio中，其他的编辑器也是可以的）</p>
<p>本文中涉及到的代码可在此处查看：<a href="https://github.com/xuanye/typescript-redux-sample" target="_blank" rel="noopener">https://github.com/xuanye/typescript-redux-sample</a></p>
<p>&lt;!-- more --&gt;</p>
<h2>安装 TypeScript</h2>
<p>如果你还没有从<a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">typescriptlang.org</a>下载安装最新版本的Typescript。Visual Studio的用户可以直接使用下面的链接快速安装：</p>
<ul>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48593" target="_blank" rel="noopener">VS.NET 2015</a></li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48739" target="_blank" rel="noopener">VS.NET 2013</a></li>
</ul>
<blockquote>
<p>本文已经默认你已经安装了TypeScript v1.8 或更高的版本</p>
</blockquote>
<p>（注：原文中使用JSPM作为nodejs的包管理器，本文中我仍然使用npm来代替，原文中使用system作为模块加载器，本文中用webpack代替）</p>
<h2>创建 一个 ASP.NET Web 项目（如果你的编辑器不是VS.NET，那就直接跳过到配置TypeScript）</h2>
<p>虽然安装了 TypeScript VS.NET 扩展提供了，一个新的 <strong>HTML Application with TypeScript</strong> 项目模板，但是你最好还是通过创建一个 <strong>Empty ASP.NET Web Application</strong> 项目并配置项目支持Typescript -- 这比把它从Typescript转换成 ASP.NET Web项目要方便的多。.</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/01-empty-web-project.png" alt="新建项目模板"></p>
<p>在接下来的界面 选择 <strong>Empty</strong> 模板来创建一个空模板:</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/02-empty-web-template.png" alt="新建空网站"></p>
<h3>启用 TypeScript</h3>
<p>在项目的右键菜单<code>Add &gt; TypeScript File</code>中添加一个 <strong>TypeScript File</strong> 文件就会自动配置的你Web项目 <code>.csproj</code> 文件，加上一些启用TypeScript 支持必须的导入项：</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/03-add-typescript-file.png" alt="新建Typescript文件"></p>
<p>配置的时候会弹出对话框:</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/04-typescript-confirmation-dialog.png" alt="对话框"></p>
<p>点击 <strong>No</strong> 来跳过使用Nuget对话框来安装Typing 定义文件，因为我们后面会使用<a href="https://github.com/typings/typings" target="_blank" rel="noopener">typings Package Manager</a> 来代替它安装定义文件.</p>
<h3>配置 TypeScript</h3>
<p>在项目中第一激活TypeScript需要配置一些选项。VS.NET 2015 可以通过项目属性中的<code>Typescript Build</code>配置节来配置TypeScript的编译选项，这些信息将直接配置到VS的**.csproj**项目文件中，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/05-configure-typescript-vs.png" alt="TypeScript Properties Page"></p>
<p>不过我们更倾向于使用<code>tsconfig.json</code>的一个文本文件来配置这些选项，而且这个配置文件可以更好的适配到其他的编辑器/IDE中，更利于知识的分享，减少一些不必要的问题。</p>
<p>在项目上右键<code>Add &gt; New Item</code> 在打开的对话框中搜索 <strong>typescript</strong>，并选择 <strong>TypeScript JSON Configuration File</strong>  文件模板 来添加<code>tsconfig.json</code> 到你的项目中：</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/05-add-tsconfig.png" alt="add-tsconfig"></p>
<p>这会添加一个基础的<code>tsconfig.json</code>配置文件到你的项目中，这些配置会替换掉你之前在<code>.csproj</code> 项目文件中配置的变量</p>
<h3>tsconfig for webpack, React and JSX</h3>
<p>为了更快的进入状态，你可以复制下面的配置信息并替换你的<code>tsconfig.json</code> 文件内容：</p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"noEmitOnError"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"removeComments"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"typings"</span>,</span><br><span class="line">    <span class="string">"node_modules"</span>,</span><br><span class="line">    <span class="string">"wwwroot"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>和默认的 <code>tsconfig.json</code> 有所不同的是 :</p>
<ul>
<li><code>target:es5</code> - 将编译的javascript设置成es5版本</li>
<li><code>module:commonjs</code> - 使用commonjs作为模块加载器（事实上无所谓，我们最终使用webpack打包）</li>
<li><code>jsx:react</code> - 将 <code>.tsx</code> 文件转换成 React的 JavaScript 语法，而不是jsx语法。</li>
<li><code>experimentalDecorators:true</code> -启用ES7装饰器语法支持，事实上这个语法规则还没有确定，所以本文中弃用了</li>
<li><code>exclude:node_modules</code> - 排除一些文件夹，不要去编译这些文件夹下面的typescript代码。</li>
</ul>
<blockquote>
<p><a href="https://github.com/Microsoft/TypeScript/issues/6782#issuecomment-187820198" target="_blank" rel="noopener">VS 2013 不支持 tsconfig.json</a>
但是不打紧，我们最终使用webpack打包代码，而不是vs本身，所以。。你懂的</p>
</blockquote>
<h2>安装 webpack</h2>
<p>Webpack 是德国开发者 Tobias Koppers 开发的模块加载器，它和传统的commonjs和requirejs的不同之处，在于，它在运行时是不需要它本身的，js和其他一些资源文件（css，图片等）在运行之前就已经并合并到了一起，并且它的很多插件让你可以在做很多预编译的事情（比如本文中的将typescript编译成es5版本的javascript）。</p>
<p>事实上，我并非对它很熟悉，也只是参与了很多的资料，：） 你可以从下面的这些链接获取到一些有用的信息：</p>
<ul>
<li><a href="https://webpack.github.io" target="_blank" rel="noopener">官网</a></li>
<li><a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="noopener">webpack入门指南</a></li>
<li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/quick-start/react-webpack.html" target="_blank" rel="noopener">Typescript 中文手册中的相关介绍</a></li>
</ul>
<p>安装 webpack本身非常方便，只要使用npm命令全局安装就可以了：</p>
<pre><code>C:\proj&gt; npm install webpack -g
</code></pre>
<p>等待执行完成即可。</p>
<h3>初始化项目</h3>
<p>在项目目录下执行 npm init 为项目创建一个package.json文件，以便我们后续安装一些相关的包到本地</p>
<pre><code>C:\proj&gt; npm init
</code></pre>
<h3>配置webpack</h3>
<p>使用webpack 打包typescript代码，并编译成javascript需要安装一些插件，来安装一下:</p>
<pre><code>C:\proj&gt; npm install ts-loader source-map-loader --save-dev
</code></pre>
<p>初始化项目的文件夹结构，之所以在这里说，是因为我们下面的配置文件会使用到对应的目录地址，建成后的目录结构如图所示：</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/06-folder-list.png" alt="06-folder-list.png"></p>
<p>其中
<code>source</code> 目录用于存放Typescript源代码文件(<strong>本例中为了路径引用方便，我将HTML文件也放到里该目录下，实际项目中不用这么做</strong>)
<code>wwwroot/js</code> 用于存放生成js文件和引用的第三方类库（jquery,zepto等等）
本例中，我将reactjs的js文件放到<code>wwwroot/js/lib</code>目录中，并在页面上单独引用。</p>
<p>完成后，在项目目录添加一个<code>webpack.config.js</code>文件，该文件是webpake的配置文件，将以下代码复制到文件中：
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: "./source/index.ts",</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: "./wwwroot/js/[name].js",</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Enable sourcemaps for debugging webpack's output.</span></span><br><span class="line">    devtool: "source-map",</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">// Add '.ts' and '.tsx' as resolvable extensions.</span></span><br><span class="line">        extensions: ["", ".webpack.js", ".web.js", ".ts", ".tsx", ".js"]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            <span class="comment">// All files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'.</span></span><br><span class="line">            &#123; test: /\.tsx?$/, loader: "ts-loader" &#125;</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        preLoaders: [</span><br><span class="line">            <span class="comment">// All output '.js' files will have any sourcemaps re-processed by 'source-map-loader'.</span></span><br><span class="line">            &#123; test: /\.js$/, loader: "source-map-loader" &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// When importing a module whose path matches one of the following, just</span></span><br><span class="line">    <span class="comment">// assume a corresponding global variable exists and use that instead.</span></span><br><span class="line">    <span class="comment">// This is important because it allows us to avoid bundling all of our</span></span><br><span class="line">    <span class="comment">// dependencies, which allows browsers to cache those libraries between builds.</span></span><br><span class="line">    externals: &#123;</span><br><span class="line">        "react": "React",</span><br><span class="line">        "react-dom": "ReactDOM"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>关于webpack.config.js中的详细说明，可参考<a href="http://webpack.github.io/docs/configuration.html" target="_blank" rel="noopener">官方的说明</a>，其中<code>externals</code>配置节是用于排除，单独引用的reactjs类库，不打包进生成的文件，<code>entry</code>入口这里是示例，在下面的章节会替换成实际的内容。</p>
<h3>安装 React</h3>
<p>通过npm 安装 react到本地，你可以可以手动到官网下载最新的版本，并复制到<code>wwwroot/js/lib</code> 目录下:</p>
<pre><code>C:\proj&gt; npm install react --save
</code></pre>
<p>从 v0.14 开始 React 将dom操作分离到一个单独的包中，我们也来安装一下:</p>
<pre><code>C:\proj&gt; npm install react-dom --save
</code></pre>
<p>手动将react库 从<code>node_modules</code> 复制到 <code>wwwroot/js/lib</code> 目录中，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/06-folder-react.png" alt="06-folder-react"></p>
<p>我们实际使用到的文件是<code>react.min.js</code>和<code>react-dom.min.js</code> 。</p>
<h3>安装 typings -  TypeScript definitions的管理器</h3>
<p>为了能够开启Typescript的自动完成和类型检查支持，我们需要下载一些第三方类库的类型定义文件，最好的方式是通过安装<a href="https://github.com/typings/typings" target="_blank" rel="noopener">typings</a>
可以通过npm来全局安装它:</p>
<pre><code>C:\proj&gt; npm install typings -g
</code></pre>
<p>现在我们可以通过 <code>typings</code> 命令来安装我们需要的TypeScript 类型定义文件了。</p>
<h4>Install React Type Definitions</h4>
<pre><code>C:\proj&gt; typings install react --ambient --save
</code></pre>
<h4>Install React DOM Type Definitions</h4>
<pre><code>C:\proj&gt; typings install react-dom --ambient --save
</code></pre>
<p>The <code>--ambient</code> 标志是让 <strong>typings</strong> 在社区版本中查找 <code>.d.ts</code> TypeScript 定义文件，它们都在<a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener">DefinitelyTyped</a>
<code>--save</code> 标志是让这些安装的信息保存到<code>typings.json</code>配置文件中</p>
<p>安装完成后你打开文件 <code>typings/browser.d.ts</code> 可以看到:</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path="main\ambient\react-dom\react-dom.d.ts" /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path="main\ambient\react\react.d.ts" /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在其他文件中使用这些类型定义文件，只需要引用<code>typings/browser.d.ts</code>文件即可：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path='../typings/browser.d.ts'/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2>开始 用 TypeScript 编码了</h2>
<p>太棒了! 到这里我们终于有了一个可以工作的Typescript开发环境的，可以开始编写TypeScript 和 React代码，并看看它们是否正常工作，接下来的代码按照我们之前的约定，在<code>./source</code>目录添加你的代码，好了，我们从一个最简单的React 示例开始吧:</p>
<h2><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/sample01" target="_blank" rel="noopener">Example 1 - HelloWorld</a></h2>
<p>在第一个示例中，我们要编写一个最简单能正常运行的应用，气死就是 <code>Helloworld</code>
在 <code>source</code> 目录下新建 <code>example01/</code> 文件夹，并添加第一个 TypeScript 文件 :</p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/sample01/app.tsx" target="_blank" rel="noopener">app.tsx</a></h4>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path='../../typings/browser.d.ts'/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HelloWorld <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;div&gt;Hello, World!&lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;HelloWorld/</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>));</span><br></pre></td></tr></table></figure></p>
<p>这里我们来一起看一看，这个代码是怎么运行的：</p>
<p>先来看看第一行代码：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path='../../typings/browser.d.ts'/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>使用了 <a href="http://blogs.msdn.com/b/webdev/archive/2007/11/06/jscript-intellisense-a-reference-for-the-reference-tag.aspx" target="_blank" rel="noopener">Reference 标签</a>来引用所有的之前通过<strong>typings</strong>安装的 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener">Definitely Typed</a>  文件</p>
<p>看一下 <code>import</code> 语句:</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br></pre></td></tr></table></figure></p>
<p>导入之前使用 <code>npm</code> 命令安装的Javascript模块 （注：Typescript中可以使用第三方Javascript库，但是必须提供类型定义文件，没有的话需要写一个）, <code>*</code> 号表示导入整个模块，如果你希望只导入一个模块的话 ，你可以这么写：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br></pre></td></tr></table></figure></p>
<p>唯一的例外是在 <code>.tsx</code>文件中，必须导入 <strong>React</strong>模块，否则在使用JSX代码块时会发生编译错误：</p>
<pre><code>return &lt;div&gt;Hello, World!&lt;/div&gt;; //compile error: Cannot find name React
</code></pre>
<p>下面的代码是创建一个组件（component）继承至 React的<code>Component&lt;TProps,TState&gt;</code>基类：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HelloWorld <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br></pre></td></tr></table></figure></p>
<p>当我们的组件（Components） 不包含任何特定的属性（ property）和状态（state）时，我们可以使用 <code>any</code> 类型来忽略一些特殊的类型
When Components doesn't have any properties or state they can use <code>any</code> to ignore specifying types.</p>
<p>我们之前在TypeScript配置中已经启用了jsx语法支持，我们可以在**.tsx** 使用jsx语法了（注：和配置没啥关系，配置只是用来编译生成代码的，tsx天生就是支持jsx语法的）</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;Hello, World!&lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>最后一行是一个标准的React代码，它意思是在<code>#content</code> DOM 节点中输出我们的 <code>HelloWorld</code> 组件（component）的实例：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">ReactDOM.render(&lt;HelloWorld/&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>));</span><br></pre></td></tr></table></figure></p>
<p>现在，所有剩下的就是建立一个HTML页面来容纳我们的刚刚编写的组件啦（component）：</p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/sample01/index.html" target="_blank" rel="noopener">index.html</a></h4>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TypeScript + React + Redux<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../wwwroot/js/lib/react/react.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../wwwroot/js/lib/react/react-dom.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../wwwroot/js/sample02.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>index.html</strong> 是一个在ASP.NET中预定义的默认文档，用来让我们可以浏览之前编写的组件效果，它被安排在各个示例文件夹中，像我之前说的那样，并不是非要放在这里，只是为了更好的组织url。上述的 index.html在目录<code>/example01/</code>中。</p>
</blockquote>
<p>首先，我们必须引入 <code>react.min.js</code> 和 <code>react-dom.min.js</code> 文件，之前有谈到过，webpack.config.js配置中设置react本身不被打包，而是单独引用。一些通用的第三方类库，为了更好的使用CDN和缓存，可以使用单独引用的方式，当然也可以打包在一起，哪种方式要看实际的情况。</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../wwwroot/js/lib/react/react.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../wwwroot/js/lib/react/react-dom.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>同时我们引入了一个 <code>sample02.js</code>的文件，这有点奇怪，因为这个文件我们并没有创建，它这时确实也并不存在</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../wwwroot/js/sample02.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这就是我们接下来要处理的问题，之前我们讲到我会使用 <code>webpack</code> 来 代替默认使用 <code>VS.NET 2015</code> 作为 <code>Typescript</code> 的编译器，<code>sample02.js</code>文件其实是 <code>webpack</code> 自动生成的文件。这个时候它不存在，是因为我们还没有配置好它，让我们重新打开<code>webpack.config.js</code>文件，看看里面的内容：</p>
<p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">   entry: &#123;</span><br><span class="line">        sample01: "./source/sample01/app.tsx" //将示例1的app.tsx文件作为入口文件</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: "./wwwroot/js/[name].js",</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Enable sourcemaps for debugging webpack's output.</span></span><br><span class="line">    devtool: "source-map",</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">// Add '.ts' and '.tsx' as resolvable extensions.</span></span><br><span class="line">        extensions: ["", ".webpack.js", ".web.js", ".ts", ".tsx", ".js"]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            <span class="comment">// All files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'.</span></span><br><span class="line">            &#123; test: /\.tsx?$/, loader: "ts-loader" &#125;</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        preLoaders: [</span><br><span class="line">            <span class="comment">// All output '.js' files will have any sourcemaps re-processed by 'source-map-loader'.</span></span><br><span class="line">            &#123; test: /\.js$/, loader: "source-map-loader" &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// When importing a module whose path matches one of the following, just</span></span><br><span class="line">    <span class="comment">// assume a corresponding global variable exists and use that instead.</span></span><br><span class="line">    <span class="comment">// This is important because it allows us to avoid bundling all of our</span></span><br><span class="line">    <span class="comment">// dependencies, which allows browsers to cache those libraries between builds.</span></span><br><span class="line">    externals: &#123;</span><br><span class="line">        "react": "React",</span><br><span class="line">        "react-dom": "ReactDOM"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>和之前的内容相比，只修改了 <code>entry</code> 配置节，将 <code>./source/sample01/app.tsx</code> 作为一个入口文件，并命名为 <code>sample01</code>, 而输出的目录则是 <code>./wwwroot/js/</code> 并且以入口的名字作为文件名 <code>[name].js</code>,所以在 <code>index.html</code> 我引入的文件 <code>../../wwwroot/js/sample02.js</code></p>
<p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    sample01: "./source/sample01/app.tsx" //将示例1的app.tsx文件作为入口文件</span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">    filename: "./wwwroot/js/[name].js",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>回到 <code>index.html</code> 文件中</p>
<p>最后添加一个 <code>&lt;div/&gt;</code>  空标签元素，并设置 <code>id</code> 为 <code>content</code> 用来输出React组件。</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>现在所有的工作做完后，我们打开浏览器直接访问<code>/example01/</code>来查看效果了 -- 哈哈，我们第一个可运行的React应用！</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/preview-01.png" alt="此处输入图片的描述"></p>
<blockquote>
<p>Demo:<a href="http://xuanye.github.io/typescript-react/source/sample01/">/typescript-react/example01/</a></p>
</blockquote>
<p><strong>提示</strong>： 我使用了 <code>VS.NET 2015</code> 作为开发工具，所以自带httpserver ，如果你并不是用<code>VS.NET 2015</code> ，那么可以任意的 <code>http server</code> 工具来查看示例。</p>
<p>如使用node 的 <code>http-server</code>包
全局安装：</p>
<pre><code>C:\proj&gt; npm install http-server -g
</code></pre>
<p>然后在项目的根目录运行：</p>
<pre><code>C:\proj&gt; http-server
</code></pre>
<p>打开浏览器 查看 ：<code>http://localhost:8080/source/sample01/index.html</code></p>
<h2><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example02" target="_blank" rel="noopener">Example 2 - 模块化 HelloWorld</a></h2>
<p>在第二个示例中，我们将尝试通过移动<code>&lt;HelloWorld /&gt;</code>的实现到独立的文件中来模块化我们的应用：</p>
<h3><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example02/helloworld.tsx" target="_blank" rel="noopener">helloworld.tsx</a></h3>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloWorld <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;div&gt;Hello world!It<span class="string">'s from Helloword Component.&lt;/div&gt;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>为了让HelloWorld组件在外部可以被调用，我们需要使用 <code>export</code> 关键字。我们同样可以使用 <code>default</code> 关键字来定义一个<strong>默认导出</strong>（<strong>default export</strong>），让使用者导入的时候更加方便，并可以重命名称它们喜欢的名字，然后我们需要移除在<strong>app.tsx</strong>中的HelloWorld实现，并用import 新组件的方式代替它：</p>
<h3><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example02/app.tsx" target="_blank" rel="noopener">app.tsx</a></h3>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">/ &lt;reference path=<span class="string">'../../typings/browser.d.ts'</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;HelloWorld&#125; <span class="keyword">from</span> <span class="string">"./helloworld"</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;HelloWorld/&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>));</span><br></pre></td></tr></table></figure></p>
<p>如果我们使用<strong>默认导出</strong>（<strong>default export</strong>），那么导入的部分就是这样的：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  HelloWorld  <span class="keyword">from</span> <span class="string">'./HelloWorld'</span>;</span><br></pre></td></tr></table></figure></p>
<p>这个示例的改动非常小，我们来看一下，我们的程序是否还能正常运行。</p>
<blockquote>
<p>注：这里要注意我们仍需在webpack.config.js中添加 entry ，后续的示例不再重复了</p>
</blockquote>
<p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    sample01: "./source/sample01/app.tsx",</span><br><span class="line">    sample02: "./source/sample02/app.tsx"</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>[<img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/preview-02.png" alt>]</p>
<blockquote>
<p>Demo: <a href="http://xuanye.github.io/typescript-react/source/example02/">/typescript-redux/example02/</a></p>
</blockquote>
<h2><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example03" target="_blank" rel="noopener">Example 3 - 创建一个有状态的组件</a></h2>
<p>现在我们已经是Helloworld界的大师了，应该升级下我们的游戏规则，创建一些更高级的有状态的组件了，毕竟不能100级了，还在新手村。</p>
<p>我们要做的第一件伟大的事情就是计数器，是的，我们把示例中的 <code>helloword</code> 文件修改文件名为 <code>counter</code> 并把内容修改如下：</p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example03/counter.tsx" target="_blank" rel="noopener">counter.tsx</a></h4>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Counter <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; counter: <span class="number">0</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;label&gt;Counter: &lt;<span class="regexp">/label&gt;&lt;b&gt;#&#123;this.state.counter&#125;&lt;/</span>b&gt;</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;e =&gt; this.incr(1) &#125;&gt;INCREMENT&lt;/</span>button&gt;</span><br><span class="line">                &lt;span style=&#123;&#123; padding: <span class="string">"0 5px"</span> &#125;&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">this</span>.incr(<span class="number">-1</span>) &#125;&gt;DECREMENT&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    incr(by:<span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; counter: <span class="keyword">this</span>.state.counter + by &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好像没什么惊喜，我们在页面中添加了一个计数器，通过按钮 increment / decrement 来改变它的值， 实际使用的是React内置的<code>setState()</code>方法:</p>
<p><a href="http://xuanye.github.io/typescript-react/source/example03/"><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/preview-03.png" alt></a></p>
<blockquote>
<p>Demo: <a href="http://xuanye.github.io/typescript-react/source/example03/">/typescript-redux/example03/</a></p>
</blockquote>
<h3>使用 Redux</h3>
<p>使用 <code>setState()</code> 是在组件中改变状态的老办法了，现在比较流行的是使用 <a href="https://github.com/rackt/redux" target="_blank" rel="noopener">Redux</a>，在使用之前，我们需要安装一下:</p>
<pre><code>C:\proj&gt; npm install redux --save
</code></pre>
<p>同样也要安装它的定义文件 Type Definitions:</p>
<pre><code>C:\proj&gt; typings install redux --ambient --save
</code></pre>
<h2><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example04" target="_blank" rel="noopener">Example 4 - 使用 Redux 改造计数器</a></h2>
<p>如果你对Redux 还不太熟悉，现在是开始的时候,下面是一些相关的问题（不过下面的网站在天朝基本都打不开）：</p>
<ul>
<li><a href="http://rackt.org/redux/" target="_blank" rel="noopener">Redux docs</a></li>
<li><a href="https://egghead.io/series/getting-started-with-redux" target="_blank" rel="noopener">30 short videos</a></li>
<li><a href="https://twitter.com/dan_abramov" target="_blank" rel="noopener">@dan_abramov</a></li>
</ul>
<p>这里推荐两个中文在线文档吧，虽然也经常打不开：</p>
<ul>
<li><a href="http://cn.redux.js.org" target="_blank" rel="noopener">Redux中文指南</a></li>
<li><a href="https://github.com/react-guide/redux-tutorial-cn" target="_blank" rel="noopener">Redux tutorial 中文</a></li>
</ul>
<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。</p>
<p>可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。不仅于此，它还提供 超爽的开发体验，比如有一个时间旅行调试器可以编辑后实时预览。</p>
<p>Redux 除了和 React 一起用外，还支持其它界面库。
它体小精悍（只有2kB）且没有任何依赖。</p>
<p>现在我们知道Redux 是什么了，让我们开始改造我们的计数器：</p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example04/Counter.tsx" target="_blank" rel="noopener">counter.tsx</a></h4>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(</span><br><span class="line">    (state, action) =&gt; &#123;</span><br><span class="line">        <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'INCR'</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123; counter: state.counter + action.by &#125;;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; counter: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Counter <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> unsubscribe: <span class="built_in">Function</span>;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.forceUpdate());</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;label&gt;Counter: &lt;<span class="regexp">/label&gt;&lt;b&gt;#&#123;store.getState().counter&#125;&lt;/</span>b&gt;</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;e =&gt; store.dispatch(&#123; type:'INCR', by: 1 &#125;) &#125;&gt;INCREMENT&lt;/</span>button&gt;</span><br><span class="line">                &lt;span style=&#123;&#123; padding: <span class="string">"0 5px"</span> &#125;&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="function"><span class="params">e</span> =&gt;</span> store.dispatch(&#123; <span class="keyword">type</span>:<span class="string">'INCR'</span>, by: <span class="number">-1</span> &#125;) &#125;&gt;DECREMENT&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>创建一个 Redux Store</h3>
<p>引用<strong>redux</strong>模块的 <code>createStore</code>方法，并创建一个Redux store ，并传递默认的state:</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(</span><br><span class="line">    (state, action) =&gt; &#123;</span><br><span class="line">        <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'INCR'</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123; counter: state.counter + action.by &#125;;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; counter: <span class="number">0</span> &#125;);</span><br></pre></td></tr></table></figure></p>
<p>因为我们的计数器只有一个Action ，我们的reducer（Redux中的专有名词，即处理Action的函数）的实现就比较简单 - 返回更新的计数器对象</p>
<p>另外一件我们需要知道的关于Redux的事情是Redux是独立于React的，并不像 <code>setState()</code> 那样内置在其中的。React并不知道什么时候你的Redux Store中的State发生了变化--其实是需要知道的，因为你的组件要知道什么时候需要重绘。因为这个，我们需要注册一个监听器来观察 store的state变化来强制触发组件的重绘：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> unsubscribe: <span class="built_in">Function</span>;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.forceUpdate());</span><br><span class="line">&#125;</span><br><span class="line">componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们还需要将修改组件通过<code>store.getState()</code> 方法读取它的state信息，并修改之前的内置方式<code>setState()</code>方法为触发一个Action来修改我们应用的state 。</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;label&gt;Counter: &lt;<span class="regexp">/label&gt;&lt;b&gt;#&#123;store.getState().counter&#125;&lt;/</span>b&gt;</span><br><span class="line">            &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;e =&gt; store.dispatch(&#123; type:'INCR', by: 1 &#125;) &#125;&gt;INCREMENT&lt;/</span>button&gt;</span><br><span class="line">            &lt;span style=&#123;&#123; padding: <span class="string">"0 5px"</span> &#125;&#125; /&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="function"><span class="params">e</span> =&gt;</span> store.dispatch(&#123; <span class="keyword">type</span>:<span class="string">'INCR'</span>, by: <span class="number">-1</span> &#125;) &#125;&gt;DECREMENT&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在我们的计数器已经&quot;Redux化&quot;了，重新运行一下示例，并看看和之前的效果是否一致？</p>
<p><a href="http://xuanye.github.io/typescript-react/source/example04/"><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/preview-04.png" alt></a></p>
<blockquote>
<p>Demo: <a href="http://xuanye.github.io/typescript-react/source/example04/">/typescript-redux/example04/</a></p>
</blockquote>
<h2>安装 React Redux</h2>
<p>在上一个示例中，我们在<code>Counter</code>模块中创建了 Redux store 来帮助我们优化代码。因为你的应用应该只有一个Store，所以这不是一个正确使用它的方式 （关于这个原则，你需要参看Redux的相关文档），我们使用Redux的React帮助库来帮我们改善这种情况。</p>
<p>事实上，当我们结合Redux和React的时候，我们必须安装的一个包就是<code>react-redux</code>，它同样可以通过  <strong>npm</strong> 方式安装</p>
<pre><code>C:\proj&gt; npm install react-redux --save
</code></pre>
<p>和大多数流行的类库一样，它也已经有了类型定义文件了，一起来安装一下吧：</p>
<pre><code>C:\proj&gt; typings install react-redux --ambient --save
</code></pre>
<h2><a href="https://github.com/ServiceStackApps/typescript-redux/tree/master/src/TypeScriptRedux/src/example05" target="_blank" rel="noopener">Example 5 - 使用 Provider 注入store到纸容器的上下文（context）中</a></h2>
<p>在这个示例中，我们将 Redux store 移动到上一层的<strong>app.tsx</strong> 文件中，就像这样</p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example05/app.tsx" target="_blank" rel="noopener">app.tsx</a></h4>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">"./counter"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(</span><br><span class="line">    (state, action) =&gt; &#123;</span><br><span class="line">        <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'INCR'</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123; counter: state.counter + action.by &#125;;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; counter: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;Counter /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById("content"));</span></span><br></pre></td></tr></table></figure></p>
<p>为了传递store到我们的组件中，我们使用了<a href="https://facebook.github.io/react/docs/context.html" target="_blank" rel="noopener">React's child context</a> 特性 ， 在 <strong>react-redux</strong> 封装了 <code>&lt;Provider/&gt;</code>组件 ，我们直接使用就可以了。</p>
<p>为了让React知道 我们希望把store注入到我们的 <code>Counter</code> 组件中，我们还需要定义个静态的<code>contextTypes</code> 属性 制定context中需要的内容：</p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example05/counter.tsx" target="_blank" rel="noopener">counter.tsx</a></h4>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Counter <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    context: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        store: React.PropTypes.object</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> unsubscribe: <span class="built_in">Function</span>;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe = <span class="keyword">this</span>.context.store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.forceUpdate());</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;label&gt;Counter: &lt;<span class="regexp">/label&gt;&lt;b&gt;#&#123;this.context.store.getState().counter&#125;&lt;/</span>b&gt;</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;e =&gt; this.context.store.dispatch(&#123; type:'INCR', by: 1 &#125;) &#125;&gt;INCREMENT&lt;/</span>button&gt;</span><br><span class="line">                &lt;span style=&#123;&#123; padding: <span class="string">"0 5px"</span> &#125;&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">this</span>.context.store.dispatch(&#123; <span class="keyword">type</span>:<span class="string">'INCR'</span>, by: <span class="number">-1</span> &#125;) &#125;&gt;DECREMENT&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>改动对页面没什么影响，我们的程序应该还是可以正常运行：</p>
<p><a href="http://xuanye.github.io/typescript-react/source/example05/"><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/preview-05.png" alt></a></p>
<blockquote>
<p>Demo: <a href="http://xuanye.github.io/typescript-react/source/example05/">/typescript-redux/example05/</a></p>
</blockquote>
<h2><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example06" target="_blank" rel="noopener">Example 6 - 使用 connect() 创建无状态的组件</a></h2>
<p>我们已经编写了一些示例程序，现在哦我们回过头来重新看看一下。在上一个例子中，我们看到我们可以通过 <code>Provider</code> 组件来传递 state到我们的子组件，<strong>react-redux</strong> 同样也提供了一些其他的方式。</p>
<p>Redux的 <code>connect()</code> 函数返回一个更高级别的组件，它可以让组件变得无状态（stateless）, 通过将state和callback函数映射到组件的属性上（properties）以降低组件和Redux Store的耦合度：</p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example06/counter.tsx" target="_blank" rel="noopener">counter.tsx</a></h4>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Counter <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;label&gt;Counter: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;b&gt;#&#123;this.props.counter&#125;&lt;/</span>b&gt;</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;e =&gt; this.props.incr() &#125;&gt;INCREMENT&lt;/</span>button&gt;</span><br><span class="line">                &lt;span style=&#123;&#123; padding: <span class="string">"0 5px"</span> &#125;&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">this</span>.props.decr() &#125;&gt;DECREMENT&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (&#123;</span><br><span class="line">    incr: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123; <span class="keyword">type</span>: <span class="string">'INCR'</span>, by: <span class="number">1</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    decr: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123; <span class="keyword">type</span>: <span class="string">'INCR'</span>, by: <span class="number">-1</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Counter);</span><br></pre></td></tr></table></figure></p>
<p>为了达到这个效果，我们通过传递一个 <strong>mapStateToProps</strong> 的函数 ，这个函数返回一个对象，这个对象包含组件所需要的所有状态（state）。
我们的组件仍然需要更新状态，所以还需要传递一个 <strong>mapDispatchToProps</strong> 的函数，这个函数通过调用，将组织需要传递到Redux action的参数，并触发对应在store中注册的Reduce。</p>
<p>Redux的 <code>connect()</code>  会将上述函数组合到一个更高一级的组件中，并订阅Redux store的变化，通过更新state来改变组件的属性并重绘（实际上的子组件） <code>Counter</code> 组件</p>
<p>这些修改对页面来说仍然是透明的，你可以打开并重新试试它的功能</p>
<p><a href="http://xuanye.github.io/typescript-react/source/example06/"><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/preview-05.png" alt></a></p>
<blockquote>
<p>Demo: <a href="http://xuanye.github.io/typescript-react/source/example06/">/typescript-redux/example06/</a></p>
</blockquote>
<h2>安装 es6-shim</h2>
<p>原文中的这个章节是为了合并对象，安装es6-shim，并使用其中的 <code>Object.assign()</code> 方法，我从 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign()</a>这里复制了Polyfill如下，而没有使用 es6-shim ，如下代码所示：</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.assign != <span class="string">'function'</span>) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign = <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line"><span class="meta">      'use strict'</span>;</span><br><span class="line">      <span class="keyword">if</span> (target === <span class="literal">undefined</span> || target === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot convert undefined or null to object'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> output = <span class="built_in">Object</span>(target);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">1</span>; index &lt; <span class="built_in">arguments</span>.length; index++) &#123;</span><br><span class="line">        <span class="keyword">var</span> source = <span class="built_in">arguments</span>[index];</span><br><span class="line">        <span class="keyword">if</span> (source !== <span class="literal">undefined</span> &amp;&amp; source !== <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> nextKey <span class="keyword">in</span> source) &#123;</span><br><span class="line">            <span class="keyword">if</span> (source.hasOwnProperty(nextKey)) &#123;</span><br><span class="line">              output[nextKey] = source[nextKey];</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> output;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example07" target="_blank" rel="noopener">Example 7 - Shape Creator</a></h2>
<p>我们的下一个例子 我们将扩展Redux创建一个更大，更高级的真实的应用程序，通过这个例子进一步探索它的好处。因为这个世界不需要另外一个<a href="http://todomvc.com" target="_blank" rel="noopener">TodoMVC</a>应用了，所以我计划创建另外一个形状生成应用代替，它提供更多的视角去观察状态的变化。</p>
<h3><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example07/counter.tsx" target="_blank" rel="noopener">Counter.tsx</a></h3>
<p>我们将开始创建通过计数器（Counter）来控制控件的宽度和高度，为了达到这效果，需要重构一下我们的 <code>Counter</code> 组件，定义个<code>field</code>的属性来确定应该修改哪个状态（width/height），让其变得更加可复用。另外再增加一个 <code>step</code> 的属性来控制变化的尺度。</p>
<p>因为我们要发送多个Action，所以我们要适修改一下我们的Action Type名字，这里我们使用<code>{Type}_{Event}</code>格式来重命名它们，所以计数器的Action变成了<code>COUNTER_CHANGE</code></p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Counter <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">var</span> field = <span class="keyword">this</span>.props.field, step = <span class="keyword">this</span>.props.step || <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;label&gt;&#123;field&#125;: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;b&gt;&#123;this.props.counter&#125;&lt;/</span>b&gt;</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button style=&#123;&#123;width:30, margin:2&#125;&#125; onClick=&#123;e =&gt; this.props.decr(field, step)&#125;&gt;-&lt;/</span>button&gt;</span><br><span class="line">                &lt;button style=&#123;&#123;width:<span class="number">30</span>, margin:<span class="number">2</span>&#125;&#125; onClick=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">this</span>.props.incr(field, step)&#125;&gt;+&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123; counter: state[props.field] || <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (&#123;</span><br><span class="line">    incr: <span class="function">(<span class="params">field, step</span>) =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123; <span class="keyword">type</span>: <span class="string">'COUNTER_CHANGE'</span>, field, by: step &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    decr: <span class="function">(<span class="params">field, step</span>) =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123; <span class="keyword">type</span>: <span class="string">'COUNTER_CHANGE'</span>, field, by: <span class="number">-1</span> * step &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Counter);</span><br></pre></td></tr></table></figure></p>
<p>现在它变得可以复用了，我们可以创建多个实例来控制我们形状的Width和Height了：</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">field</span>=<span class="string">"width"</span> <span class="attr">step</span>=<span class="string">&#123;10&#125;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">field</span>=<span class="string">"height"</span> <span class="attr">step</span>=<span class="string">&#123;10&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>它看上去就像这样:</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/shapes-dimensions.png" alt></p>
<h3><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example07/colorpicker.tsx" target="_blank" rel="noopener">colorpicker.tsx</a></h3>
<p>下一个组件我们需要一个控制颜色的组件，<strong>range</strong> INPUT 控件非常适合作为基础颜色调节器的空间，类似一个滑动条（这个控件在IE的老版本上没有办法识别，请大家不要用IE看），同时需要一个显示颜色的区域，唯一不寻常的事情是需要一个计算颜色亮度的函数用来区分是否显示白色或者黑色的前台文本 。</p>
<p>并且<code>&lt;ColorPicker /&gt;</code> 是一个单纯的React控件，对Redux没有任何的依赖，所以稍后我们需要把它包装进一个更高级别的组件中:</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NumberPicker <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;input <span class="keyword">type</span>=<span class="string">"range"</span> value=&#123;<span class="keyword">this</span>.props.value.toString() &#125; min=<span class="string">"0"</span> max=<span class="string">"255"</span></span><br><span class="line">                    onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">this</span>.handleChange(e) &#125; /&gt;</span><br><span class="line">                &lt;label&gt; &#123;<span class="keyword">this</span>.props.name&#125;: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                &lt;b&gt;&#123; this.props.value &#125;&lt;/</span>b&gt;</span><br><span class="line">            &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    handleChange(event) &#123;</span></span><br><span class="line"><span class="regexp">        const e = event.target as HTMLInputElement;</span></span><br><span class="line"><span class="regexp">        this.props.onChange(parseInt(e.value));</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export class ColorPicker extends React.Component&lt;any, any&gt; &#123;</span></span><br><span class="line"><span class="regexp">    render() &#123;</span></span><br><span class="line"><span class="regexp">        const color = this.props.color;</span></span><br><span class="line"><span class="regexp">        const rgb = hexToRgb(color);</span></span><br><span class="line"><span class="regexp">        const textColor = isDark(color) ? '#fff' : '#000';</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;NumberPicker name="Red" value=&#123;rgb.r&#125; onChange=&#123;n =&gt; this.updateRed(n)&#125; /</span>&gt;</span><br><span class="line">                &lt;NumberPicker name=<span class="string">"Green"</span> value=&#123;rgb.g&#125; onChange=&#123;<span class="function"><span class="params">n</span> =&gt;</span> <span class="keyword">this</span>.updateGreen(n) &#125; /&gt;</span><br><span class="line">                &lt;NumberPicker name=<span class="string">"Blue"</span> value=&#123;rgb.b&#125; onChange=&#123;<span class="function"><span class="params">n</span> =&gt;</span> <span class="keyword">this</span>.updateBlue(n) &#125; /&gt;</span><br><span class="line">                &lt;div style=&#123;&#123;</span><br><span class="line">                    background: color, width: <span class="string">"100%"</span>, height: <span class="number">40</span>, lineHeight: <span class="string">"40px"</span>,</span><br><span class="line">                    textAlign: <span class="string">"center"</span>, color: textColor</span><br><span class="line">                &#125;&#125;&gt;</span><br><span class="line">                    &#123;color&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    updateRed(n: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> rgb = hexToRgb(<span class="keyword">this</span>.props.color);</span><br><span class="line">        <span class="keyword">this</span>.changeColor(rgbToHex(n, rgb.g, rgb.b));</span><br><span class="line">    &#125;</span><br><span class="line">    updateGreen(n: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> rgb = hexToRgb(<span class="keyword">this</span>.props.color);</span><br><span class="line">        <span class="keyword">this</span>.changeColor(rgbToHex(rgb.r, n, rgb.b));</span><br><span class="line">    &#125;</span><br><span class="line">    updateBlue(n: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> rgb = hexToRgb(<span class="keyword">this</span>.props.color);</span><br><span class="line">        <span class="keyword">this</span>.changeColor(rgbToHex(rgb.r, rgb.g, n));</span><br><span class="line">    &#125;</span><br><span class="line">    changeColor(color: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.onChange(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentToHex = <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> hex = c.toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> hex.length == <span class="number">1</span> ? <span class="string">"0"</span> + hex : hex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rgbToHex = <span class="function">(<span class="params">r, g, b</span>) =&gt;</span> <span class="string">"#"</span> + componentToHex(r) + componentToHex(g) + componentToHex(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hexToRgb = (hex: <span class="built_in">string</span>): &#123; r: <span class="built_in">number</span>; g: <span class="built_in">number</span>; b: <span class="built_in">number</span>; &#125; =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="regexp">/^#?([a-f\d]&#123;2&#125;)([a-f\d]&#123;2&#125;)([a-f\d]&#123;2&#125;)$/i</span>.exec(hex);</span><br><span class="line">    <span class="keyword">return</span> result ? &#123;</span><br><span class="line">        r: <span class="built_in">parseInt</span>(result[<span class="number">1</span>], <span class="number">16</span>),</span><br><span class="line">        g: <span class="built_in">parseInt</span>(result[<span class="number">2</span>], <span class="number">16</span>),</span><br><span class="line">        b: <span class="built_in">parseInt</span>(result[<span class="number">3</span>], <span class="number">16</span>)</span><br><span class="line">    &#125; : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luminance = <span class="function">(<span class="params">color: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> rgb = hexToRgb(color);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.2126</span> * rgb.r + <span class="number">0.7152</span> * rgb.g + <span class="number">0.0722</span> * rgb.b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isDark = <span class="function">(<span class="params">color: <span class="built_in">string</span></span>) =&gt;</span> luminance(color) &lt; <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p>
<p>在界面上看起来像这样:</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/shapes-colorpicker.png" alt></p>
<h3><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example07/shapemaker.tsx" target="_blank" rel="noopener">shapemaker.tsx</a></h3>
<p>这就是我们的Shape 生成器，引入了更多的状态，我们将关注 <strong>top</strong> 和<strong>left</strong> 的位置来确定他在预览区域显示的位置，同时控制它的颜色和大小，同时也非常重要的是我们加了一个 <strong>Add Shape</strong> 的按钮，把Shape添加到我们的预览区域中，详细的代码如下：
:</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isDark &#125; <span class="keyword">from</span> <span class="string">"./colorpicker"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ShapeMaker <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">props?, context?</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; top: props.top, left: props.left &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">var</span> width = <span class="keyword">this</span>.props.width, height = <span class="keyword">this</span>.props.height, background = <span class="keyword">this</span>.props.color;</span><br><span class="line">        <span class="keyword">const</span> color = isDark(background) ? <span class="string">'#fff'</span> : <span class="string">'#000'</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;label&gt;size: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;b&gt;&#123;height&#125;x&#123;width&#125;&lt;/</span>b&gt;</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div style=&#123;&#123; height, width, background, color, lineHeight: height + "px", margin: "auto" &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    (&#123;this.state.top&#125;, &#123;this.state.left&#125;)</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &lt;label&gt;position: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;input style=&#123;&#123; width: 30 &#125;&#125; defaultValue=&#123;this.props.top&#125; onChange=&#123;e =&gt; this.handleTop(e) &#125; /</span>&gt;</span><br><span class="line">                        &lt;span&gt;, &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;input style=&#123;&#123; width: 30 &#125;&#125; defaultValue=&#123;this.props.left&#125; onChange=&#123;e =&gt; this.handleLeft(e) &#125; /</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                    &lt;button onClick=&#123;e =&gt; this.props.addShape(background, height, width, this.state.top, this.state.left) &#125;&gt;</span></span><br><span class="line"><span class="regexp">                        Add Shape</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    handleTop(e) &#123;</span><br><span class="line">        <span class="keyword">var</span> top = <span class="built_in">parseInt</span>(e.target.value);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(top))</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123; top &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    handleLeft(e) &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="built_in">parseInt</span>(e.target.value);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(left))</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123; left &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    (state) =&gt; (&#123;</span><br><span class="line">        width: state.width, height: state.height, color: state.color,</span><br><span class="line">        top: state.nextShapeId * <span class="number">10</span>, left: state.nextShapeId * <span class="number">10</span></span><br><span class="line">    &#125;),</span><br><span class="line">    (dispatch) =&gt; (&#123;</span><br><span class="line">        addShape: <span class="function">(<span class="params">color, height, width, top, left</span>) =&gt;</span> &#123;</span><br><span class="line">            dispatch(&#123; <span class="keyword">type</span>: <span class="string">'SHAPE_ADD'</span>, height, width, color, top, left &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">)(ShapeMaker);</span><br></pre></td></tr></table></figure></p>
<p>在界面上看起来像这样:</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/shapes-preview.png" alt></p>
<h3>基于消息的Actions</h3>
<p>有趣的是，尽管这个组件的改动部分貌似很多，不过它仅仅触发一个单独的<code>SHAPE_ADD</code> Action。
我们开始看到一些使用Redux方式的好处，像强制分离我们功能背后的粗粒度API ，去除和DOM的关系。
这样只要能操作Store就能操作应用程序的的具体功能，这都要感谢<a href="https://github.com/ServiceStack/ServiceStack/wiki/Advantages-of-message-based-web-services#advantages-of-message-based-designs" target="_blank" rel="noopener">基于消息的设计</a>。
因为它们只是基本的javascript对象，我们可以非常轻松的创建并序列化100个 <code>SHAPE_ADD</code> actions，并且把它们存储到localStorage等以便我们后续重置，甚至通知到别人，再在其本地重现过程。</p>
<h3><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example07/shapeviewer.tsx" target="_blank" rel="noopener">ShapeViewer.tsx</a></h3>
<p>现在我已经有了创建一个Shape的所有部分，我们还需要一个组件去显示他们，<code>ShapeViewer</code> 通过输出一个 <code>DIV</code>显示添加Shape的大小，颜色和未知。</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isDark &#125; <span class="keyword">from</span> <span class="string">"./colorpicker"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ShapeMaker <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">props?, context?</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; top: props.top, left: props.left &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">var</span> width = <span class="keyword">this</span>.props.width, height = <span class="keyword">this</span>.props.height, background = <span class="keyword">this</span>.props.color;</span><br><span class="line">        <span class="keyword">const</span> color = isDark(background) ? <span class="string">'#fff'</span> : <span class="string">'#000'</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;label&gt;size: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;b&gt;&#123;height&#125;x&#123;width&#125;&lt;/</span>b&gt;</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div style=&#123;&#123; height, width, background, color, lineHeight: height + "px", margin: "auto" &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    (&#123;this.state.top&#125;, &#123;this.state.left&#125;)</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &lt;label&gt;position: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;input style=&#123;&#123; width: 30 &#125;&#125; defaultValue=&#123;this.props.top&#125; onChange=&#123;e =&gt; this.handleTop(e) &#125; /</span>&gt;</span><br><span class="line">                        &lt;span&gt;, &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;input style=&#123;&#123; width: 30 &#125;&#125; defaultValue=&#123;this.props.left&#125; onChange=&#123;e =&gt; this.handleLeft(e) &#125; /</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                    &lt;button onClick=&#123;e =&gt; this.props.addShape(background, height, width, this.state.top, this.state.left) &#125;&gt;</span></span><br><span class="line"><span class="regexp">                        Add Shape</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    handleTop(e) &#123;</span><br><span class="line">        <span class="keyword">var</span> top = <span class="built_in">parseInt</span>(e.target.value);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(top))</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123; top &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    handleLeft(e) &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="built_in">parseInt</span>(e.target.value);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(left))</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123; left &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    (state) =&gt; (&#123;</span><br><span class="line">        width: state.width, height: state.height, color: state.color,</span><br><span class="line">        top: state.nextShapeId * <span class="number">10</span>, left: state.nextShapeId * <span class="number">10</span></span><br><span class="line">    &#125;),</span><br><span class="line">    (dispatch) =&gt; (&#123;</span><br><span class="line">        addShape: <span class="function">(<span class="params">color, height, width, top, left</span>) =&gt;</span> &#123;</span><br><span class="line">            dispatch(&#123; <span class="keyword">type</span>: <span class="string">'SHAPE_ADD'</span>, height, width, color, top, left &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">)(ShapeMaker);</span><br></pre></td></tr></table></figure></p>
<p>当添加一个Shape，ShapeViewer就会一个空DIV容器中绘制它。</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/shapes-viewer.png" alt></p>
<h3>拖拽 shapes 来产生Actions</h3>
<p>为了更好的查看所有的Shape，ShapeViewer 包括了支持拖拽来更新shape的位置的功能，这也是一个快速产生大量Action的一个方法，可以快速的可视化并播放一系列state的变化</p>
<blockquote>
<p>为了简单起见，使用了mousemove事件而不是drag drop 的api云云</p>
</blockquote>
<h3><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example07/actionplayer.tsx" target="_blank" rel="noopener">ActionPlayer.tsx</a></h3>
<p>现在我们已经实现了我们App的所有功能，可以开始Redux的特别功能</p>
<h4>replayActions</h4>
<p>如果你已经正确的完成我们的应用，我理论上可以通过重置Redux的Store到它的默认状态，然后再次触发之前的每一个Action来重现我们整个应用的会话。这就是 <code>replayActions</code> 要实现的功能。每个Action我们提供10毫秒*第几个的间隔来播放。</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ActionPlayer <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> unsubscribe: <span class="built_in">Function</span>;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe = <span class="keyword">this</span>.props.store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.forceUpdate());</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">this</span>.replayActions() &#125;&gt;replay&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;b&gt;&#123;this.props.actions.length&#125;&lt;/</span>b&gt; actions</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;e =&gt; this.undoAction() &#125;&gt;undo&lt;/</span>button&gt; &lt;span&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;e =&gt; this.resetState() &#125;&gt;clear&lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    resetState() &#123;</span></span><br><span class="line"><span class="regexp">        this.props.store.dispatch(&#123; type: "LOAD", state: this.props.defaultState &#125;);</span></span><br><span class="line"><span class="regexp">        this.props.actions.length = 0;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    replayActions() &#123;</span></span><br><span class="line"><span class="regexp">        const snapshot = this.props.actions.slice(0);</span></span><br><span class="line"><span class="regexp">        this.resetState();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        snapshot.forEach((action, i) =&gt;</span></span><br><span class="line"><span class="regexp">            setTimeout(() =&gt; this.props.store.dispatch(action), 10 * i));</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    undoAction() &#123;</span></span><br><span class="line"><span class="regexp">        const snapshot = this.props.actions.slice(0, this.props.actions.length - 1);</span></span><br><span class="line"><span class="regexp">        this.resetState();</span></span><br><span class="line"><span class="regexp">        snapshot.forEach(action =&gt; this.props.store.dispatch(action));</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>ActionPlayer 也显示有多少个Action被触发了：</p>
<p><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/shapes-actions.png" alt></p>
<h4>resetState</h4>
<p>清空我们的应用回到最原始的状态不能再简单了，就只有重新加载<code>defaultState</code>并清除保存的actions。</p>
<h4>undoAction</h4>
<p>因为我们的应用捕获了所有的Action，撤销的动作，我们是通过将之前的所有Action重新再执行一遍，但不包括最后一个的方式来实现。这看上去效率很低，不过Javascript的VM 性能还不错，所以看上去也还好--就像我们真的实现了撤销一样：）</p>
<h3><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example07/app.tsx" target="_blank" rel="noopener">app.tsx</a></h3>
<p>在实现了所有的模块之后，剩下的一件事情就是我们父容器了，用于挂载所有的组件和Redux Reducer函数，实现所有action的状态转换</p>
<h3>Application Reducers</h3>
<p>通过switch状态来处理每个action的type属性是实现reducer函数的经典方式。不能用对象展开方法，使用<code>Object.assign()</code> 也许是最好的方式了，但是它是ES6的特性，并非所有的浏览器都支持。为此我们之前有介绍安装工具包或者使用polyfill来实现，在本文的示例中使用了polyfill。
我们在reducer中处理state的变化，使用 Object.assign() 新建了一个副本。但不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象<code>{}</code>。</p>
<p>我们看到我们不需要一个特殊的Redux函数去做这个事情，我们通过在action消息中传递一个简单的参数，就能轻易地让我们的reducer函数返回期望的state。</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider, connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">"./counter"</span>;</span><br><span class="line"><span class="keyword">import</span> ActionPlayer <span class="keyword">from</span> <span class="string">"./actionplayer"</span>;</span><br><span class="line"><span class="keyword">import</span> ShapeMaker <span class="keyword">from</span> <span class="string">"./shapemaker"</span>;</span><br><span class="line"><span class="keyword">import</span> ShapeViewer <span class="keyword">from</span> <span class="string">"./shapeviewer"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ColorPicker &#125; <span class="keyword">from</span> <span class="string">"./colorpicker"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./objectassign"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> actions = [];</span><br><span class="line"><span class="keyword">var</span> defaultState = &#123; nextShapeId: <span class="number">0</span>, width: <span class="number">100</span>, height: <span class="number">100</span>, color: <span class="string">"#000000"</span>, shapes: [] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(</span><br><span class="line">    (state, action) =&gt; &#123;</span><br><span class="line">        actions.push(action);</span><br><span class="line">        <span class="keyword">let</span> shape;</span><br><span class="line">        <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"COUNTER_CHANGE"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; [action.field]: state[action.field] + action.by &#125;);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"COLOR_CHANGE"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; color: action.color &#125;);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"SHAPE_ADD"</span>:</span><br><span class="line">                <span class="keyword">const</span> id = state.nextShapeId;</span><br><span class="line">                shape = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123; id: id &#125;, action);</span><br><span class="line">                <span class="keyword">delete</span> shape[<span class="string">"type"</span>];</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; nextShapeId: id + <span class="number">1</span>, shapes: [...state.shapes, shape] &#125;);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"SHAPE_CHANGE"</span>:</span><br><span class="line">                shape = <span class="built_in">Object</span>.assign(&#123;&#125;, state.shapes.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.id === action.id)[<span class="number">0</span>],</span><br><span class="line">                    &#123; top: action.top, left: action.left &#125;);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state,</span><br><span class="line">                    &#123; shapes: [...state.shapes.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.id !== action.id), shape] &#125;);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"LOAD"</span>:</span><br><span class="line">                <span class="keyword">return</span> action.state;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    defaultState);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ColorWrapperBase <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;ColorPicker color=&#123;<span class="keyword">this</span>.props.color&#125; onChange=&#123;<span class="keyword">this</span>.props.setColor&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ColorWrapper = connect(</span><br><span class="line">    (state) =&gt; (&#123; color: state.color &#125;),</span><br><span class="line">    (dispatch) =&gt; <span class="function">(<span class="params">&#123; setColor: (<span class="params">color</span>) =&gt; dispatch(<span class="params">&#123; <span class="keyword">type</span>: 'COLOR_CHANGE', color &#125;</span>) &#125;</span>)</span></span><br><span class="line"><span class="function">)(<span class="params">ColorWrapperBase</span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">ReactDOM</span>.<span class="params">render</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    &lt;Provider store=&#123;store&#125;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">        &lt;table&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">            &lt;tbody&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                &lt;tr&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                    &lt;td style=&#123;&#123; width: 220 &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                        &lt;Counter field="width" step=&#123;10&#125; /&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                        &lt;Counter field="height" step=&#123;10&#125; /&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                        &lt;ColorWrapper /&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                    &lt;/td&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                    &lt;td style=&#123;&#123; verticalAlign: "top", textAlign: "center", width: 500 &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                        &lt;h2&gt;Preview&lt;/h2&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                        &lt;ShapeMaker /&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                    &lt;/td&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                    &lt;td style=&#123;&#123; verticalAlign: 'bottom' &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                        &lt;ActionPlayer store=&#123;store&#125; actions=&#123;actions&#125; defaultState=&#123;defaultState&#125; /&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                    &lt;/td&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                &lt;/tr&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                &lt;tr&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                    &lt;td colSpan=&#123;3&#125;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                        &lt;h2 style=&#123;&#123; margin: 5, textAlign: 'center' &#125;&#125;&gt;Shapes&lt;/h2&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                        &lt;ShapeViewer /&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                    &lt;/td&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                &lt;/tr&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">            &lt;/tbody&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">        &lt;/table&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">    &lt;/Provider&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">document</span>.getElementById(<span class="params">"content"</span>)</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>现在我们可以看到一个可工作的Shape生成器了，这是它的全貌：</p>
<p><a href="http://xuanye.github.io/typescript-react/source/example07/"><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/preview-07.png" alt></a></p>
<blockquote>
<p>Demo: <a href="http://xuanye.github.io/typescript-react/source/example07/">/typescript-redux/example07/</a></p>
</blockquote>
<p>有一点需要指出我们的顶级App只会绘制一次，因为它不包含在任何一个父组件，也没有调用<code>setState()</code>来改变state并触发重绘。所以我们需要包装一下我们的ColorPicker进一个<code>Redux-aware</code> ColorWrapper ，并且映射我们的Redux state到它的组件属性中，同样把<code>onChange</code> 转会成触发适当的Redux action</p>
<h2>重构 Reducers</h2>
<p>原文中重构Reducers是使用了Typescript的一些高级特性，如装饰器等，但是我本身是拒绝这么做的，毕竟装饰器还是实验性的特性，将来会发生变化，
这里的重构只是重新组织一下代码，并将原来的一堆<code>switch</code>拆分到不同的reducer函数中：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> store = createStore(</span><br><span class="line">    (state, action) =&gt; &#123;</span><br><span class="line">        actions.push(action);</span><br><span class="line">        <span class="keyword">let</span> shape;</span><br><span class="line">        <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"COUNTER_CHANGE"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; [action.field]: state[action.field] + action.by &#125;);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"COLOR_CHANGE"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; color: action.color &#125;);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"SHAPE_ADD"</span>:</span><br><span class="line">                <span class="keyword">const</span> id = state.nextShapeId;</span><br><span class="line">                shape = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123; id: id &#125;, action);</span><br><span class="line">                <span class="keyword">delete</span> shape[<span class="string">"type"</span>];</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; nextShapeId: id + <span class="number">1</span>, shapes: [...state.shapes, shape] &#125;);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"SHAPE_CHANGE"</span>:</span><br><span class="line">                shape = <span class="built_in">Object</span>.assign(&#123;&#125;, state.shapes.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.id === action.id)[<span class="number">0</span>],</span><br><span class="line">                    &#123; top: action.top, left: action.left &#125;);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state,</span><br><span class="line">                    &#123; shapes: [...state.shapes.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.id !== action.id), shape] &#125;);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"LOAD"</span>:</span><br><span class="line">                <span class="keyword">return</span> action.state;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    defaultState);</span><br></pre></td></tr></table></figure></p>
<p>这里没有使用Redux内置的 <a href="http://rackt.org/redux/docs/api/combineReducers.html" target="_blank" rel="noopener">combineReducers</a>来帮助我们模块化Reduxer,
还是使用一种字典的方式来组织我们的函数，这样做我相信更加可阅读性和可扩展性更高。（事实上本例中使用combineReducers 会带来一些额外的问题，因为combineReducers中的Reducer分管state中的不同分支而互不影响，而此例中有些模块需要交互方式可能导致代码一定的冗余）</p>
<p><strong>app.tsx</strong>:</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(</span><br><span class="line">    (state, action) =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> reducer = reducers[action.type];</span><br><span class="line">        <span class="keyword">var</span> nextState = reducer != <span class="literal">null</span></span><br><span class="line">            ? reducer(state, action)</span><br><span class="line">            : state;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action.type !== <span class="string">'LOAD'</span>)</span><br><span class="line">            history.add(action, nextState);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nextState;</span><br><span class="line">    &#125;,</span><br><span class="line">    defaultState);</span><br></pre></td></tr></table></figure></p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example08/reducers.ts" target="_blank" rel="noopener">reducers.ts</a></h4>
<p><strong>reducers</strong> 模块就是返回一个action.type为key的字典对象，内容则是它们对应的处理函数 :</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./objectassign"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; addShape, changeShape &#125; <span class="keyword">from</span> <span class="string">'./reducers/shapeReducers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeCounter = <span class="function">(<span class="params">state, action</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; [action.field]: state[action.field] + action.by &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeColor = <span class="function">(<span class="params">state, action</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; color: action.color &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    COUNTER_CHANGE: changeCounter,</span><br><span class="line">    COLOR_CHANGE: changeColor,</span><br><span class="line">    SHAPE_ADD: addShape,</span><br><span class="line">    SHAPE_CHANGE: changeShape,</span><br><span class="line">    LOAD: <span class="function">(<span class="params">state, action</span>) =&gt;</span> action.state</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>使用命名函数让代码更具可读性并且让你独立地开发和测试每个reducer的实现。
同时也讲几个相关的reducer封装进单独的模块中，就像这样:</p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/reducers/shapeReducers.ts" target="_blank" rel="noopener">shapeReducers.ts</a></h4>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"../objectassign"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addShape = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id = state.nextShapeId;</span><br><span class="line">    <span class="keyword">var</span> shape = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123; id: id &#125;, action);</span><br><span class="line">    <span class="keyword">delete</span> shape[<span class="string">'type'</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; nextShapeId: id + <span class="number">1</span>, shapes: [...state.shapes, shape] &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changeShape = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> shape = <span class="built_in">Object</span>.assign(&#123;&#125;, state.shapes.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.id === action.id)[<span class="number">0</span>],</span><br><span class="line">        &#123; top: action.top, left: action.left &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; shapes: [...state.shapes.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.id !== action.id), shape] &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2>重构 Redux 的组件</h2>
<p>这里还有一些事情需要我们去改进Redux-connected的组件，这些组件使用了<code>connect()</code>来创建我们更高级别的（其实是子类）Redux-connected 组件：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> ColorWrapperBase <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;ColorPicker color=&#123;<span class="keyword">this</span>.props.color&#125; onChange=&#123;<span class="keyword">this</span>.props.setColor&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ColorWrapper = connect(</span><br><span class="line">    (state) =&gt; (&#123; color: state.color &#125;),</span><br><span class="line">    (dispatch) =&gt; <span class="function">(<span class="params">&#123; setColor: (<span class="params">color</span>) =&gt; dispatch(<span class="params">&#123; <span class="keyword">type</span>: "COLOR_CHANGE", color &#125;</span>) &#125;</span>)</span></span><br><span class="line"><span class="function">)(<span class="params">ColorWrapperBase</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>注：原文中作者说不喜欢通过这种方式（离开组件类声明，去改变组件的行为）来改变原来组件的实现，然后再接下来的章节中，叙述如果通过Typescript的装饰器功能来改造，但是我暂时并不同意这种观点，在Typescript中装饰器本身是比较晦涩的语法糖，而且还只是实验性的功能特性，在我们还没有非常熟练掌握的情况下，还是应该谨慎处理，而且我还觉得使用<code>connect()</code>的方式，并没有什么不妥。如果你对装饰器的部分非常感兴趣，可以去原文看看怎么实现的。</p>
<h3>带有语法绑定的方法</h3>
<p>在React Apps中 <a href="https://facebook.github.io/react/docs/pure-render-mixin.html" target="_blank" rel="noopener">PureRenderMixin</a>通过检查和监听组件的props或state的变更来阻止一些不必要的重绘，这样能有效地改善应用程序的性能。</p>
<p>顺便说一句，Redux <code>connect()</code>的方法自动就能够判断是否需要更新组件，通过映射对象关联比较和判断状态是否发生了变化。</p>
<p>通过<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">fat arrow syntax（箭头函数语法））</a>你可以轻松的绑定javascript中的this对象到函数中，而且不需要考虑怎么绑定:</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NumberPicker <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;input <span class="keyword">type</span>=<span class="string">"range"</span> value=&#123;<span class="keyword">this</span>.props.value.toString()&#125; min=<span class="string">"0"</span> max=<span class="string">"255"</span></span><br><span class="line">                    onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">this</span>.handleChange(e)&#125; /&gt; <span class="comment">//new function created</span></span><br><span class="line">                &lt;label&gt; &#123;<span class="keyword">this</span>.props.name&#125;: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                &lt;b&gt;&#123; this.props.value &#125;&lt;/</span>b&gt;</span><br><span class="line">            &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    handleChange(event) &#123;</span></span><br><span class="line"><span class="regexp">        const e = event.target as HTMLInputElement;</span></span><br><span class="line"><span class="regexp">        this.props.onChange(parseInt(e.value));</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>这样写的问题是类似在循环中声明函数一样，一旦属性无效后，箭头函数的声明就会被重新执行一次，这样就会有些性能方面的问题，一个简单地方式来改善这个问题，只需要这样定义你的箭头函数：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NumberPicker <span class="keyword">extends</span> React.Component&lt;INumberProps, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;input <span class="keyword">type</span>=<span class="string">"range"</span> value=&#123;<span class="keyword">this</span>.props.value.toString()&#125; min=<span class="string">"0"</span> max=<span class="string">"255"</span></span><br><span class="line">                    onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt; <span class="comment">//uses same function</span></span><br><span class="line">                &lt;label&gt; &#123;<span class="keyword">this</span>.props.name&#125;: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                &lt;b&gt;&#123;this.props.value&#125;&lt;/</span>b&gt;</span><br><span class="line">            &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    handleChange = (event) =&gt; &#123; /</span><span class="regexp">/fat arrow syntax</span></span><br><span class="line"><span class="regexp">        const e = event.target as HTMLInputElement;</span></span><br><span class="line"><span class="regexp">        this.props.onChange(parseInt(e.value));</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example08" target="_blank" rel="noopener">Example 8 - 通过状态快照实现时间旅行</a></h2>
<p>在这个实例中我们讲通过一个应用State快照更加完整实现替换<code>ActionPlayer</code>。通过使用state我们可以实现更加丰富的历史功能，包括回退，前进，和指定某个时间点的导航，就像我们控制进度条一样进行一次『实现旅行』体验模拟后退和前进</p>
<p>为了让历史状态管理更加可服用一点，它被封装成一个相似的API，包括基本的操作包括导航、重设，添加现在的状态等等：</p>
<h4><a href="https://github.com/ServiceStackApps/typescript-redux/blob/master/src/TypeScriptRedux/src/example08/app.tsx" target="_blank" rel="noopener">app.tsx</a></h4>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> history = &#123;</span><br><span class="line">    states: [],</span><br><span class="line">    stateIndex: <span class="number">0</span>,</span><br><span class="line">    reset() &#123;</span><br><span class="line">        <span class="keyword">this</span>.states = [];</span><br><span class="line">        <span class="keyword">this</span>.stateIndex = <span class="number">-1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    prev() &#123; <span class="keyword">return</span> <span class="keyword">this</span>.states[--<span class="keyword">this</span>.stateIndex]; &#125;,</span><br><span class="line">    next() &#123; <span class="keyword">return</span> <span class="keyword">this</span>.states[++<span class="keyword">this</span>.stateIndex]; &#125;,</span><br><span class="line">    goTo(index) &#123; <span class="keyword">return</span> <span class="keyword">this</span>.states[<span class="keyword">this</span>.stateIndex=index]; &#125;,</span><br><span class="line">    canPrev() &#123; <span class="keyword">return</span> <span class="keyword">this</span>.stateIndex &lt;= <span class="number">0</span>; &#125;,</span><br><span class="line">    canNext() &#123; <span class="keyword">return</span> <span class="keyword">this</span>.stateIndex &gt;= <span class="keyword">this</span>.states.length - <span class="number">1</span>; &#125;,</span><br><span class="line">    pushState(nextState) &#123;</span><br><span class="line">        <span class="keyword">this</span>.states.push(nextState);</span><br><span class="line">        <span class="keyword">this</span>.stateIndex = <span class="keyword">this</span>.states.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(</span><br><span class="line">    (state, action) =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> reducer = reducers[action.type];</span><br><span class="line">        <span class="keyword">var</span> nextState = reducer != <span class="literal">null</span></span><br><span class="line">            ? reducer(state, action)</span><br><span class="line">            : state;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action.type !== <span class="string">'LOAD'</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             history.pushState(nextState);</span><br><span class="line">             <span class="built_in">console</span>.log(history);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nextState;</span><br><span class="line">    &#125;,</span><br><span class="line">    defaultState);</span><br></pre></td></tr></table></figure></p>
<h4><a href="https://github.com/xuanye/typescript-redux-sample/tree/master/src/TypescriptRedux/TypescriptRedux.WebHost/source/example08/History.tsx" target="_blank" rel="noopener">History.tsx</a></h4>
<p>通过保存和重置整个状态快照来实现我们的历史控制器，这非常的直接了当，基本上通过触发 <strong>LOAD</strong> action 来销毁之前保存的所有state，（注:这里没有像原文中使用装饰器，而是传统的方式，这组件有个问题，就是本身的数据并不是state的部分，但是又需要再state变化的时候，同步刷新，所以需要订阅store的变化来强制刷新)：</p>
<p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// History 本身的数据不由 State 管理，但是又要在State变化的时候重绘</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> History <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    context: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        store: React.PropTypes.object</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> unsubscribe: <span class="built_in">Function</span>;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe = <span class="keyword">this</span>.context.store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.forceUpdate());</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.replayStates&#125;&gt;replay&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;span&gt; &lt;/</span>span&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.resetState&#125;&gt;clear&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;b&gt;&#123;this.props.history.states.length&#125;&lt;/</span>b&gt; states</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.prevState&#125; disabled=&#123;this.props.history.canPrev()&#125;&gt;prev&lt;/</span>button&gt;</span><br><span class="line">                &lt;span&gt; &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.nextState&#125; disabled=&#123;this.props.history.canNext()&#125;&gt;next&lt;/</span>button&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;b&gt;&#123;<span class="keyword">this</span>.props.history.stateIndex + <span class="number">1</span>&#125;&lt;<span class="regexp">/b&gt; position</span></span><br><span class="line"><span class="regexp">                &lt;/</span>p&gt;</span><br><span class="line">                &lt;input <span class="keyword">type</span>=<span class="string">"range"</span> min=<span class="string">"0"</span> max=&#123;<span class="keyword">this</span>.props.history.states.length - <span class="number">1</span>&#125;</span><br><span class="line">                    disabled=&#123;<span class="keyword">this</span>.props.history.states.length === <span class="number">0</span>&#125;</span><br><span class="line">                    value=&#123;<span class="keyword">this</span>.props.history.stateIndex&#125; onChange=&#123;<span class="keyword">this</span>.goToState&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    resetState = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.context.store.dispatch(&#123; type: 'LOAD', state: this.props.defaultState &#125;);</span></span><br><span class="line"><span class="regexp">        this.props.history.reset();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    replayStates = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.props.history.states.forEach((state, i) =&gt;</span></span><br><span class="line"><span class="regexp">            setTimeout(() =&gt; this.context.store.dispatch(&#123; type: 'LOAD', state &#125;), 10 * i));</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    prevState = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.context.store.dispatch(&#123; type: 'LOAD', state: this.props.history.prev() &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    nextState = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.context.store.dispatch(&#123; type: 'LOAD', state: this.props.history.next() &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    goToState = (event) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        const e = event.target as HTMLInputElement;</span></span><br><span class="line"><span class="regexp">        this.context.store.dispatch(&#123; type: 'LOAD', state: this.props.history.goTo(parseInt(e.value)) &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>现在我们的实例已经支持丰富的历史功能了:)</p>
<p><a href="http://xuanye.github.io/typescript-react/source/example08/"><img src="https://raw.githubusercontent.com/xuanye/typescript-redux-sample/master/img/preview-08.png" alt></a></p>
<blockquote>
<p>Demo: <a href="http://xuanye.github.io/typescript-react/source/example08/">/typescript-redux/example08/</a></p>
</blockquote>
<h3><a href="http://rackt.org/redux/docs/recipes/ImplementingUndoHistory.html" target="_blank" rel="noopener">改进撤销功能</a></h3>
<p>如果正在给你的Redux应用程序添加撤销/重做功能，你肯定期望能够回退独立组件的变化的部分，而不是整个应用的state，非常幸运 这篇文章：<a href="http://rackt.org/redux/docs/recipes/ImplementingUndoHistory.html" target="_blank" rel="noopener">redux docs have you covered</a> 利用 Elm的<a href="http://package.elm-lang.org/packages/TheSeamau5/elm-undo-redo/2.0.0" target="_blank" rel="noopener">undo-redo package</a>编写了一个撤销的实例。</p>
<p>注：原文中，作者还提供了一个多个客户端交互的示例程序，因为涉及到服务端的编码，主要是StackService本身（.NET的一个webapi框架）的实现，所以省略了，后续有空我再编写一个Nodejs实现的部分吧，如果机会的话。。我相信你懂的 ，或者可以先看下原文吧。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
        <tag>React</tag>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding Error-First Callbacks</title>
    <url>/node-js-error-first-callback/</url>
    <content><![CDATA[<p>如果说Google的V8引擎是Node.js的心脏，那么回调（callbacks）则是Node的脉络，回调能够激活跨模块和应用程序之间平衡的、非堵塞的异步控制流程。不过在大规模使用回调（callbacks）时 你需要一个通用并可靠的规则。<code>error-first</code> 回调，也称为 <code>errorback</code> 或 <code>errback</code> 或 <code>node-style callback</code>，它们都是用来解决这个问题。并且这已经成为Node.js标准的方式。本文将定义这种模式，它的最佳实践和究竟它是怎么工作的。</p>
<h2>为什么要标准化</h2>
<p>Node大量使用回调让我们仿佛回到了比Javascript更早的变成风格时代。Nodejs使用的回调编程是一种老学院派风格的方式：<a href="http://en.wikipedia.org/wiki/Continuation-passing_style" target="_blank" rel="noopener">延续传统风格（Continuation-Passing Style (CPS)）</a> 。这种方式,  一个&quot;持续函数&quot;(称为 回调)是被作为参数传入，然后再被其他代码调用运行，这就允许不同函数跨整个应用滞后或提前地进行异步处理控制。</p>
<p>Node.js依赖异步代码保存快速性能，这样也就依赖回调模式，回调使用得太多会陷入嵌套回调，回调里嵌套回调，变得非常复杂，程序代码难于阅读，整个应用的流程迷失在嵌套回调中，error-first模式导入解决这个难题。</p>
<h2>定义一个error-first的回调</h2>
<p>确实有两个规则用来定义一个error-first的回调：</p>
<ol>
<li><strong>第一个参数必须是error对象</strong>。如果发生了错误，第一个错误通过第一个参数返回</li>
<li><strong>第二个参数用来传递成功响应的数据</strong>。 如果没有发生错误，那么error参数会被设置为null来传递，而成功的响应数据通过第二个参数返回。</li>
</ol>
<p>是的，它就是这么简单，对吧? 明显的，这里也有一些重要的最佳实践，不过在此之前我们先来看一下这个真实的历例子，关于<code>fs.readFile()</code> :
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readFile(<span class="string">'/foo.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Error Handling Still Needed!</span></span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>fs.readFile()</code> 需要两个参数，一个是需要读取的文件路径，另外一个是读取完成之后的回调函数 ，如果一切正常，文件内容通过data参数返回，如果发生了错误（文件不存在，或者没有权限什么的） 第一个 err 参数就会传递一个error 对象，包括实际的错误信息。</p>
<p>这取决于你怎么处理错误，你可以直接抛出，让程序奔溃，或者拦截住让下一个函数来处理</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readFile(<span class="string">'/foo.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// If an error occurred, handle it (throw, propagate, etc)</span></span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Unknown Error'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Otherwise, log the file contents</span></span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2>分类你的错误</h2>
<p>当一个函数传递错误给回调函数，它就不管这些错误是如何处理，readFile函数不知道读取文件会出现怎样的错误，但是它可以预期，否则就会有灾难后果，但是取代自己处理错误，readFile()会传播错误回到你的原始提交处理者。</p>
<p>当你遵循这种一致的模式时，错误能够如你所愿被一层层传播，每个回调能选择忽略或处理，或基于错误信息再传播。</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(err) &#123;</span><br><span class="line">  <span class="comment">// Handle "Not Found" by responding with a custom error page</span></span><br><span class="line">  <span class="keyword">if</span>(err.fileNotFound) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sendErrorMessage(<span class="string">'File Does not Exist'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Ignore "No Permission" errors, this controller knows that we don't care</span></span><br><span class="line">  <span class="comment">// Propagate all other errors (Express will catch them)</span></span><br><span class="line">  <span class="keyword">if</span>(!err.noPermission) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&lt;!-- more --&gt;</p>
<h2>控制你的流程</h2>
<p>当有这种坚固的回调协议在心中，你就再也不会局限于一次只能使用一个回调，回调能够在队列或并行被调用或串行化方式，如果你要读取10种不同的文件，或进行100个不同的API调用，再也没有理由说不可以一次性进行了。</p>
<p>async库是一种高级回调应用包，因为有error-first回调模式，它就很容易被使用：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example taken from caolan/async README</span></span><br><span class="line"><span class="keyword">async</span>.parallel(&#123;</span><br><span class="line">    one: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    two: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// results is equal to: &#123;one: 1, two: 2&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs最佳实践</title>
    <url>/node-js-best-practices/</url>
    <content><![CDATA[<p>我们总是被问及关于<code>Node.js</code>的最佳实践和技巧 -- 所以这篇文章就是要将这些讲清楚，总结我们在<a href="http://risingstack.com/" title="博客的原文地址" target="_blank" rel="noopener">RisingStack</a>怎么样编写Node.js应用程序。</p>
<p>这些最佳实践有些事属于代码风格，有些则是怎么处理开发流程</p>
<h2>0x01 代码风格 Coding style</h2>
<h3>回调约定 Callback convention</h3>
<p>所有模块应该暴露一个错误的回调函数接口，就像下面这段代码：</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">dragonName, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里做一些事情</span></span><br><span class="line">  <span class="keyword">var</span> dragon = createDragon(dragonName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提示, 这里的第一个参数其实是一个错误信息的参数</span></span><br><span class="line">  <span class="comment">// 这里的值刚好是null</span></span><br><span class="line">  <span class="comment">// 但是如果是有错误产生，那么这里应该向回调函数传递一个Error的对象</span></span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, dragon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>总是在回调函数中检查错误</h3>
<p>为了更好的理解为什么必须这么做，先给大家看一个反例，然后再看看怎么修复它</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this example is **BROKEN**, we will fix it soon :)</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">filePath, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(filePath, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    callback(<span class="built_in">JSON</span>.parse(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">readJSON(<span class="string">'./package.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, pkg</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p>
<p>这个<code>readJSON</code>方法的第一个问题 就是在执行的过程发生异常，而代码并没有检查它(注：这样你就不能获得你期望的程序运行结果)。 你应该始终检查是否存在异常</p>
<p>来看看改进后的版本:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this example is **STILL BROKEN**, we are fixing it!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">filePath, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(filePath, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// here we check, if an error happened</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 啊呀, 把err传递到回调函数中</span></span><br><span class="line">      <span class="comment">// 记住: 把错误放在第一个参数那里</span></span><br><span class="line">      callback(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// no error, pass a null and the JSON</span></span><br><span class="line">    callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>回调函数中的 <code>Return</code></h3>
<p>上面代码中另外一个问题就是当一个错误发生了，代码并不会再if条件语句处终止，而是继续执行，这会带来很多意想不到的事情，作为一个经验法则，始终在回调函数处使用return。</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this example is **STILL BROKEN**, we are fixing it!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">filePath, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(filePath, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>只在同步代码中使用 <code>try-catch</code> 语句</h3>
<p>差不多了，另外一件事件我们不打不要关注下<code>JSON.parse</code>方法， 如果试图转换一个不符合的JSON格式，<code>JSON.parse</code> 可能触发一个异常。</p>
<p>因为<code>JSON.parse</code>是同步执行的，我们可以用<code>try-catch</code>语句将它包装起来。同志们，这里要注意啊！只有同步执行的代码块里才能这么做，如果在回调函数中这就不管用了。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this example **WORKS**! :)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">filePath, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(filePath, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parsedJson;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle error</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse JSON</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      parsedJson = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Everything is ok</span></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, parsedJson);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>尽量避免使用 <code>this</code> 和 <code>new</code></h3>
<p>在Node中绑定一个特殊的上下文并不是一个好主意，因为Node设计到传递大量的回调函数，并且重度使用高等级的函数来管理控制流，使用函数式的编码方式可以省掉你的很多麻烦。当然也有一些特殊的情况，如用属性可以更高效的时候，如果可能的话还是尽量避免使用它们。</p>
<p>&lt;!-- more --&gt;</p>
<h3>创建小而美的模块</h3>
<p>讲问题分解成一个个小问题，并模块化处理它们（Do it the unix-way）：</p>
<p>开发者应该创建通过定义的接口串联各个模块的程序，这样问题就是本地的，并且在将来的版本中可以替换它们来支持新的功能特性</p>
<blockquote>
<p>Developers should build a program out of simple parts connected by well defined interfaces, so problems are local, and parts of the program can be replaced in future versions to support new features.</p>
</blockquote>
<p>不要太另类（注：Deathstars就是国外的一个非主流乐队） -- 保持简单，一个模块就做一件事情，并吧这件事做好
Do not build Deathstars - keep it simple, a module should do one thing, but that thing well.</p>
<h3>使用好的异步模式</h3>
<p>使用 <a href="https://github.com/caolan/async%20%E2%80%9Casync%E2%80%9D" target="_blank" rel="noopener">async</a>.
（注：还有很多，比如我就比较喜欢<a href="https://github.com/JacksonTian/eventproxy" target="_blank" rel="noopener">EventProxy</a>）</p>
<h2>0x02 错误拦截</h2>
<p>错误可以分为两种：操作错误和代码错误
Errors can be divided into two main parts: operational errors and programmer errors.</p>
<h3>操作错误</h3>
<p>操作错误在编码非常好的程序中也同样会发生，因为它们不是bugs，只是操作系统或者远端服务的问题，就像：</p>
<ul>
<li>请求超时</li>
<li>内存溢出</li>
<li>无法链接到远端服务</li>
<li>...</li>
</ul>
<h3>拦截操作错误</h3>
<p>根据不同的操作错误的类型，你可以使用不同的方式：</p>
<ul>
<li>试着解决错误，如果文件不存在，那么你需要创建一个先</li>
<li>在处理网络通讯时，你应该重试一下</li>
<li>告诉客户端，出现了一些问题，并记录一下用户的输入 T</li>
<li>重启进程吧，也许就好了</li>
</ul>
<p>同样，在上面那些原则之外还有： <strong>记录所有的日志</strong>.</p>
<h3>代码错误</h3>
<p>代码错误就是bugs了，这是可以避免的，就像：</p>
<ul>
<li>调用一个异步函数，但是没有使用回调</li>
<li>读取一个空对象的属性</li>
</ul>
<h3>拦截代码错误</h3>
<p>因为这些错误是bugs，你不知道你的程序什么时候崩溃。实际上你应该使用守护进程，当你的程序崩溃时来重启你的程序，就像 <a href="http://supervisord.org/" target="_blank" rel="noopener">supervisord</a> 或者 <a href="http://mmonit.com/monit/" target="_blank" rel="noopener">monit</a> （注：更推荐<a href="https://github.com/Unitech/pm2" target="_blank" rel="noopener">pm2</a> ）</p>
<h2>0x03 工作流</h2>
<h3>使用 <code>npm init</code> 初始化一个新的项目</h3>
<p>这个初始化命令可以帮助你创建程序的<code>package.json</code>文件，并设置一些默认值，你可以在晚点修改它。</p>
<p>当你开始一个新项目时 应该这样开始：
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir my-awesome-new-project</span><br><span class="line">cd my-awesome-new-project</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure></p>
<h3>提供 <code>start</code> 和 <code>test</code> 的命令</h3>
<p>在你的 <code>package.json</code> 文件中你可以在<code>scripts</code>节点下设置对应命令.默认情况下，<code>npm init</code>讲自动创建两个命令，<code>start</code> 和 <code>test</code>.他们可以通过<code>npm start</code> 和  <code>npm test</code> 来运行。
同样你也可以在这里自定义自己的命令并通过 <code>npm run-script &lt;SCRIPT_NAME&gt;</code> 来执行这些命令</p>
<p>提示：NPM会设置一个变量 <code>$PATH</code>（当前目录） 设置成 <code>node_modules/.bin</code>目录来执行文件，这避免全局安装 <code>NPM</code> 模块。
Note, that NPM will set up $PATH to look in node_modules/.bin for executables. This helps avoid global installs of NPM modules.</p>
<h3>Environment variables</h3>
<p>生产环境部署应该使用环境变量。最通过的方式是通过设置 <code>NODE_ENV</code> 变量来实现。
根据你的环境变量，你可以读取不同的配置文件，这里推荐模块<a href="https://github.com/indexzero/nconf" target="_blank" rel="noopener">nconf</a>
当然，你可以在Node.js应用程序中通过 <code>process.env</code> 使用其他环境变量, <code>process.env</code>这个对象包含所有的用户变量
Of course, you can use other environment variables in your Node.js applications with process.env, which is an object that contains the user environment.</p>
<h3>不要重复造轮子</h3>
<p>总是先查找下是否已经存在解决方案。<code>NPM</code>拥有大量的包，很有可能你能在里面找到你需要的模块。</p>
<h3>使用统一代码风格</h3>
<p>使用统一的代码风格，无论你的代码量多么的庞大，都是相对容易阅读的。统一的代码风格一般包含， 缩进规则 ， 变量命名规则 等等。</p>
<p>这里有一份参考，<a href="https://github.com/RisingStack/node-style-guide" target="_blank" rel="noopener">RisingStack‘s Node.js Style Guide</a>。</p>
<h2>0x04 接下来</h2>
<p>我希望这篇文章能够帮助你更好的使用Node.js，并解决一些令你头疼的问题。这里还有一篇关于操作提示和最佳实践的文章，</p>
<p>你可以从这里获得一些关于部署的提示： <a href="http://blog.risingstack.com/continuous-deployment-of-node-js-applications/" target="_blank" rel="noopener">Continuous Deployment of Node.js Applications.</a></p>
<p>扩展阅读: <a href="http://blog.risingstack.com/node-js-best-practices-part-2/" target="_blank" rel="noopener">Node.js Best Practices - Part 2</a> - JSHint and JSCS Rules, JS over JSON, dependency injection and more.</p>
<p>via ： <a href="https://blog.risingstack.com/node-js-best-practices/" target="_blank" rel="noopener">https://blog.risingstack.com/node-js-best-practices/</a></p>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 基础设计模式</title>
    <url>/fundamental_nodejs_design_patterns/</url>
    <content><![CDATA[<p> 当讨论设计模式的时候你可能会想到 <strong>单例</strong>（singletons）, <strong>观察者</strong>（observers） 或者 <strong>工厂</strong>（factories） <strong>factories</strong>（工厂），这篇文章不是专门去讨论他们，同时也会讨论一些其他常用的设计模式，比如<strong>依赖注入</strong>（dependency injection）和<strong>中间件</strong>（middlewares）</p>
<h2>什么是设计模式？</h2>
<p>设计模式是一种对于常见问题的通用可复用的解决方案。</p>
<h2>单例 Singletons</h2>
<p>单例模式限制一个类的实例数量只能是一个，因为使用<code>require</code>方式，在Node.js中创建单例是相当简单的。</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//area.js</span></span><br><span class="line"><span class="keyword">var</span> PI = <span class="built_in">Math</span>.PI;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">circle</span> (<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> radius * radius * PI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.circle = circle;</span><br></pre></td></tr></table></figure></p>
<p>不管我们在程序中调用它多少次，它始终只会存在一个实例
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> areaCalc = <span class="built_in">require</span>(<span class="string">'./area'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(areaCalc.circle(<span class="number">5</span>));</span><br></pre></td></tr></table></figure></p>
<p>因为 <code>requrie</code> 的行为，单例可能是在 <code>NPM</code> 所有模块中最通用的 Node.js 设计模式了</p>
<h2>观察者 Observers</h2>
<p>一个对象包含一个依赖者/观察者的列表，当状态发生变化的时候自动通知它们。去实现观察者模式，就要使用<code>EventEmitter</code>.
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyFancyObservable.js</span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFancyObservable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventEmitter.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.inherits(MyFancyObservable, EventEmitter);</span><br></pre></td></tr></table></figure></p>
<p>这就是我们刚刚创建的一个观察者对象，为了让它有点用，让我给它加几个方法。</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">MyFancyObservable.prototype.hello = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.emit(<span class="string">'hello'</span>, name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>很好，现在我们的对象可以触发事件了 -- 让我们试试看！</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyFancyObservable = <span class="built_in">require</span>(<span class="string">'MyFancyObservable'</span>);</span><br><span class="line"><span class="keyword">var</span> observable = <span class="keyword">new</span> MyFancyObservable();</span><br><span class="line"></span><br><span class="line">observable.on(<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.hello(<span class="string">'john'</span>);</span><br></pre></td></tr></table></figure></p>
<h2>工厂 Factories</h2>
<p>工厂模式是一种创建型的模式，用于脱离构造函数而是提供一种通用接口来创建对象。这种模式在创建复杂过程时非常有用</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.options = options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// modify the options here if you want</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyClass(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.create = create;</span><br></pre></td></tr></table></figure></p>
<p>工厂也让测试变得容易多了，你可以通过它来注入模块的依赖。</p>
<h2>依赖注入 Dependency Injection</h2>
<p>依赖注入是一种当一个或多个依赖（服务）被注入或者引用传递到另外一个依赖对象中的软件设计模式。</p>
<p>In this example, we are going to create a UserModel which gets a database dependency.
在这个例子中，我们要创建一个获取数据库依赖的<code>UserModel</code>对象
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userModel</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> db;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!options.db) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Options.db is required'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  db = options.db;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    create: <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">      db.query(<span class="string">'INSERT ...'</span>, done);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = userModel;</span><br><span class="line">Now we can create an instance <span class="keyword">from</span> it using:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userModel = <span class="built_in">require</span>(<span class="string">'User'</span>)(&#123;</span><br><span class="line">  db: db</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>它有什么用？它让这次变得非常简单 -- 当你在编写你的单元测试的时候，你可以很容易的包装一个数据库实例到你的模型中。</p>
<h2>中间件或管道 Middlewares / pipelines</h2>
<p>中间件是一种强大又简便的模式:一个单元/函数输出的结果是下一个的输入.如果你用过<code>Express</code>或者<code>Koa</code>,那么你应该已经对这个模式比较熟悉了</p>
<p>我们来看一下<code>Koa</code>是怎么实现它的:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.middleware.push(fn);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>非常基础，当你添加一个中间件的时候它仅仅把它添加到一个中间件数组中，到目前为止都还好，那么当请求这台服务器时又会发生什么呢?
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = middleware.length;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">  next = middleware[i].call(<span class="keyword">this</span>, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>没有彩蛋-- 你的中间价被一个接着一个的调用.</p>
<h2>流 Streams</h2>
<p>你可以把流（Streams）想象成特殊的管道（pipelines），它们非常适合处理大数据，特别当它们是字节形式，而非对象时
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">process.stdin.on(<span class="string">'readable'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buf = process.stdin.read(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.dir(buf);</span><br><span class="line">    process.stdin.read(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume2.js</span><br><span class="line">&lt;Buffer 61 62 63&gt;</span><br><span class="line">&lt;Buffer 0a 64 65&gt;</span><br><span class="line">&lt;Buffer 66 0a 67&gt;</span><br><span class="line">&lt;Buffer 68 69 0a&gt;</span><br></pre></td></tr></table></figure></p>
<p>To get a better understanding of streams check out substack's Stream Handbook.</p>
<p>延伸阅读</p>
<p><a href="https://blog.risingstack.com/node-js-best-practices" target="_blank" rel="noopener">Node.js 最佳实践</a>：回调惯例、异步代码模式、错误处理以及工作流技巧。
<a href="https://blog.risingstack.com/node-js-best-practices-part-2" target="_blank" rel="noopener">Node.js 最佳实践 - Part 2</a>：代码提交预检、JavaScript 代码风格检测器及配置。</p>
<p>via 原文： https://blog.risingstack.com/fundamental-node-js-design-patterns/?utm_source=nodeweekly&amp;utm_medium=email</p>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>在Expressjs4.0中使用dustjs模板引擎</title>
    <url>/use-dustjs-engine-in-expressjs4-0/</url>
    <content><![CDATA[<h2>引言</h2>
<p>    <a href="http://linkedin.github.io/dustjs/" target="_blank" rel="noopener">dustjs</a>是一款js模板,最早由个人开发维护，后来由linkin接手，发展的更加迅速，说实话js模板这块有很多选择，都非常优秀，和paypal的选择一样，最终我使用dustjs作为我的首选模板语言。dustjs中文的文档非常少，所以在国内的使用不是很多，这里几篇博文有对dustjs语法基本的介绍<a href="http://blog.sprabbit.com/blog/2013/08/16/introduction-dustjs-1/" target="_blank" rel="noopener">Dust.js语法简介（一）</a>,<a href="http://blog.sprabbit.com/blog/2013/08/17/introduction-dustjs-2/" target="_blank" rel="noopener">Dust.js语法简介（二）</a>,<a href="http://blog.sprabbit.com/blog/2013/08/19/introduction-dustjs-3/" target="_blank" rel="noopener">Dust.js语法简介（三）</a></p>
<p>    express4.0 默认的模板引擎是jade，jade 刚刚开始用的时候感觉像python，有严格的语法格式，方便程序员养成良好的编码习惯，但是在实际使用下就会发现这种强制，在模板端编写逻辑语言的时候，特别在嵌套判断的时候会有一些无法逾越的问题，同时它的性能问题也一直别人诟病。当然你也可以ejs或者其他模板，这不是我要阐述的重点。</p>
<h2>实现</h2>
<p>如果是现成的express项目或者使用express-genarate生成基本结构之后，在<code>package.json</code> 文件的 <code>dependencies</code> 添加三个依赖。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dustjs-helpers&quot;: &quot;~1.3.0&quot;,</span><br><span class="line">&quot;dustjs-linkedin&quot;: &quot;~2.4.2&quot;,</span><br><span class="line">&quot;adaro&quot;: &quot;^0.1.5&quot;</span><br></pre></td></tr></table></figure></p>
<p>其中 <code>dustjs-linkedin</code>是dustjs模板本身，<code>dustjs-helpers</code>是一些模板的扩展方法，在<a href="https://github.com/linkedin/dustjs/wiki/Dust-Tutorial" target="_blank" rel="noopener">dustjs官方的文档</a>中有说明，非常有用，你可以添加自己的helper方法。而<a href="https://github.com/krakenjs/adaro" target="_blank" rel="noopener">adaro</a>是paypal公司提供的dustjs渲染类库，可以使用它方便的在多个模板引擎中切换，paypal的基于express的web框架krakenjs使用的就是adaro作为模板管理的工具。</p>
<p>然后在app的入口代码处添加模板的使用情况</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var dustjs = require(&apos;adaro&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">// 注册</span><br><span class="line">app.engine(&quot;dust&quot;,dustjs.dust(&#123; cache: false &#125;));</span><br><span class="line">// view engine setup</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;dust&apos;);</span><br></pre></td></tr></table></figure></p>
<p>然后在views目录下使用 添加.dust 后缀的视图文件。
如果你编写了自己的helper 那么需要手动在入口文件处 require一下。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>ExpressJs</tag>
        <tag>Dustjs</tag>
      </tags>
  </entry>
  <entry>
    <title>在BAE中使用mongoose操作mongodb</title>
    <url>/use_mongoose_on_bae_with_short_connection/</url>
    <content><![CDATA[<p>  几乎网上所有的使用mongoose的例子都是长连接的方式，因为nodejs本身机制的关系，使用长连接一定程度上会提高性能，但是bae的免费mongodb不支持长链接，之前也有很多人做了尝试，比如<a href="http://www.drmfly.net/2014/01/11/bae3-use-mongoose-connect-mongodb.html" title="断开后捕捉错误，然后自动重连的方式" target="_blank" rel="noopener">断开后捕捉错误，然后自动重连的方式</a>,现在来看都不太成功，于是还是中规中矩的使用短链接的方式来做吧，这里实现了一个连接打开和关闭的托管。</p>
<p><strong>mongoosekeeper.js</strong>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">"util"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MongooseKeeper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.db = mongoose.createConnection();</span><br><span class="line">    <span class="keyword">this</span>.open_count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">MongooseKeeper.prototype.config = <span class="function"><span class="keyword">function</span>(<span class="params">conf</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// body...</span></span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        db: &#123; <span class="attr">native_parser</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        server: &#123;</span><br><span class="line">            poolSize:<span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> constr = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span>(process.env.MONGO_DB_STR)&#123;</span><br><span class="line">        constr = process.env.MONGO_DB_STR ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//'mongodb://user:pass@localhost:port/database'</span></span><br><span class="line">        constr = util.format(<span class="string">'mongodb://%s:%s@%s:%d/%s'</span>, conf.userid,conf.password,conf.host,conf.port,conf.database);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.dbUri = constr;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">MongooseKeeper.prototype.open =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.open_count++;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.open_count ==<span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.db.readyState == <span class="number">0</span>)</span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">this</span>.db.open(<span class="keyword">this</span>.dbUri,<span class="keyword">this</span>.options,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// body...</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"db opened"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">MongooseKeeper.prototype.close =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.open_count--;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.open_count == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.db.close(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"db closed"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">MongooseKeeper.prototype.use = <span class="function"><span class="keyword">function</span>(<span class="params">action,callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//OPEN</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.open();</span><br><span class="line">    action.call(<span class="literal">null</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//CLOSE</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"正在访问的数据库请求量"</span>+self.open_count);</span><br><span class="line">        self.close();</span><br><span class="line">        callback.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="comment">//DONE</span></span><br><span class="line">        self =<span class="literal">null</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports = <span class="built_in">module</span>.exports = <span class="keyword">new</span> MongooseKeeper();</span><br></pre></td></tr></table></figure></p>
<p>首先在应用启动的时候，比如在app.js中，配置数据连接的等信息
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 引用mongoosekeeper</span><br><span class="line">var mongoosekeeper =  require(&apos;./lib/mongoosekeeper&apos;);</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 调用更新配置，这里的配置可以去读某个json</span><br><span class="line">mongoosekeeper.config(&#123;</span><br><span class="line">    &quot;host&quot;: &quot;192.168.57.186&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;dbname&quot;,</span><br><span class="line">    &quot;userid&quot;:&quot;userid&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;123456&quot;,</span><br><span class="line">    &quot;port&quot;:27017</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>定义Model
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var mongoose = require(&apos;mongoose&apos;);</span><br><span class="line">var Schema = mongoose.Schema;</span><br><span class="line">var mongokeeper  = require(&apos;../lib/mongoosekeeper&apos;);</span><br><span class="line"></span><br><span class="line">var articleModel = function () &#123;</span><br><span class="line"></span><br><span class="line">    var articleSchema = new Schema(&#123;</span><br><span class="line">        content     : String, //  发布内容</span><br><span class="line">        type        : Number, //</span><br><span class="line">        pictures    : [&#123;url:String,width:Number,height:Number&#125;], // 配图</span><br><span class="line">        thumbnails  : [&#123;url:String,width:Number,height:Number&#125;], // 缩略图</span><br><span class="line">        tags        : [String], // 标签</span><br><span class="line">        author      : String, //  发布人账号</span><br><span class="line">        author_name : String, //  发布人名称</span><br><span class="line">        create_date : &#123; type: Date, default: Date.now &#125;, //创建时间</span><br><span class="line">        meta        : &#123;</span><br><span class="line">                        votes  : Number, //顶</span><br><span class="line">                        favs   : Number  //收藏</span><br><span class="line">                    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    //因为使用了createConnection 这里要使用mongokeeper.db.model</span><br><span class="line">    //而不是mongoose.model</span><br><span class="line">    return mongokeeper.db.model(&apos;article&apos;, articleSchema);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = new articleModel();</span><br></pre></td></tr></table></figure></p>
<p>在调用model的时候，使用 <code>mongoosekeeper.use</code> 方法包装实际的调用即可
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var express        = require(&apos;express&apos;),</span><br><span class="line">    router         = express.Router(),</span><br><span class="line"> 	mongoosekeeper =  require(&apos;../lib/mongoosekeeper&apos;),</span><br><span class="line"> 	articleModel   =  require(&apos;../models/articleModel&apos;);</span><br><span class="line"></span><br><span class="line">/* GET home page. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">	mongoosekeeper.use(queryArticle,function(err,list)&#123;</span><br><span class="line">		if(err)&#123;</span><br><span class="line">			throw err;</span><br><span class="line">		&#125;</span><br><span class="line">		else&#123;</span><br><span class="line">			res.render(&apos;index&apos;,&#123;data:list&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">	&#125;);	</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line">//proxy 参数即为mongoosekeeper.use的第二个参数</span><br><span class="line">function queryArticle(proxy)&#123;</span><br><span class="line">	var search = &#123;&#125; ; //获取所有文章</span><br><span class="line">    var query = articleModel.find(search).limit(25); </span><br><span class="line">    query.sort(&apos;-create_date&apos;);</span><br><span class="line">    query.exec(proxy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://git.oschina.net/xuanye-wan/sampleapp/tree/master/express_mongoose" title="git@osc" target="_blank" rel="noopener">完整代码</a></p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将hexo部署到gitcafe上</title>
    <url>/how_to_deploy_pages_on_gitcafe/</url>
    <content><![CDATA[<h2>关于hexo</h2>
<p><a href="http://zespia.tw/hexo/zh-CN/" title="hexo" target="_blank" rel="noopener">hexo</a> 是基于<a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a>的一个博客撰写程序，使用markdown格式撰写博客，并通过hexo生成静态文件，可以发布到任何支持静态文件的空间（比如github等），但是本文不是介绍如何使用hexo或者nodejs的，如果你两者一无所知，我建议你谷歌一下相关内容，再行阅读本文。<a href="http://zipperary.com/categories/hexo/" target="_blank" rel="noopener">这里</a> 有一些比较好的介绍hexo如何使用的文章.</p>
<h2>关于gitcafe</h2>
<p>本文将展示如何将hexo 部署到<a href="https://gitcafe.com/" target="_blank" rel="noopener">gitcafe</a>上，gitcafe 是国内的源代码托管服务商,类似国外的<a href="https://www.github.com/" target="_blank" rel="noopener">github</a>。不过服务器因为在国内，所以访问速度还是比较理想，就是不知道是否能够做大做强，毕竟github摆在眼前。</p>
<h2>进行部署</h2>
<p>首先访问 https://gitcafe.com/ ,注册一个新的账号，过程非常简单，就不描述了，只是别忘了去邮箱确认哦，然后进入到个人主页新建一个项目，项目名称必须和用户名一致。如下图所示：<img src="http://ww1.sinaimg.cn/large/697065c1gw1ebfnyfkwwmj20a604bmx8.jpg" alt="新建一个和用户名一样的项目"></p>
<p>接着需要配置下ssh,点击账号设置 <img src="http://ww4.sinaimg.cn/large/697065c1gw1ebfo0m2jfej207e08iaa9.jpg" alt="账号设置">，来到ssh管理中添加公钥，如果你不知道如何使用ssh，请参考<a href="https://gitcafe.com/GitCafe/Help/wiki/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%92%8C%E8%AE%BE%E7%BD%AE-Git#wiki" title="添加SSH" target="_blank" rel="noopener">这里</a></p>
<p>如果你是windows git的绿色版的话 ，把git目录下的bin目录和cmd目录添加到<code>path</code>变量中，同时设置下 <code>HOME</code> 变量，可以是当前用户 <code>C:\Users\xuanye</code> 目录</p>
<p>然后修改hexo的配置文件<code>_config.yaml</code> ,将<code>deploy</code> 配置节修改如下
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: git@gitcafe.com:xuanye/xuanye.git</span><br><span class="line">  branch: gitcafe-pages</span><br></pre></td></tr></table></figure></p>
<p><strong>注意：xuanye修改为你自己的账号，branch必须使用gitcafe-pages 分支</strong></p>
<p>然后调用 <code>hexo g</code> 重新生成，并调用 <code>hexo deploy</code> 部署即可 （在重新部署前 先删除 <code>.deploy</code> 目录）</p>
<p>部署成功后，可以通过 http://[username].gitcafe.com/ 进行访问了。</p>
<p>现在gitcafe还支持绑定自定义域名，在 <code>项目首页&gt;项目管理&gt;自定义域名</code> 添加你的域名,然后到你的DNS服务商那里添加一条A记录 将域名指向GitCafe服务器的IP <code>117.79.146.98</code>
<img src="http://ww1.sinaimg.cn/large/697065c1gw1ebfpyjrqvsj20ia04h74f.jpg" alt="添加域名"> ，等段时间生效后。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitcafe</tag>
      </tags>
  </entry>
  <entry>
    <title>在windows上安装多个Nodejs版本</title>
    <url>/install_multiple_nodejs_versions_on_windows/</url>
    <content><![CDATA[<p> 至于为什么会需要安装多个版本的nodejs，我就不解释了，等你遇到了自然就明白了，在linux和OSX上可以使用<a href="https://github.com/creationix/nvm" title="nvm" target="_blank" rel="noopener">NVM</a>（Node Version Manage）来安装多个版本的Nodejs，但是windows下却一直没有合适的工具，后来某次我检索到一个工具名字叫 <a href="https://github.com/hakobera/nvmw" title="nvmw" target="_blank" rel="noopener">nvmw</a>（Simple Node Version Manager for Windows）
看介绍也是像模像样的，使用的方法基本和NVM差不多（毕竟他们的名字都差不多），不过在实际使用当中却发现有些问题导致不能用，懒人请直接跳到最后不要看过程鸟。<br>
 第一个问题nvmw获取npm的版本号是通过地址<a href="https://raw.github.com/joyent/node/%25s/deps/npm/package.json" title="https://raw.github.com/joyent/node/%s/deps/npm/package.json" target="_blank" rel="noopener">https://raw.github.com/joyent/node/%s/deps/npm/package.json</a> 解析json来获取的，但是这个地址因为众所周知的原因在天朝是不能访问到的，这不是大问题，只需要把地址修改一下通过代理访问即可，于是我把上面的地址修改为<a href="https://rawgithub.com/joyent/node/%25s/deps/npm/package.json" title="https://rawgithub.com/joyent/node/%s/deps/npm/package.json" target="_blank" rel="noopener">https://rawgithub.com/joyent/node/%s/deps/npm/package.json</a>，但是问题却没有完全解决，我们遇到了第二个问题。<br>
 第二个问题是获取上述json的代码通过httpheader中的content-length来初始化一段缓冲区，但是这个地址返回是不包含这个content-length的。。而这段代码又是共用的代码。于是我不得不修改代码解决上述的问题，并且不影响其他功能。</p>
<p> 终于可以快乐地使用nvmw来管理本地的Nodejs版本啦，但是仍然一个龊蛋的问题，就是通过命令行修改的环境变量在关闭窗口后就无效了。。所以在每次使用nodejs前 ，还要必须调用下nvmw use v0.10.18类似的命令，重新指定下。当然你觉得烦 可以自己手动添加下对应版本的目录到环境变量。</p>
<p> 好了，说了那么没用，开始说点实际了，首先你要下载 <a href="http://pan.baidu.com/s/1xdmf3" title="修改后的nvmw" target="_blank" rel="noopener">nvmw</a> （当然是修改后的版本），nvmw主页上说安装需要git，python，但是我看了下代码貌似不需要。直接下载解压到目录后（假设为d:\nvmw）,将目录<code>d:\nvmw</code> 添加到环境变量中，这样我们可以直接在命令行下使用了。</p>
<p> 使用方法 直接在原官网复制的：</p>
<pre><code>Usage:
  nvmw help                    显示帮助信息
  nvmw install [version]       下载并安装指定版本[version]
  nvmw uninstall [version]     卸载某版本[version]
  nvmw use [version]           修改当前版本[version]
  nvmw ls                      显示当前已经安装版本

Example:
  nvmw install v0.10.18        安装v0.10.18版本  
  nvmw use v0.10.18            使用v0.10.18版本  
</code></pre>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
</search>
